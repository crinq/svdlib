/* header created by json2c.py from example/stm32f405/f405.json */
#include <stdint.h>

#define CPU STM32F405

/** 
*  name: TIM2
*  description: General purpose timers
*  group: TIM
*  address: 0x40000000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40000000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40000004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CR2_t {
    uint32_t _RESERVED_0 : 3;
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40000008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_1 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000000C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_2 : 1;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t _RESERVED_3 : 1;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t _RESERVED_4 : 1;
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40000010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_5 : 1;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_6 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40000014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM2_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t _RESERVED_7 : 1;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40000018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< CC1S, reset value: 0x0
    uint32_t OC1FE : 1;  ///< OC1FE, reset value: 0x0
    uint32_t OC1PE : 1;  ///< OC1PE, reset value: 0x0
    uint32_t OC1M : 3;  ///< OC1M, reset value: 0x0
    uint32_t OC1CE : 1;  ///< OC1CE, reset value: 0x0
    uint32_t CC2S : 2;  ///< CC2S, reset value: 0x0
    uint32_t OC2FE : 1;  ///< OC2FE, reset value: 0x0
    uint32_t OC2PE : 1;  ///< OC2PE, reset value: 0x0
    uint32_t OC2M : 3;  ///< OC2M, reset value: 0x0
    uint32_t OC2CE : 1;  ///< OC2CE, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40000018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x4000001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< CC3S, reset value: 0x0
    uint32_t OC3FE : 1;  ///< OC3FE, reset value: 0x0
    uint32_t OC3PE : 1;  ///< OC3PE, reset value: 0x0
    uint32_t OC3M : 3;  ///< OC3M, reset value: 0x0
    uint32_t OC3CE : 1;  ///< OC3CE, reset value: 0x0
    uint32_t CC4S : 2;  ///< CC4S, reset value: 0x0
    uint32_t OC4FE : 1;  ///< OC4FE, reset value: 0x0
    uint32_t OC4PE : 1;  ///< OC4PE, reset value: 0x0
    uint32_t OC4M : 3;  ///< OC4M, reset value: 0x0
    uint32_t O24CE : 1;  ///< O24CE, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x4000001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40000020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_8 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_9 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_10 : 1;
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_11 : 1;
    uint32_t CC4NP : 1;  ///< Capture/Compare 4 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40000024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CNT_t {
    uint32_t CNT_L : 16;  ///< Low counter value, reset value: 0x0
    uint32_t CNT_H : 16;  ///< High counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40000028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000002C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_ARR_t {
    uint32_t ARR_L : 16;  ///< Low Auto-reload value, reset value: 0x0
    uint32_t ARR_H : 16;  ///< High Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40000034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCR1_t {
    uint32_t CCR1_L : 16;  ///< Low Capture/Compare 1 value, reset value: 0x0
    uint32_t CCR1_H : 16;  ///< High Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40000038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCR2_t {
    uint32_t CCR2_L : 16;  ///< Low Capture/Compare 2 value, reset value: 0x0
    uint32_t CCR2_H : 16;  ///< High Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x4000003C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCR3_t {
    uint32_t CCR3_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR3_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40000040
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_CCR4_t {
    uint32_t CCR4_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR4_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40000048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_12 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x4000004C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

  /** 
  * name: OR
  * description: TIM5 option register
  * address: 0x40000050
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM2_OR_t {
    uint32_t _RESERVED_13 : 10;
    uint32_t ITR1_RMP : 2;  ///< Timer Input 4 remap, reset value: 0x0
  } OR;

} TIM2_t;


/** 
*  name: TIM3
*  description: General purpose timers
*  group: TIM
*  address: 0x40000400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40000400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40000404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CR2_t {
    uint32_t _RESERVED_14 : 3;
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40000408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_15 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000040C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_16 : 1;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t _RESERVED_17 : 1;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t _RESERVED_18 : 1;
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40000410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_19 : 1;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_20 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40000414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM3_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t _RESERVED_21 : 1;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40000418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< CC1S, reset value: 0x0
    uint32_t OC1FE : 1;  ///< OC1FE, reset value: 0x0
    uint32_t OC1PE : 1;  ///< OC1PE, reset value: 0x0
    uint32_t OC1M : 3;  ///< OC1M, reset value: 0x0
    uint32_t OC1CE : 1;  ///< OC1CE, reset value: 0x0
    uint32_t CC2S : 2;  ///< CC2S, reset value: 0x0
    uint32_t OC2FE : 1;  ///< OC2FE, reset value: 0x0
    uint32_t OC2PE : 1;  ///< OC2PE, reset value: 0x0
    uint32_t OC2M : 3;  ///< OC2M, reset value: 0x0
    uint32_t OC2CE : 1;  ///< OC2CE, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40000418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x4000041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< CC3S, reset value: 0x0
    uint32_t OC3FE : 1;  ///< OC3FE, reset value: 0x0
    uint32_t OC3PE : 1;  ///< OC3PE, reset value: 0x0
    uint32_t OC3M : 3;  ///< OC3M, reset value: 0x0
    uint32_t OC3CE : 1;  ///< OC3CE, reset value: 0x0
    uint32_t CC4S : 2;  ///< CC4S, reset value: 0x0
    uint32_t OC4FE : 1;  ///< OC4FE, reset value: 0x0
    uint32_t OC4PE : 1;  ///< OC4PE, reset value: 0x0
    uint32_t OC4M : 3;  ///< OC4M, reset value: 0x0
    uint32_t O24CE : 1;  ///< O24CE, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x4000041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40000420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_22 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_23 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_24 : 1;
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_25 : 1;
    uint32_t CC4NP : 1;  ///< Capture/Compare 4 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40000424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CNT_t {
    uint32_t CNT_L : 16;  ///< Low counter value, reset value: 0x0
    uint32_t CNT_H : 16;  ///< High counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40000428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000042C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_ARR_t {
    uint32_t ARR_L : 16;  ///< Low Auto-reload value, reset value: 0x0
    uint32_t ARR_H : 16;  ///< High Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40000434
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCR1_t {
    uint32_t CCR1_L : 16;  ///< Low Capture/Compare 1 value, reset value: 0x0
    uint32_t CCR1_H : 16;  ///< High Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40000438
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCR2_t {
    uint32_t CCR2_L : 16;  ///< Low Capture/Compare 2 value, reset value: 0x0
    uint32_t CCR2_H : 16;  ///< High Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x4000043C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCR3_t {
    uint32_t CCR3_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR3_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40000440
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_CCR4_t {
    uint32_t CCR4_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR4_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40000448
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_26 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x4000044C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM3_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

} TIM3_t;


/** 
*  name: TIM4
*  description: General purpose timers
*  group: TIM
*  address: 0x40000800
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40000800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40000804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CR2_t {
    uint32_t _RESERVED_27 : 3;
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40000808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_28 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000080C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_29 : 1;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t _RESERVED_30 : 1;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t _RESERVED_31 : 1;
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40000810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_32 : 1;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_33 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40000814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM4_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t _RESERVED_34 : 1;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40000818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< CC1S, reset value: 0x0
    uint32_t OC1FE : 1;  ///< OC1FE, reset value: 0x0
    uint32_t OC1PE : 1;  ///< OC1PE, reset value: 0x0
    uint32_t OC1M : 3;  ///< OC1M, reset value: 0x0
    uint32_t OC1CE : 1;  ///< OC1CE, reset value: 0x0
    uint32_t CC2S : 2;  ///< CC2S, reset value: 0x0
    uint32_t OC2FE : 1;  ///< OC2FE, reset value: 0x0
    uint32_t OC2PE : 1;  ///< OC2PE, reset value: 0x0
    uint32_t OC2M : 3;  ///< OC2M, reset value: 0x0
    uint32_t OC2CE : 1;  ///< OC2CE, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40000818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x4000081C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< CC3S, reset value: 0x0
    uint32_t OC3FE : 1;  ///< OC3FE, reset value: 0x0
    uint32_t OC3PE : 1;  ///< OC3PE, reset value: 0x0
    uint32_t OC3M : 3;  ///< OC3M, reset value: 0x0
    uint32_t OC3CE : 1;  ///< OC3CE, reset value: 0x0
    uint32_t CC4S : 2;  ///< CC4S, reset value: 0x0
    uint32_t OC4FE : 1;  ///< OC4FE, reset value: 0x0
    uint32_t OC4PE : 1;  ///< OC4PE, reset value: 0x0
    uint32_t OC4M : 3;  ///< OC4M, reset value: 0x0
    uint32_t O24CE : 1;  ///< O24CE, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x4000081C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40000820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_35 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_36 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_37 : 1;
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_38 : 1;
    uint32_t CC4NP : 1;  ///< Capture/Compare 4 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40000824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CNT_t {
    uint32_t CNT_L : 16;  ///< Low counter value, reset value: 0x0
    uint32_t CNT_H : 16;  ///< High counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40000828
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000082C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_ARR_t {
    uint32_t ARR_L : 16;  ///< Low Auto-reload value, reset value: 0x0
    uint32_t ARR_H : 16;  ///< High Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40000834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCR1_t {
    uint32_t CCR1_L : 16;  ///< Low Capture/Compare 1 value, reset value: 0x0
    uint32_t CCR1_H : 16;  ///< High Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40000838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCR2_t {
    uint32_t CCR2_L : 16;  ///< Low Capture/Compare 2 value, reset value: 0x0
    uint32_t CCR2_H : 16;  ///< High Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x4000083C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCR3_t {
    uint32_t CCR3_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR3_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40000840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_CCR4_t {
    uint32_t CCR4_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR4_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40000848
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_39 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x4000084C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM4_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

} TIM4_t;


/** 
*  name: TIM5
*  description: General-purpose-timers
*  group: TIM
*  address: 0x40000C00
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40000C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40000C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CR2_t {
    uint32_t _RESERVED_40 : 3;
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40000C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_41 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x40000C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_42 : 1;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t _RESERVED_43 : 1;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t _RESERVED_44 : 1;
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40000C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_45 : 1;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_46 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40000C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM5_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t _RESERVED_47 : 1;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40000C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< CC1S, reset value: 0x0
    uint32_t OC1FE : 1;  ///< OC1FE, reset value: 0x0
    uint32_t OC1PE : 1;  ///< OC1PE, reset value: 0x0
    uint32_t OC1M : 3;  ///< OC1M, reset value: 0x0
    uint32_t OC1CE : 1;  ///< OC1CE, reset value: 0x0
    uint32_t CC2S : 2;  ///< CC2S, reset value: 0x0
    uint32_t OC2FE : 1;  ///< OC2FE, reset value: 0x0
    uint32_t OC2PE : 1;  ///< OC2PE, reset value: 0x0
    uint32_t OC2M : 3;  ///< OC2M, reset value: 0x0
    uint32_t OC2CE : 1;  ///< OC2CE, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40000C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x40000C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< CC3S, reset value: 0x0
    uint32_t OC3FE : 1;  ///< OC3FE, reset value: 0x0
    uint32_t OC3PE : 1;  ///< OC3PE, reset value: 0x0
    uint32_t OC3M : 3;  ///< OC3M, reset value: 0x0
    uint32_t OC3CE : 1;  ///< OC3CE, reset value: 0x0
    uint32_t CC4S : 2;  ///< CC4S, reset value: 0x0
    uint32_t OC4FE : 1;  ///< OC4FE, reset value: 0x0
    uint32_t OC4PE : 1;  ///< OC4PE, reset value: 0x0
    uint32_t OC4M : 3;  ///< OC4M, reset value: 0x0
    uint32_t O24CE : 1;  ///< O24CE, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x40000C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40000C20
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_48 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_49 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_50 : 1;
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t _RESERVED_51 : 1;
    uint32_t CC4NP : 1;  ///< Capture/Compare 4 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40000C24
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CNT_t {
    uint32_t CNT_L : 16;  ///< Low counter value, reset value: 0x0
    uint32_t CNT_H : 16;  ///< High counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40000C28
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x40000C2C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_ARR_t {
    uint32_t ARR_L : 16;  ///< Low Auto-reload value, reset value: 0x0
    uint32_t ARR_H : 16;  ///< High Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40000C34
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCR1_t {
    uint32_t CCR1_L : 16;  ///< Low Capture/Compare 1 value, reset value: 0x0
    uint32_t CCR1_H : 16;  ///< High Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40000C38
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCR2_t {
    uint32_t CCR2_L : 16;  ///< Low Capture/Compare 2 value, reset value: 0x0
    uint32_t CCR2_H : 16;  ///< High Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x40000C3C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCR3_t {
    uint32_t CCR3_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR3_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40000C40
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_CCR4_t {
    uint32_t CCR4_L : 16;  ///< Low Capture/Compare value, reset value: 0x0
    uint32_t CCR4_H : 16;  ///< High Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40000C48
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_52 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x40000C4C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

  /** 
  * name: OR
  * description: TIM5 option register
  * address: 0x40000C50
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM5_OR_t {
    uint32_t _RESERVED_53 : 6;
    uint32_t IT4_RMP : 2;  ///< Timer Input 4 remap, reset value: 0x0
  } OR;

} TIM5_t;


/** 
*  name: TIM6
*  description: Basic timers
*  group: TIM
*  address: 0x40001000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40001000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t _RESERVED_54 : 3;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40001004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_CR2_t {
    uint32_t _RESERVED_55 : 4;
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
  } CR2;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000100C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t _RESERVED_56 : 7;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40001010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40001014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM6_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
  } EGR;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40001024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_CNT_t {
    uint32_t CNT : 16;  ///< Low counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40001028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000102C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM6_ARR_t {
    uint32_t ARR : 16;  ///< Low Auto-reload value, reset value: 0x0
  } ARR;

} TIM6_t;


/** 
*  name: TIM7
*  description: Basic timers
*  group: TIM
*  address: 0x40001400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40001400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t _RESERVED_57 : 3;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40001404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_CR2_t {
    uint32_t _RESERVED_58 : 4;
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
  } CR2;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000140C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t _RESERVED_59 : 7;
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40001410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40001414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM7_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
  } EGR;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40001424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_CNT_t {
    uint32_t CNT : 16;  ///< Low counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40001428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000142C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM7_ARR_t {
    uint32_t ARR : 16;  ///< Low Auto-reload value, reset value: 0x0
  } ARR;

} TIM7_t;


/** 
*  name: TIM12
*  description: General purpose timers
*  group: TIM
*  address: 0x40001800
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40001800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t _RESERVED_60 : 3;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40001804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CR2_t {
    uint32_t _RESERVED_61 : 4;
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40001808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_62 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000180C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_63 : 3;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40001810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_64 : 3;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_65 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40001814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM12_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t _RESERVED_66 : 3;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40001818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
    uint32_t _RESERVED_67 : 1;
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t OC2FE : 1;  ///< Output Compare 2 fast enable, reset value: 0x0
    uint32_t OC2PE : 1;  ///< Output Compare 2 preload enable, reset value: 0x0
    uint32_t OC2M : 3;  ///< Output Compare 2 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40001818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 3;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t _RESERVED_68 : 1;
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 3;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40001820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_69 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_70 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40001824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40001828
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000182C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40001834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40001838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM12_CCR2_t {
    uint32_t CCR2 : 16;  ///< Capture/Compare 2 value, reset value: 0x0
  } CCR2;

} TIM12_t;


/** 
*  name: TIM13
*  description: General-purpose-timers
*  group: TIM
*  address: 0x40001C00
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40001C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t _RESERVED_71 : 4;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x40001C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40001C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_72 : 7;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40001C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM13_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40001C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40001C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40001C20
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_73 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40001C24
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40001C28
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x40001C2C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40001C34
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM13_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

} TIM13_t;


/** 
*  name: TIM14
*  description: General-purpose-timers
*  group: TIM
*  address: 0x40002000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40002000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t _RESERVED_74 : 4;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4000200C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40002010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_75 : 7;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40002014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM14_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40002018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40002018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40002020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_76 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40002024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40002028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4000202C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40002034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM14_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

} TIM14_t;


/** 
*  name: RTC
*  description: Real-time clock
*  group: RTC
*  address: 0x40002800
*/
typedef struct{
  /** 
  * name: TR
  * description: time register
  * address: 0x40002800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_TR_t {
    uint32_t SU : 4;  ///< Second units in BCD format, reset value: 0x0
    uint32_t ST : 3;  ///< Second tens in BCD format, reset value: 0x0
    uint32_t _RESERVED_77 : 1;
    uint32_t MNU : 4;  ///< Minute units in BCD format, reset value: 0x0
    uint32_t MNT : 3;  ///< Minute tens in BCD format, reset value: 0x0
    uint32_t _RESERVED_78 : 1;
    uint32_t HU : 4;  ///< Hour units in BCD format, reset value: 0x0
    uint32_t HT : 2;  ///< Hour tens in BCD format, reset value: 0x0
    uint32_t PM : 1;  ///< AM/PM notation, reset value: 0x0
  } TR;

  /** 
  * name: DR
  * description: date register
  * address: 0x40002804
  * offset: 0x4
  * reset value: 0x00002101
  * size: 0x20
  * access: read-write
  */
  struct RTC_DR_t {
    uint32_t DU : 4;  ///< Date units in BCD format, reset value: 0x1
    uint32_t DT : 2;  ///< Date tens in BCD format, reset value: 0x0
    uint32_t _RESERVED_79 : 2;
    uint32_t MU : 4;  ///< Month units in BCD format, reset value: 0x1
    uint32_t MT : 1;  ///< Month tens in BCD format, reset value: 0x0
    uint32_t WDU : 3;  ///< Week day units, reset value: 0x1
    uint32_t YU : 4;  ///< Year units in BCD format, reset value: 0x0
    uint32_t YT : 4;  ///< Year tens in BCD format, reset value: 0x0
  } DR;

  /** 
  * name: CR
  * description: control register
  * address: 0x40002808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_CR_t {
    uint32_t WCKSEL : 3;  ///< Wakeup clock selection, reset value: 0x0
    uint32_t TSEDGE : 1;  ///< Time-stamp event active edge, reset value: 0x0
    uint32_t REFCKON : 1;  ///< Reference clock detection enable (50 or 60 Hz), reset value: 0x0
    uint32_t _RESERVED_80 : 1;
    uint32_t FMT : 1;  ///< Hour format, reset value: 0x0
    uint32_t DCE : 1;  ///< Coarse digital calibration enable, reset value: 0x0
    uint32_t ALRAE : 1;  ///< Alarm A enable, reset value: 0x0
    uint32_t ALRBE : 1;  ///< Alarm B enable, reset value: 0x0
    uint32_t WUTE : 1;  ///< Wakeup timer enable, reset value: 0x0
    uint32_t TSE : 1;  ///< Time stamp enable, reset value: 0x0
    uint32_t ALRAIE : 1;  ///< Alarm A interrupt enable, reset value: 0x0
    uint32_t ALRBIE : 1;  ///< Alarm B interrupt enable, reset value: 0x0
    uint32_t WUTIE : 1;  ///< Wakeup timer interrupt enable, reset value: 0x0
    uint32_t TSIE : 1;  ///< Time-stamp interrupt enable, reset value: 0x0
    uint32_t ADD1H : 1;  ///< Add 1 hour (summer time change), reset value: 0x0
    uint32_t SUB1H : 1;  ///< Subtract 1 hour (winter time change), reset value: 0x0
    uint32_t BKP : 1;  ///< Backup, reset value: 0x0
    uint32_t _RESERVED_81 : 1;
    uint32_t POL : 1;  ///< Output polarity, reset value: 0x0
    uint32_t OSEL : 2;  ///< Output selection, reset value: 0x0
    uint32_t COE : 1;  ///< Calibration output enable, reset value: 0x0
  } CR;

  /** 
  * name: ISR
  * description: initialization and status register
  * address: 0x4000280C
  * offset: 0xC
  * reset value: 0x00000007
  * size: 0x20
  * access: 
  */
  struct RTC_ISR_t {
    uint32_t ALRAWF : 1;  ///< Alarm A write flag, reset value: 0x1
    uint32_t ALRBWF : 1;  ///< Alarm B write flag, reset value: 0x1
    uint32_t WUTWF : 1;  ///< Wakeup timer write flag, reset value: 0x1
    uint32_t SHPF : 1;  ///< Shift operation pending, reset value: 0x0
    uint32_t INITS : 1;  ///< Initialization status flag, reset value: 0x0
    uint32_t RSF : 1;  ///< Registers synchronization flag, reset value: 0x0
    uint32_t INITF : 1;  ///< Initialization flag, reset value: 0x0
    uint32_t INIT : 1;  ///< Initialization mode, reset value: 0x0
    uint32_t ALRAF : 1;  ///< Alarm A flag, reset value: 0x0
    uint32_t ALRBF : 1;  ///< Alarm B flag, reset value: 0x0
    uint32_t WUTF : 1;  ///< Wakeup timer flag, reset value: 0x0
    uint32_t TSF : 1;  ///< Time-stamp flag, reset value: 0x0
    uint32_t TSOVF : 1;  ///< Time-stamp overflow flag, reset value: 0x0
    uint32_t TAMP1F : 1;  ///< Tamper detection flag, reset value: 0x0
    uint32_t TAMP2F : 1;  ///< TAMPER2 detection flag, reset value: 0x0
    uint32_t _RESERVED_82 : 1;
    uint32_t RECALPF : 1;  ///< Recalibration pending Flag, reset value: 0x0
  } ISR;

  /** 
  * name: PRER
  * description: prescaler register
  * address: 0x40002810
  * offset: 0x10
  * reset value: 0x007F00FF
  * size: 0x20
  * access: read-write
  */
  struct RTC_PRER_t {
    uint32_t PREDIV_S : 15;  ///< Synchronous prescaler factor, reset value: 0xFF
    uint32_t _RESERVED_83 : 1;
    uint32_t PREDIV_A : 7;  ///< Asynchronous prescaler factor, reset value: 0x7F
  } PRER;

  /** 
  * name: WUTR
  * description: wakeup timer register
  * address: 0x40002814
  * offset: 0x14
  * reset value: 0x0000FFFF
  * size: 0x20
  * access: read-write
  */
  struct RTC_WUTR_t {
    uint32_t WUT : 16;  ///< Wakeup auto-reload value bits, reset value: 0xFFFF
  } WUTR;

  /** 
  * name: CALIBR
  * description: calibration register
  * address: 0x40002818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_CALIBR_t {
    uint32_t DC : 5;  ///< Digital calibration, reset value: 0x0
    uint32_t _RESERVED_84 : 2;
    uint32_t DCS : 1;  ///< Digital calibration sign, reset value: 0x0
  } CALIBR;

  /** 
  * name: ALRMAR
  * description: alarm A register
  * address: 0x4000281C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_ALRMAR_t {
    uint32_t SU : 4;  ///< Second units in BCD format, reset value: 0x0
    uint32_t ST : 3;  ///< Second tens in BCD format, reset value: 0x0
    uint32_t MSK1 : 1;  ///< Alarm A seconds mask, reset value: 0x0
    uint32_t MNU : 4;  ///< Minute units in BCD format, reset value: 0x0
    uint32_t MNT : 3;  ///< Minute tens in BCD format, reset value: 0x0
    uint32_t MSK2 : 1;  ///< Alarm A minutes mask, reset value: 0x0
    uint32_t HU : 4;  ///< Hour units in BCD format, reset value: 0x0
    uint32_t HT : 2;  ///< Hour tens in BCD format, reset value: 0x0
    uint32_t PM : 1;  ///< AM/PM notation, reset value: 0x0
    uint32_t MSK3 : 1;  ///< Alarm A hours mask, reset value: 0x0
    uint32_t DU : 4;  ///< Date units or day in BCD format, reset value: 0x0
    uint32_t DT : 2;  ///< Date tens in BCD format, reset value: 0x0
    uint32_t WDSEL : 1;  ///< Week day selection, reset value: 0x0
    uint32_t MSK4 : 1;  ///< Alarm A date mask, reset value: 0x0
  } ALRMAR;

  /** 
  * name: ALRMBR
  * description: alarm B register
  * address: 0x40002820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_ALRMBR_t {
    uint32_t SU : 4;  ///< Second units in BCD format, reset value: 0x0
    uint32_t ST : 3;  ///< Second tens in BCD format, reset value: 0x0
    uint32_t MSK1 : 1;  ///< Alarm B seconds mask, reset value: 0x0
    uint32_t MNU : 4;  ///< Minute units in BCD format, reset value: 0x0
    uint32_t MNT : 3;  ///< Minute tens in BCD format, reset value: 0x0
    uint32_t MSK2 : 1;  ///< Alarm B minutes mask, reset value: 0x0
    uint32_t HU : 4;  ///< Hour units in BCD format, reset value: 0x0
    uint32_t HT : 2;  ///< Hour tens in BCD format, reset value: 0x0
    uint32_t PM : 1;  ///< AM/PM notation, reset value: 0x0
    uint32_t MSK3 : 1;  ///< Alarm B hours mask, reset value: 0x0
    uint32_t DU : 4;  ///< Date units or day in BCD format, reset value: 0x0
    uint32_t DT : 2;  ///< Date tens in BCD format, reset value: 0x0
    uint32_t WDSEL : 1;  ///< Week day selection, reset value: 0x0
    uint32_t MSK4 : 1;  ///< Alarm B date mask, reset value: 0x0
  } ALRMBR;

  /** 
  * name: WPR
  * description: write protection register
  * address: 0x40002824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct RTC_WPR_t {
    uint32_t KEY : 8;  ///< Write protection key, reset value: 0x0
  } WPR;

  /** 
  * name: SSR
  * description: sub second register
  * address: 0x40002828
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct RTC_SSR_t {
    uint32_t SS : 16;  ///< Sub second value, reset value: 0x0
  } SSR;

  /** 
  * name: SHIFTR
  * description: shift control register
  * address: 0x4000282C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct RTC_SHIFTR_t {
    uint32_t SUBFS : 15;  ///< Subtract a fraction of a second, reset value: 0x0
    uint32_t _RESERVED_85 : 16;
    uint32_t ADD1S : 1;  ///< Add one second, reset value: 0x0
  } SHIFTR;

  /** 
  * name: TSTR
  * description: time stamp time register
  * address: 0x40002830
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct RTC_TSTR_t {
    uint32_t TAMP1E : 1;  ///< Tamper 1 detection enable, reset value: 0x0
    uint32_t TAMP1TRG : 1;  ///< Active level for tamper 1, reset value: 0x0
    uint32_t TAMPIE : 1;  ///< Tamper interrupt enable, reset value: 0x0
    uint32_t _RESERVED_86 : 13;
    uint32_t TAMP1INSEL : 1;  ///< TAMPER1 mapping, reset value: 0x0
    uint32_t TSINSEL : 1;  ///< TIMESTAMP mapping, reset value: 0x0
    uint32_t ALARMOUTTYPE : 1;  ///< AFO_ALARM output type, reset value: 0x0
  } TSTR;

  /** 
  * name: TSDR
  * description: time stamp date register
  * address: 0x40002834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct RTC_TSDR_t {
    uint32_t DU : 4;  ///< Date units in BCD format, reset value: 0x0
    uint32_t DT : 2;  ///< Date tens in BCD format, reset value: 0x0
    uint32_t _RESERVED_87 : 2;
    uint32_t MU : 4;  ///< Month units in BCD format, reset value: 0x0
    uint32_t MT : 1;  ///< Month tens in BCD format, reset value: 0x0
    uint32_t WDU : 3;  ///< Week day units, reset value: 0x0
  } TSDR;

  /** 
  * name: TSSSR
  * description: timestamp sub second register
  * address: 0x40002838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct RTC_TSSSR_t {
    uint32_t SS : 16;  ///< Sub second value, reset value: 0x0
  } TSSSR;

  /** 
  * name: CALR
  * description: calibration register
  * address: 0x4000283C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_CALR_t {
    uint32_t CALM : 9;  ///< Calibration minus, reset value: 0x0
    uint32_t _RESERVED_88 : 4;
    uint32_t CALW16 : 1;  ///< Use a 16-second calibration cycle period, reset value: 0x0
    uint32_t CALW8 : 1;  ///< Use an 8-second calibration cycle period, reset value: 0x0
    uint32_t CALP : 1;  ///< Increase frequency of RTC by 488.5 ppm, reset value: 0x0
  } CALR;

  /** 
  * name: TAFCR
  * description: tamper and alternate function configuration register
  * address: 0x40002840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_TAFCR_t {
    uint32_t TAMP1E : 1;  ///< Tamper 1 detection enable, reset value: 0x0
    uint32_t TAMP1TRG : 1;  ///< Active level for tamper 1, reset value: 0x0
    uint32_t TAMPIE : 1;  ///< Tamper interrupt enable, reset value: 0x0
    uint32_t TAMP2E : 1;  ///< Tamper 2 detection enable, reset value: 0x0
    uint32_t TAMP2TRG : 1;  ///< Active level for tamper 2, reset value: 0x0
    uint32_t _RESERVED_89 : 2;
    uint32_t TAMPTS : 1;  ///< Activate timestamp on tamper detection event, reset value: 0x0
    uint32_t TAMPFREQ : 3;  ///< Tamper sampling frequency, reset value: 0x0
    uint32_t TAMPFLT : 2;  ///< Tamper filter count, reset value: 0x0
    uint32_t TAMPPRCH : 2;  ///< Tamper precharge duration, reset value: 0x0
    uint32_t TAMPPUDIS : 1;  ///< TAMPER pull-up disable, reset value: 0x0
    uint32_t TAMP1INSEL : 1;  ///< TAMPER1 mapping, reset value: 0x0
    uint32_t TSINSEL : 1;  ///< TIMESTAMP mapping, reset value: 0x0
    uint32_t ALARMOUTTYPE : 1;  ///< AFO_ALARM output type, reset value: 0x0
  } TAFCR;

  /** 
  * name: ALRMASSR
  * description: alarm A sub second register
  * address: 0x40002844
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_ALRMASSR_t {
    uint32_t SS : 15;  ///< Sub seconds value, reset value: 0x0
    uint32_t _RESERVED_90 : 9;
    uint32_t MASKSS : 4;  ///< Mask the most-significant bits starting at this bit, reset value: 0x0
  } ALRMASSR;

  /** 
  * name: ALRMBSSR
  * description: alarm B sub second register
  * address: 0x40002848
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_ALRMBSSR_t {
    uint32_t SS : 15;  ///< Sub seconds value, reset value: 0x0
    uint32_t _RESERVED_91 : 9;
    uint32_t MASKSS : 4;  ///< Mask the most-significant bits starting at this bit, reset value: 0x0
  } ALRMBSSR;

  /** 
  * name: BKP0R
  * description: backup register
  * address: 0x40002850
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP0R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP0R;

  /** 
  * name: BKP1R
  * description: backup register
  * address: 0x40002854
  * offset: 0x54
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP1R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP1R;

  /** 
  * name: BKP2R
  * description: backup register
  * address: 0x40002858
  * offset: 0x58
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP2R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP2R;

  /** 
  * name: BKP3R
  * description: backup register
  * address: 0x4000285C
  * offset: 0x5C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP3R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP3R;

  /** 
  * name: BKP4R
  * description: backup register
  * address: 0x40002860
  * offset: 0x60
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP4R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP4R;

  /** 
  * name: BKP5R
  * description: backup register
  * address: 0x40002864
  * offset: 0x64
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP5R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP5R;

  /** 
  * name: BKP6R
  * description: backup register
  * address: 0x40002868
  * offset: 0x68
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP6R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP6R;

  /** 
  * name: BKP7R
  * description: backup register
  * address: 0x4000286C
  * offset: 0x6C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP7R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP7R;

  /** 
  * name: BKP8R
  * description: backup register
  * address: 0x40002870
  * offset: 0x70
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP8R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP8R;

  /** 
  * name: BKP9R
  * description: backup register
  * address: 0x40002874
  * offset: 0x74
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP9R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP9R;

  /** 
  * name: BKP10R
  * description: backup register
  * address: 0x40002878
  * offset: 0x78
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP10R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP10R;

  /** 
  * name: BKP11R
  * description: backup register
  * address: 0x4000287C
  * offset: 0x7C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP11R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP11R;

  /** 
  * name: BKP12R
  * description: backup register
  * address: 0x40002880
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP12R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP12R;

  /** 
  * name: BKP13R
  * description: backup register
  * address: 0x40002884
  * offset: 0x84
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP13R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP13R;

  /** 
  * name: BKP14R
  * description: backup register
  * address: 0x40002888
  * offset: 0x88
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP14R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP14R;

  /** 
  * name: BKP15R
  * description: backup register
  * address: 0x4000288C
  * offset: 0x8C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP15R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP15R;

  /** 
  * name: BKP16R
  * description: backup register
  * address: 0x40002890
  * offset: 0x90
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP16R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP16R;

  /** 
  * name: BKP17R
  * description: backup register
  * address: 0x40002894
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP17R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP17R;

  /** 
  * name: BKP18R
  * description: backup register
  * address: 0x40002898
  * offset: 0x98
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP18R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP18R;

  /** 
  * name: BKP19R
  * description: backup register
  * address: 0x4000289C
  * offset: 0x9C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RTC_BKP19R_t {
    uint32_t BKP : 32;  ///< BKP, reset value: 0x0
  } BKP19R;

} RTC_t;


/** 
*  name: WWDG
*  description: Window watchdog
*  group: WWDG
*  address: 0x40002C00
*/
typedef struct{
  /** 
  * name: CR
  * description: Control register
  * address: 0x40002C00
  * offset: 0x0
  * reset value: 0x0000007F
  * size: 0x20
  * access: read-write
  */
  struct WWDG_CR_t {
    uint32_t T : 7;  ///< 7-bit counter (MSB to LSB), reset value: 0x7F
    uint32_t WDGA : 1;  ///< Activation bit, reset value: 0x0
  } CR;

  /** 
  * name: CFR
  * description: Configuration register
  * address: 0x40002C04
  * offset: 0x4
  * reset value: 0x0000007F
  * size: 0x20
  * access: read-write
  */
  struct WWDG_CFR_t {
    uint32_t W : 7;  ///< 7-bit window value, reset value: 0x7F
    uint32_t WDGTB0 : 1;  ///< Timer base, reset value: 0x0
    uint32_t WDGTB1 : 1;  ///< Timer base, reset value: 0x0
    uint32_t EWI : 1;  ///< Early wakeup interrupt, reset value: 0x0
  } CFR;

  /** 
  * name: SR
  * description: Status register
  * address: 0x40002C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct WWDG_SR_t {
    uint32_t EWIF : 1;  ///< Early wakeup interrupt flag, reset value: 0x0
  } SR;

} WWDG_t;


/** 
*  name: IWDG
*  description: Independent watchdog
*  group: IWDG
*  address: 0x40003000
*/
typedef struct{
  /** 
  * name: KR
  * description: Key register
  * address: 0x40003000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct IWDG_KR_t {
    uint32_t KEY : 16;  ///< Key value (write only, read 0000h), reset value: 0x0
  } KR;

  /** 
  * name: PR
  * description: Prescaler register
  * address: 0x40003004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct IWDG_PR_t {
    uint32_t PR : 3;  ///< Prescaler divider, reset value: 0x0
  } PR;

  /** 
  * name: RLR
  * description: Reload register
  * address: 0x40003008
  * offset: 0x8
  * reset value: 0x00000FFF
  * size: 0x20
  * access: read-write
  */
  struct IWDG_RLR_t {
    uint32_t RL : 12;  ///< Watchdog counter reload value, reset value: 0xFFF
  } RLR;

  /** 
  * name: SR
  * description: Status register
  * address: 0x4000300C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct IWDG_SR_t {
    uint32_t PVU : 1;  ///< Watchdog prescaler value update, reset value: 0x0
    uint32_t RVU : 1;  ///< Watchdog counter reload value update, reset value: 0x0
  } SR;

} IWDG_t;


/** 
*  name: I2S2ext
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40003400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40003400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40003404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_92 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40003408
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct I2S2ext_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4000340C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40003410
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40003414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2S2ext_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40003418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2S2ext_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4000341C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_93 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40003420
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct I2S2ext_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} I2S2ext_t;


/** 
*  name: SPI2
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40003800
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40003800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI2_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40003804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI2_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_94 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40003808
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI2_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4000380C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI2_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40003810
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI2_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40003814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI2_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40003818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI2_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4000381C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI2_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_95 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40003820
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI2_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI2_t;


/** 
*  name: SPI3
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40003C00
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40003C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI3_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40003C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI3_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_96 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40003C08
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI3_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x40003C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI3_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40003C10
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI3_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40003C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI3_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40003C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI3_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x40003C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI3_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_97 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40003C20
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI3_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI3_t;


/** 
*  name: I2S3ext
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40004000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40004000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40004004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_98 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40004008
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct I2S3ext_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4000400C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40004010
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40004014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2S3ext_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40004018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2S3ext_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4000401C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_99 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40004020
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct I2S3ext_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} I2S3ext_t;


/** 
*  name: USART2
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40004400
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40004400
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct USART2_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
    uint32_t CTS : 1;  ///< CTS flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40004404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40004408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4000440C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_100 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40004410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_101 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_102 : 1;
    uint32_t LBCL : 1;  ///< Last bit clock pulse, reset value: 0x0
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t CLKEN : 1;  ///< Clock enable, reset value: 0x0
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40004414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t NACK : 1;  ///< Smartcard NACK enable, reset value: 0x0
    uint32_t SCEN : 1;  ///< Smartcard mode enable, reset value: 0x0
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t RTSE : 1;  ///< RTS enable, reset value: 0x0
    uint32_t CTSE : 1;  ///< CTS enable, reset value: 0x0
    uint32_t CTSIE : 1;  ///< CTS interrupt enable, reset value: 0x0
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

  /** 
  * name: GTPR
  * description: Guard time and prescaler register
  * address: 0x40004418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART2_GTPR_t {
    uint32_t PSC : 8;  ///< Prescaler value, reset value: 0x0
    uint32_t GT : 8;  ///< Guard time value, reset value: 0x0
  } GTPR;

} USART2_t;


/** 
*  name: USART3
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40004800
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40004800
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct USART3_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
    uint32_t CTS : 1;  ///< CTS flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40004804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40004808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4000480C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_103 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40004810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_104 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_105 : 1;
    uint32_t LBCL : 1;  ///< Last bit clock pulse, reset value: 0x0
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t CLKEN : 1;  ///< Clock enable, reset value: 0x0
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40004814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t NACK : 1;  ///< Smartcard NACK enable, reset value: 0x0
    uint32_t SCEN : 1;  ///< Smartcard mode enable, reset value: 0x0
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t RTSE : 1;  ///< RTS enable, reset value: 0x0
    uint32_t CTSE : 1;  ///< CTS enable, reset value: 0x0
    uint32_t CTSIE : 1;  ///< CTS interrupt enable, reset value: 0x0
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

  /** 
  * name: GTPR
  * description: Guard time and prescaler register
  * address: 0x40004818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART3_GTPR_t {
    uint32_t PSC : 8;  ///< Prescaler value, reset value: 0x0
    uint32_t GT : 8;  ///< Guard time value, reset value: 0x0
  } GTPR;

} USART3_t;


/** 
*  name: UART4
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40004C00
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40004C00
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct UART4_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40004C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART4_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40004C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART4_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x40004C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART4_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_106 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40004C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART4_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_107 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_108 : 5;
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40004C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART4_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t _RESERVED_109 : 2;
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t _RESERVED_110 : 3;
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

} UART4_t;


/** 
*  name: UART5
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40005000
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40005000
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct UART5_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40005004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART5_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40005008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART5_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4000500C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART5_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_111 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40005010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART5_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_112 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_113 : 5;
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40005014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART5_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t _RESERVED_114 : 2;
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t _RESERVED_115 : 3;
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

} UART5_t;


/** 
*  name: I2C1
*  description: Inter-integrated circuit
*  group: I2C
*  address: 0x40005400
*/
typedef struct{
  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x40005400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_CR1_t {
    uint32_t PE : 1;  ///< Peripheral enable, reset value: 0x0
    uint32_t SMBUS : 1;  ///< SMBus mode, reset value: 0x0
    uint32_t _RESERVED_116 : 1;
    uint32_t SMBTYPE : 1;  ///< SMBus type, reset value: 0x0
    uint32_t ENARP : 1;  ///< ARP enable, reset value: 0x0
    uint32_t ENPEC : 1;  ///< PEC enable, reset value: 0x0
    uint32_t ENGC : 1;  ///< General call enable, reset value: 0x0
    uint32_t NOSTRETCH : 1;  ///< Clock stretching disable (Slave mode), reset value: 0x0
    uint32_t START : 1;  ///< Start generation, reset value: 0x0
    uint32_t STOP : 1;  ///< Stop generation, reset value: 0x0
    uint32_t ACK : 1;  ///< Acknowledge enable, reset value: 0x0
    uint32_t POS : 1;  ///< Acknowledge/PEC Position (for data reception), reset value: 0x0
    uint32_t PEC : 1;  ///< Packet error checking, reset value: 0x0
    uint32_t ALERT : 1;  ///< SMBus alert, reset value: 0x0
    uint32_t _RESERVED_117 : 1;
    uint32_t SWRST : 1;  ///< Software reset, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40005404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_CR2_t {
    uint32_t FREQ : 6;  ///< Peripheral clock frequency, reset value: 0x0
    uint32_t _RESERVED_118 : 2;
    uint32_t ITERREN : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t ITEVTEN : 1;  ///< Event interrupt enable, reset value: 0x0
    uint32_t ITBUFEN : 1;  ///< Buffer interrupt enable, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA requests enable, reset value: 0x0
    uint32_t LAST : 1;  ///< DMA last transfer, reset value: 0x0
  } CR2;

  /** 
  * name: OAR1
  * description: Own address register 1
  * address: 0x40005408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_OAR1_t {
    uint32_t ADD0 : 1;  ///< Interface address, reset value: 0x0
    uint32_t ADD7 : 7;  ///< Interface address, reset value: 0x0
    uint32_t ADD10 : 2;  ///< Interface address, reset value: 0x0
    uint32_t _RESERVED_119 : 5;
    uint32_t ADDMODE : 1;  ///< Addressing mode (slave mode), reset value: 0x0
  } OAR1;

  /** 
  * name: OAR2
  * description: Own address register 2
  * address: 0x4000540C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_OAR2_t {
    uint32_t ENDUAL : 1;  ///< Dual addressing mode enable, reset value: 0x0
    uint32_t ADD2 : 7;  ///< Interface address, reset value: 0x0
  } OAR2;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40005410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_DR_t {
    uint32_t DR : 8;  ///< 8-bit data register, reset value: 0x0
  } DR;

  /** 
  * name: SR1
  * description: Status register 1
  * address: 0x40005414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct I2C1_SR1_t {
    uint32_t SB : 1;  ///< Start bit (Master mode), reset value: 0x0
    uint32_t ADDR : 1;  ///< Address sent (master mode)/matched (slave mode), reset value: 0x0
    uint32_t BTF : 1;  ///< Byte transfer finished, reset value: 0x0
    uint32_t ADD10 : 1;  ///< 10-bit header sent (Master mode), reset value: 0x0
    uint32_t STOPF : 1;  ///< Stop detection (slave mode), reset value: 0x0
    uint32_t _RESERVED_120 : 1;
    uint32_t RxNE : 1;  ///< Data register not empty (receivers), reset value: 0x0
    uint32_t TxE : 1;  ///< Data register empty (transmitters), reset value: 0x0
    uint32_t BERR : 1;  ///< Bus error, reset value: 0x0
    uint32_t ARLO : 1;  ///< Arbitration lost (master mode), reset value: 0x0
    uint32_t AF : 1;  ///< Acknowledge failure, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun/Underrun, reset value: 0x0
    uint32_t PECERR : 1;  ///< PEC Error in reception, reset value: 0x0
    uint32_t _RESERVED_121 : 1;
    uint32_t TIMEOUT : 1;  ///< Timeout or Tlow error, reset value: 0x0
    uint32_t SMBALERT : 1;  ///< SMBus alert, reset value: 0x0
  } SR1;

  /** 
  * name: SR2
  * description: Status register 2
  * address: 0x40005418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2C1_SR2_t {
    uint32_t MSL : 1;  ///< Master/slave, reset value: 0x0
    uint32_t BUSY : 1;  ///< Bus busy, reset value: 0x0
    uint32_t TRA : 1;  ///< Transmitter/receiver, reset value: 0x0
    uint32_t _RESERVED_122 : 1;
    uint32_t GENCALL : 1;  ///< General call address (Slave mode), reset value: 0x0
    uint32_t SMBDEFAULT : 1;  ///< SMBus device default address (Slave mode), reset value: 0x0
    uint32_t SMBHOST : 1;  ///< SMBus host header (Slave mode), reset value: 0x0
    uint32_t DUALF : 1;  ///< Dual flag (Slave mode), reset value: 0x0
    uint32_t PEC : 8;  ///< acket error checking register, reset value: 0x0
  } SR2;

  /** 
  * name: CCR
  * description: Clock control register
  * address: 0x4000541C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C1_CCR_t {
    uint32_t CCR : 12;  ///< Clock control register in Fast/Standard mode (Master mode), reset value: 0x0
    uint32_t _RESERVED_123 : 2;
    uint32_t DUTY : 1;  ///< Fast mode duty cycle, reset value: 0x0
    uint32_t F_S : 1;  ///< I2C master mode selection, reset value: 0x0
  } CCR;

  /** 
  * name: TRISE
  * description: TRISE register
  * address: 0x40005420
  * offset: 0x20
  * reset value: 0x00000002
  * size: 0x20
  * access: read-write
  */
  struct I2C1_TRISE_t {
    uint32_t TRISE : 6;  ///< Maximum rise time in Fast/Standard mode (Master mode), reset value: 0x2
  } TRISE;

} I2C1_t;


/** 
*  name: I2C2
*  description: Inter-integrated circuit
*  group: I2C
*  address: 0x40005800
*/
typedef struct{
  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x40005800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_CR1_t {
    uint32_t PE : 1;  ///< Peripheral enable, reset value: 0x0
    uint32_t SMBUS : 1;  ///< SMBus mode, reset value: 0x0
    uint32_t _RESERVED_124 : 1;
    uint32_t SMBTYPE : 1;  ///< SMBus type, reset value: 0x0
    uint32_t ENARP : 1;  ///< ARP enable, reset value: 0x0
    uint32_t ENPEC : 1;  ///< PEC enable, reset value: 0x0
    uint32_t ENGC : 1;  ///< General call enable, reset value: 0x0
    uint32_t NOSTRETCH : 1;  ///< Clock stretching disable (Slave mode), reset value: 0x0
    uint32_t START : 1;  ///< Start generation, reset value: 0x0
    uint32_t STOP : 1;  ///< Stop generation, reset value: 0x0
    uint32_t ACK : 1;  ///< Acknowledge enable, reset value: 0x0
    uint32_t POS : 1;  ///< Acknowledge/PEC Position (for data reception), reset value: 0x0
    uint32_t PEC : 1;  ///< Packet error checking, reset value: 0x0
    uint32_t ALERT : 1;  ///< SMBus alert, reset value: 0x0
    uint32_t _RESERVED_125 : 1;
    uint32_t SWRST : 1;  ///< Software reset, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40005804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_CR2_t {
    uint32_t FREQ : 6;  ///< Peripheral clock frequency, reset value: 0x0
    uint32_t _RESERVED_126 : 2;
    uint32_t ITERREN : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t ITEVTEN : 1;  ///< Event interrupt enable, reset value: 0x0
    uint32_t ITBUFEN : 1;  ///< Buffer interrupt enable, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA requests enable, reset value: 0x0
    uint32_t LAST : 1;  ///< DMA last transfer, reset value: 0x0
  } CR2;

  /** 
  * name: OAR1
  * description: Own address register 1
  * address: 0x40005808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_OAR1_t {
    uint32_t ADD0 : 1;  ///< Interface address, reset value: 0x0
    uint32_t ADD7 : 7;  ///< Interface address, reset value: 0x0
    uint32_t ADD10 : 2;  ///< Interface address, reset value: 0x0
    uint32_t _RESERVED_127 : 5;
    uint32_t ADDMODE : 1;  ///< Addressing mode (slave mode), reset value: 0x0
  } OAR1;

  /** 
  * name: OAR2
  * description: Own address register 2
  * address: 0x4000580C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_OAR2_t {
    uint32_t ENDUAL : 1;  ///< Dual addressing mode enable, reset value: 0x0
    uint32_t ADD2 : 7;  ///< Interface address, reset value: 0x0
  } OAR2;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40005810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_DR_t {
    uint32_t DR : 8;  ///< 8-bit data register, reset value: 0x0
  } DR;

  /** 
  * name: SR1
  * description: Status register 1
  * address: 0x40005814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct I2C2_SR1_t {
    uint32_t SB : 1;  ///< Start bit (Master mode), reset value: 0x0
    uint32_t ADDR : 1;  ///< Address sent (master mode)/matched (slave mode), reset value: 0x0
    uint32_t BTF : 1;  ///< Byte transfer finished, reset value: 0x0
    uint32_t ADD10 : 1;  ///< 10-bit header sent (Master mode), reset value: 0x0
    uint32_t STOPF : 1;  ///< Stop detection (slave mode), reset value: 0x0
    uint32_t _RESERVED_128 : 1;
    uint32_t RxNE : 1;  ///< Data register not empty (receivers), reset value: 0x0
    uint32_t TxE : 1;  ///< Data register empty (transmitters), reset value: 0x0
    uint32_t BERR : 1;  ///< Bus error, reset value: 0x0
    uint32_t ARLO : 1;  ///< Arbitration lost (master mode), reset value: 0x0
    uint32_t AF : 1;  ///< Acknowledge failure, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun/Underrun, reset value: 0x0
    uint32_t PECERR : 1;  ///< PEC Error in reception, reset value: 0x0
    uint32_t _RESERVED_129 : 1;
    uint32_t TIMEOUT : 1;  ///< Timeout or Tlow error, reset value: 0x0
    uint32_t SMBALERT : 1;  ///< SMBus alert, reset value: 0x0
  } SR1;

  /** 
  * name: SR2
  * description: Status register 2
  * address: 0x40005818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2C2_SR2_t {
    uint32_t MSL : 1;  ///< Master/slave, reset value: 0x0
    uint32_t BUSY : 1;  ///< Bus busy, reset value: 0x0
    uint32_t TRA : 1;  ///< Transmitter/receiver, reset value: 0x0
    uint32_t _RESERVED_130 : 1;
    uint32_t GENCALL : 1;  ///< General call address (Slave mode), reset value: 0x0
    uint32_t SMBDEFAULT : 1;  ///< SMBus device default address (Slave mode), reset value: 0x0
    uint32_t SMBHOST : 1;  ///< SMBus host header (Slave mode), reset value: 0x0
    uint32_t DUALF : 1;  ///< Dual flag (Slave mode), reset value: 0x0
    uint32_t PEC : 8;  ///< acket error checking register, reset value: 0x0
  } SR2;

  /** 
  * name: CCR
  * description: Clock control register
  * address: 0x4000581C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C2_CCR_t {
    uint32_t CCR : 12;  ///< Clock control register in Fast/Standard mode (Master mode), reset value: 0x0
    uint32_t _RESERVED_131 : 2;
    uint32_t DUTY : 1;  ///< Fast mode duty cycle, reset value: 0x0
    uint32_t F_S : 1;  ///< I2C master mode selection, reset value: 0x0
  } CCR;

  /** 
  * name: TRISE
  * description: TRISE register
  * address: 0x40005820
  * offset: 0x20
  * reset value: 0x00000002
  * size: 0x20
  * access: read-write
  */
  struct I2C2_TRISE_t {
    uint32_t TRISE : 6;  ///< Maximum rise time in Fast/Standard mode (Master mode), reset value: 0x2
  } TRISE;

} I2C2_t;


/** 
*  name: I2C3
*  description: Inter-integrated circuit
*  group: I2C
*  address: 0x40005C00
*/
typedef struct{
  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x40005C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_CR1_t {
    uint32_t PE : 1;  ///< Peripheral enable, reset value: 0x0
    uint32_t SMBUS : 1;  ///< SMBus mode, reset value: 0x0
    uint32_t _RESERVED_132 : 1;
    uint32_t SMBTYPE : 1;  ///< SMBus type, reset value: 0x0
    uint32_t ENARP : 1;  ///< ARP enable, reset value: 0x0
    uint32_t ENPEC : 1;  ///< PEC enable, reset value: 0x0
    uint32_t ENGC : 1;  ///< General call enable, reset value: 0x0
    uint32_t NOSTRETCH : 1;  ///< Clock stretching disable (Slave mode), reset value: 0x0
    uint32_t START : 1;  ///< Start generation, reset value: 0x0
    uint32_t STOP : 1;  ///< Stop generation, reset value: 0x0
    uint32_t ACK : 1;  ///< Acknowledge enable, reset value: 0x0
    uint32_t POS : 1;  ///< Acknowledge/PEC Position (for data reception), reset value: 0x0
    uint32_t PEC : 1;  ///< Packet error checking, reset value: 0x0
    uint32_t ALERT : 1;  ///< SMBus alert, reset value: 0x0
    uint32_t _RESERVED_133 : 1;
    uint32_t SWRST : 1;  ///< Software reset, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40005C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_CR2_t {
    uint32_t FREQ : 6;  ///< Peripheral clock frequency, reset value: 0x0
    uint32_t _RESERVED_134 : 2;
    uint32_t ITERREN : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t ITEVTEN : 1;  ///< Event interrupt enable, reset value: 0x0
    uint32_t ITBUFEN : 1;  ///< Buffer interrupt enable, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA requests enable, reset value: 0x0
    uint32_t LAST : 1;  ///< DMA last transfer, reset value: 0x0
  } CR2;

  /** 
  * name: OAR1
  * description: Own address register 1
  * address: 0x40005C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_OAR1_t {
    uint32_t ADD0 : 1;  ///< Interface address, reset value: 0x0
    uint32_t ADD7 : 7;  ///< Interface address, reset value: 0x0
    uint32_t ADD10 : 2;  ///< Interface address, reset value: 0x0
    uint32_t _RESERVED_135 : 5;
    uint32_t ADDMODE : 1;  ///< Addressing mode (slave mode), reset value: 0x0
  } OAR1;

  /** 
  * name: OAR2
  * description: Own address register 2
  * address: 0x40005C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_OAR2_t {
    uint32_t ENDUAL : 1;  ///< Dual addressing mode enable, reset value: 0x0
    uint32_t ADD2 : 7;  ///< Interface address, reset value: 0x0
  } OAR2;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40005C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_DR_t {
    uint32_t DR : 8;  ///< 8-bit data register, reset value: 0x0
  } DR;

  /** 
  * name: SR1
  * description: Status register 1
  * address: 0x40005C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct I2C3_SR1_t {
    uint32_t SB : 1;  ///< Start bit (Master mode), reset value: 0x0
    uint32_t ADDR : 1;  ///< Address sent (master mode)/matched (slave mode), reset value: 0x0
    uint32_t BTF : 1;  ///< Byte transfer finished, reset value: 0x0
    uint32_t ADD10 : 1;  ///< 10-bit header sent (Master mode), reset value: 0x0
    uint32_t STOPF : 1;  ///< Stop detection (slave mode), reset value: 0x0
    uint32_t _RESERVED_136 : 1;
    uint32_t RxNE : 1;  ///< Data register not empty (receivers), reset value: 0x0
    uint32_t TxE : 1;  ///< Data register empty (transmitters), reset value: 0x0
    uint32_t BERR : 1;  ///< Bus error, reset value: 0x0
    uint32_t ARLO : 1;  ///< Arbitration lost (master mode), reset value: 0x0
    uint32_t AF : 1;  ///< Acknowledge failure, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun/Underrun, reset value: 0x0
    uint32_t PECERR : 1;  ///< PEC Error in reception, reset value: 0x0
    uint32_t _RESERVED_137 : 1;
    uint32_t TIMEOUT : 1;  ///< Timeout or Tlow error, reset value: 0x0
    uint32_t SMBALERT : 1;  ///< SMBus alert, reset value: 0x0
  } SR1;

  /** 
  * name: SR2
  * description: Status register 2
  * address: 0x40005C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct I2C3_SR2_t {
    uint32_t MSL : 1;  ///< Master/slave, reset value: 0x0
    uint32_t BUSY : 1;  ///< Bus busy, reset value: 0x0
    uint32_t TRA : 1;  ///< Transmitter/receiver, reset value: 0x0
    uint32_t _RESERVED_138 : 1;
    uint32_t GENCALL : 1;  ///< General call address (Slave mode), reset value: 0x0
    uint32_t SMBDEFAULT : 1;  ///< SMBus device default address (Slave mode), reset value: 0x0
    uint32_t SMBHOST : 1;  ///< SMBus host header (Slave mode), reset value: 0x0
    uint32_t DUALF : 1;  ///< Dual flag (Slave mode), reset value: 0x0
    uint32_t PEC : 8;  ///< acket error checking register, reset value: 0x0
  } SR2;

  /** 
  * name: CCR
  * description: Clock control register
  * address: 0x40005C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct I2C3_CCR_t {
    uint32_t CCR : 12;  ///< Clock control register in Fast/Standard mode (Master mode), reset value: 0x0
    uint32_t _RESERVED_139 : 2;
    uint32_t DUTY : 1;  ///< Fast mode duty cycle, reset value: 0x0
    uint32_t F_S : 1;  ///< I2C master mode selection, reset value: 0x0
  } CCR;

  /** 
  * name: TRISE
  * description: TRISE register
  * address: 0x40005C20
  * offset: 0x20
  * reset value: 0x00000002
  * size: 0x20
  * access: read-write
  */
  struct I2C3_TRISE_t {
    uint32_t TRISE : 6;  ///< Maximum rise time in Fast/Standard mode (Master mode), reset value: 0x2
  } TRISE;

} I2C3_t;


/** 
*  name: CAN1
*  description: Controller area network
*  group: CAN
*  address: 0x40006400
*/
typedef struct{
  /** 
  * name: MCR
  * description: master control register
  * address: 0x40006400
  * offset: 0x0
  * reset value: 0x00010002
  * size: 0x20
  * access: read-write
  */
  struct CAN1_MCR_t {
    uint32_t INRQ : 1;  ///< INRQ, reset value: 0x0
    uint32_t SLEEP : 1;  ///< SLEEP, reset value: 0x1
    uint32_t TXFP : 1;  ///< TXFP, reset value: 0x0
    uint32_t RFLM : 1;  ///< RFLM, reset value: 0x0
    uint32_t NART : 1;  ///< NART, reset value: 0x0
    uint32_t AWUM : 1;  ///< AWUM, reset value: 0x0
    uint32_t ABOM : 1;  ///< ABOM, reset value: 0x0
    uint32_t TTCM : 1;  ///< TTCM, reset value: 0x0
    uint32_t _RESERVED_140 : 7;
    uint32_t RESET : 1;  ///< RESET, reset value: 0x0
    uint32_t DBF : 1;  ///< DBF, reset value: 0x1
  } MCR;

  /** 
  * name: MSR
  * description: master status register
  * address: 0x40006404
  * offset: 0x4
  * reset value: 0x00000C02
  * size: 0x20
  * access: 
  */
  struct CAN1_MSR_t {
    uint32_t INAK : 1;  ///< INAK, reset value: 0x0
    uint32_t SLAK : 1;  ///< SLAK, reset value: 0x1
    uint32_t ERRI : 1;  ///< ERRI, reset value: 0x0
    uint32_t WKUI : 1;  ///< WKUI, reset value: 0x0
    uint32_t SLAKI : 1;  ///< SLAKI, reset value: 0x0
    uint32_t _RESERVED_141 : 3;
    uint32_t TXM : 1;  ///< TXM, reset value: 0x0
    uint32_t RXM : 1;  ///< RXM, reset value: 0x0
    uint32_t SAMP : 1;  ///< SAMP, reset value: 0x1
    uint32_t RX : 1;  ///< RX, reset value: 0x1
  } MSR;

  /** 
  * name: TSR
  * description: transmit status register
  * address: 0x40006408
  * offset: 0x8
  * reset value: 0x1C000000
  * size: 0x20
  * access: 
  */
  struct CAN1_TSR_t {
    uint32_t RQCP0 : 1;  ///< RQCP0, reset value: 0x0
    uint32_t TXOK0 : 1;  ///< TXOK0, reset value: 0x0
    uint32_t ALST0 : 1;  ///< ALST0, reset value: 0x0
    uint32_t TERR0 : 1;  ///< TERR0, reset value: 0x0
    uint32_t _RESERVED_142 : 3;
    uint32_t ABRQ0 : 1;  ///< ABRQ0, reset value: 0x0
    uint32_t RQCP1 : 1;  ///< RQCP1, reset value: 0x0
    uint32_t TXOK1 : 1;  ///< TXOK1, reset value: 0x0
    uint32_t ALST1 : 1;  ///< ALST1, reset value: 0x0
    uint32_t TERR1 : 1;  ///< TERR1, reset value: 0x0
    uint32_t _RESERVED_143 : 3;
    uint32_t ABRQ1 : 1;  ///< ABRQ1, reset value: 0x0
    uint32_t RQCP2 : 1;  ///< RQCP2, reset value: 0x0
    uint32_t TXOK2 : 1;  ///< TXOK2, reset value: 0x0
    uint32_t ALST2 : 1;  ///< ALST2, reset value: 0x0
    uint32_t TERR2 : 1;  ///< TERR2, reset value: 0x0
    uint32_t _RESERVED_144 : 3;
    uint32_t ABRQ2 : 1;  ///< ABRQ2, reset value: 0x0
    uint32_t CODE : 2;  ///< CODE, reset value: 0x0
    uint32_t TME0 : 1;  ///< Lowest priority flag for mailbox 0, reset value: 0x1
    uint32_t TME1 : 1;  ///< Lowest priority flag for mailbox 1, reset value: 0x1
    uint32_t TME2 : 1;  ///< Lowest priority flag for mailbox 2, reset value: 0x1
    uint32_t LOW0 : 1;  ///< Lowest priority flag for mailbox 0, reset value: 0x0
    uint32_t LOW1 : 1;  ///< Lowest priority flag for mailbox 1, reset value: 0x0
    uint32_t LOW2 : 1;  ///< Lowest priority flag for mailbox 2, reset value: 0x0
  } TSR;

  /** 
  * name: RF0R
  * description: receive FIFO 0 register
  * address: 0x4000640C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN1_RF0R_t {
    uint32_t FMP0 : 2;  ///< FMP0, reset value: 0x0
    uint32_t _RESERVED_145 : 1;
    uint32_t FULL0 : 1;  ///< FULL0, reset value: 0x0
    uint32_t FOVR0 : 1;  ///< FOVR0, reset value: 0x0
    uint32_t RFOM0 : 1;  ///< RFOM0, reset value: 0x0
  } RF0R;

  /** 
  * name: RF1R
  * description: receive FIFO 1 register
  * address: 0x40006410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN1_RF1R_t {
    uint32_t FMP1 : 2;  ///< FMP1, reset value: 0x0
    uint32_t _RESERVED_146 : 1;
    uint32_t FULL1 : 1;  ///< FULL1, reset value: 0x0
    uint32_t FOVR1 : 1;  ///< FOVR1, reset value: 0x0
    uint32_t RFOM1 : 1;  ///< RFOM1, reset value: 0x0
  } RF1R;

  /** 
  * name: IER
  * description: interrupt enable register
  * address: 0x40006414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_IER_t {
    uint32_t TMEIE : 1;  ///< TMEIE, reset value: 0x0
    uint32_t FMPIE0 : 1;  ///< FMPIE0, reset value: 0x0
    uint32_t FFIE0 : 1;  ///< FFIE0, reset value: 0x0
    uint32_t FOVIE0 : 1;  ///< FOVIE0, reset value: 0x0
    uint32_t FMPIE1 : 1;  ///< FMPIE1, reset value: 0x0
    uint32_t FFIE1 : 1;  ///< FFIE1, reset value: 0x0
    uint32_t FOVIE1 : 1;  ///< FOVIE1, reset value: 0x0
    uint32_t _RESERVED_147 : 1;
    uint32_t EWGIE : 1;  ///< EWGIE, reset value: 0x0
    uint32_t EPVIE : 1;  ///< EPVIE, reset value: 0x0
    uint32_t BOFIE : 1;  ///< BOFIE, reset value: 0x0
    uint32_t LECIE : 1;  ///< LECIE, reset value: 0x0
    uint32_t _RESERVED_148 : 3;
    uint32_t ERRIE : 1;  ///< ERRIE, reset value: 0x0
    uint32_t WKUIE : 1;  ///< WKUIE, reset value: 0x0
    uint32_t SLKIE : 1;  ///< SLKIE, reset value: 0x0
  } IER;

  /** 
  * name: ESR
  * description: interrupt enable register
  * address: 0x40006418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN1_ESR_t {
    uint32_t EWGF : 1;  ///< EWGF, reset value: 0x0
    uint32_t EPVF : 1;  ///< EPVF, reset value: 0x0
    uint32_t BOFF : 1;  ///< BOFF, reset value: 0x0
    uint32_t _RESERVED_149 : 1;
    uint32_t LEC : 3;  ///< LEC, reset value: 0x0
    uint32_t _RESERVED_150 : 9;
    uint32_t TEC : 8;  ///< TEC, reset value: 0x0
    uint32_t REC : 8;  ///< REC, reset value: 0x0
  } ESR;

  /** 
  * name: BTR
  * description: bit timing register
  * address: 0x4000641C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_BTR_t {
    uint32_t BRP : 10;  ///< BRP, reset value: 0x0
    uint32_t _RESERVED_151 : 6;
    uint32_t TS1 : 4;  ///< TS1, reset value: 0x0
    uint32_t TS2 : 3;  ///< TS2, reset value: 0x0
    uint32_t _RESERVED_152 : 1;
    uint32_t SJW : 2;  ///< SJW, reset value: 0x0
    uint32_t _RESERVED_153 : 4;
    uint32_t LBKM : 1;  ///< LBKM, reset value: 0x0
    uint32_t SILM : 1;  ///< SILM, reset value: 0x0
  } BTR;

  const uint8_t _RESERVED_154[324];

  /** 
  * name: TI0R
  * description: TX mailbox identifier register
  * address: 0x40006580
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TI0R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI0R;

  /** 
  * name: TDT0R
  * description: mailbox data length control and time stamp register
  * address: 0x40006584
  * offset: 0x184
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDT0R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_155 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_156 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT0R;

  /** 
  * name: TDL0R
  * description: mailbox data low register
  * address: 0x40006588
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDL0R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL0R;

  /** 
  * name: TDH0R
  * description: mailbox data high register
  * address: 0x4000658C
  * offset: 0x18C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDH0R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH0R;

  /** 
  * name: TI1R
  * description: mailbox identifier register
  * address: 0x40006590
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TI1R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI1R;

  /** 
  * name: TDT1R
  * description: mailbox data length control and time stamp register
  * address: 0x40006594
  * offset: 0x194
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDT1R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_157 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_158 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT1R;

  /** 
  * name: TDL1R
  * description: mailbox data low register
  * address: 0x40006598
  * offset: 0x198
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDL1R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL1R;

  /** 
  * name: TDH1R
  * description: mailbox data high register
  * address: 0x4000659C
  * offset: 0x19C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDH1R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH1R;

  /** 
  * name: TI2R
  * description: mailbox identifier register
  * address: 0x400065A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TI2R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI2R;

  /** 
  * name: TDT2R
  * description: mailbox data length control and time stamp register
  * address: 0x400065A4
  * offset: 0x1A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDT2R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_159 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_160 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT2R;

  /** 
  * name: TDL2R
  * description: mailbox data low register
  * address: 0x400065A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDL2R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL2R;

  /** 
  * name: TDH2R
  * description: mailbox data high register
  * address: 0x400065AC
  * offset: 0x1AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_TDH2R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH2R;

  /** 
  * name: RI0R
  * description: receive FIFO mailbox identifier register
  * address: 0x400065B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RI0R_t {
    uint32_t _RESERVED_161 : 1;
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } RI0R;

  /** 
  * name: RDT0R
  * description: mailbox data high register
  * address: 0x400065B4
  * offset: 0x1B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDT0R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_162 : 4;
    uint32_t FMI : 8;  ///< FMI, reset value: 0x0
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } RDT0R;

  /** 
  * name: RDL0R
  * description: mailbox data high register
  * address: 0x400065B8
  * offset: 0x1B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDL0R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } RDL0R;

  /** 
  * name: RDH0R
  * description: receive FIFO mailbox data high register
  * address: 0x400065BC
  * offset: 0x1BC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDH0R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } RDH0R;

  /** 
  * name: RI1R
  * description: mailbox data high register
  * address: 0x400065C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RI1R_t {
    uint32_t _RESERVED_163 : 1;
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } RI1R;

  /** 
  * name: RDT1R
  * description: mailbox data high register
  * address: 0x400065C4
  * offset: 0x1C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDT1R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_164 : 4;
    uint32_t FMI : 8;  ///< FMI, reset value: 0x0
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } RDT1R;

  /** 
  * name: RDL1R
  * description: mailbox data high register
  * address: 0x400065C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDL1R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } RDL1R;

  /** 
  * name: RDH1R
  * description: mailbox data high register
  * address: 0x400065CC
  * offset: 0x1CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN1_RDH1R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } RDH1R;

  const uint8_t _RESERVED_165[20];

  /** 
  * name: FMR
  * description: filter master register
  * address: 0x40006600
  * offset: 0x200
  * reset value: 0x2A1C0E01
  * size: 0x20
  * access: read-write
  */
  struct CAN1_FMR_t {
    uint32_t FINIT : 1;  ///< FINIT, reset value: 0x1
    uint32_t _RESERVED_166 : 7;
    uint32_t CAN2SB : 6;  ///< CAN2SB, reset value: 0xE
  } FMR;

  /** 
  * name: FM1R
  * description: filter mode register
  * address: 0x40006604
  * offset: 0x204
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_FM1R_t {
    uint32_t FBM0 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM1 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM2 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM3 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM4 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM5 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM6 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM7 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM8 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM9 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM10 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM11 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM12 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM13 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM14 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM15 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM16 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM17 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM18 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM19 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM20 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM21 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM22 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM23 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM24 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM25 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM26 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM27 : 1;  ///< Filter mode, reset value: 0x0
  } FM1R;

  /** 
  * name: FS1R
  * description: filter scale register
  * address: 0x4000660C
  * offset: 0x20C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_FS1R_t {
    uint32_t FSC0 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC1 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC2 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC3 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC4 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC5 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC6 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC7 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC8 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC9 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC10 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC11 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC12 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC13 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC14 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC15 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC16 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC17 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC18 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC19 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC20 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC21 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC22 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC23 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC24 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC25 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC26 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC27 : 1;  ///< Filter scale configuration, reset value: 0x0
  } FS1R;

  /** 
  * name: FFA1R
  * description: filter FIFO assignment register
  * address: 0x40006614
  * offset: 0x214
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_FFA1R_t {
    uint32_t FFA0 : 1;  ///< Filter FIFO assignment for filter 0, reset value: 0x0
    uint32_t FFA1 : 1;  ///< Filter FIFO assignment for filter 1, reset value: 0x0
    uint32_t FFA2 : 1;  ///< Filter FIFO assignment for filter 2, reset value: 0x0
    uint32_t FFA3 : 1;  ///< Filter FIFO assignment for filter 3, reset value: 0x0
    uint32_t FFA4 : 1;  ///< Filter FIFO assignment for filter 4, reset value: 0x0
    uint32_t FFA5 : 1;  ///< Filter FIFO assignment for filter 5, reset value: 0x0
    uint32_t FFA6 : 1;  ///< Filter FIFO assignment for filter 6, reset value: 0x0
    uint32_t FFA7 : 1;  ///< Filter FIFO assignment for filter 7, reset value: 0x0
    uint32_t FFA8 : 1;  ///< Filter FIFO assignment for filter 8, reset value: 0x0
    uint32_t FFA9 : 1;  ///< Filter FIFO assignment for filter 9, reset value: 0x0
    uint32_t FFA10 : 1;  ///< Filter FIFO assignment for filter 10, reset value: 0x0
    uint32_t FFA11 : 1;  ///< Filter FIFO assignment for filter 11, reset value: 0x0
    uint32_t FFA12 : 1;  ///< Filter FIFO assignment for filter 12, reset value: 0x0
    uint32_t FFA13 : 1;  ///< Filter FIFO assignment for filter 13, reset value: 0x0
    uint32_t FFA14 : 1;  ///< Filter FIFO assignment for filter 14, reset value: 0x0
    uint32_t FFA15 : 1;  ///< Filter FIFO assignment for filter 15, reset value: 0x0
    uint32_t FFA16 : 1;  ///< Filter FIFO assignment for filter 16, reset value: 0x0
    uint32_t FFA17 : 1;  ///< Filter FIFO assignment for filter 17, reset value: 0x0
    uint32_t FFA18 : 1;  ///< Filter FIFO assignment for filter 18, reset value: 0x0
    uint32_t FFA19 : 1;  ///< Filter FIFO assignment for filter 19, reset value: 0x0
    uint32_t FFA20 : 1;  ///< Filter FIFO assignment for filter 20, reset value: 0x0
    uint32_t FFA21 : 1;  ///< Filter FIFO assignment for filter 21, reset value: 0x0
    uint32_t FFA22 : 1;  ///< Filter FIFO assignment for filter 22, reset value: 0x0
    uint32_t FFA23 : 1;  ///< Filter FIFO assignment for filter 23, reset value: 0x0
    uint32_t FFA24 : 1;  ///< Filter FIFO assignment for filter 24, reset value: 0x0
    uint32_t FFA25 : 1;  ///< Filter FIFO assignment for filter 25, reset value: 0x0
    uint32_t FFA26 : 1;  ///< Filter FIFO assignment for filter 26, reset value: 0x0
    uint32_t FFA27 : 1;  ///< Filter FIFO assignment for filter 27, reset value: 0x0
  } FFA1R;

  /** 
  * name: FA1R
  * description: filter activation register
  * address: 0x4000661C
  * offset: 0x21C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_FA1R_t {
    uint32_t FACT0 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT1 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT2 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT3 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT4 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT5 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT6 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT7 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT8 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT9 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT10 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT11 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT12 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT13 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT14 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT15 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT16 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT17 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT18 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT19 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT20 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT21 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT22 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT23 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT24 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT25 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT26 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT27 : 1;  ///< Filter active, reset value: 0x0
  } FA1R;

  const uint8_t _RESERVED_167[4];

  /** 
  * name: F0R1
  * description: Filter bank 0 register 1
  * address: 0x40006640
  * offset: 0x240
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F0R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F0R1;

  /** 
  * name: F0R2
  * description: Filter bank 0 register 2
  * address: 0x40006644
  * offset: 0x244
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F0R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F0R2;

  /** 
  * name: F1R1
  * description: Filter bank 1 register 1
  * address: 0x40006648
  * offset: 0x248
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F1R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F1R1;

  /** 
  * name: F1R2
  * description: Filter bank 1 register 2
  * address: 0x4000664C
  * offset: 0x24C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F1R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F1R2;

  /** 
  * name: F2R1
  * description: Filter bank 2 register 1
  * address: 0x40006650
  * offset: 0x250
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F2R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F2R1;

  /** 
  * name: F2R2
  * description: Filter bank 2 register 2
  * address: 0x40006654
  * offset: 0x254
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F2R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F2R2;

  /** 
  * name: F3R1
  * description: Filter bank 3 register 1
  * address: 0x40006658
  * offset: 0x258
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F3R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F3R1;

  /** 
  * name: F3R2
  * description: Filter bank 3 register 2
  * address: 0x4000665C
  * offset: 0x25C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F3R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F3R2;

  /** 
  * name: F4R1
  * description: Filter bank 4 register 1
  * address: 0x40006660
  * offset: 0x260
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F4R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F4R1;

  /** 
  * name: F4R2
  * description: Filter bank 4 register 2
  * address: 0x40006664
  * offset: 0x264
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F4R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F4R2;

  /** 
  * name: F5R1
  * description: Filter bank 5 register 1
  * address: 0x40006668
  * offset: 0x268
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F5R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F5R1;

  /** 
  * name: F5R2
  * description: Filter bank 5 register 2
  * address: 0x4000666C
  * offset: 0x26C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F5R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F5R2;

  /** 
  * name: F6R1
  * description: Filter bank 6 register 1
  * address: 0x40006670
  * offset: 0x270
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F6R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F6R1;

  /** 
  * name: F6R2
  * description: Filter bank 6 register 2
  * address: 0x40006674
  * offset: 0x274
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F6R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F6R2;

  /** 
  * name: F7R1
  * description: Filter bank 7 register 1
  * address: 0x40006678
  * offset: 0x278
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F7R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F7R1;

  /** 
  * name: F7R2
  * description: Filter bank 7 register 2
  * address: 0x4000667C
  * offset: 0x27C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F7R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F7R2;

  /** 
  * name: F8R1
  * description: Filter bank 8 register 1
  * address: 0x40006680
  * offset: 0x280
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F8R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F8R1;

  /** 
  * name: F8R2
  * description: Filter bank 8 register 2
  * address: 0x40006684
  * offset: 0x284
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F8R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F8R2;

  /** 
  * name: F9R1
  * description: Filter bank 9 register 1
  * address: 0x40006688
  * offset: 0x288
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F9R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F9R1;

  /** 
  * name: F9R2
  * description: Filter bank 9 register 2
  * address: 0x4000668C
  * offset: 0x28C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F9R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F9R2;

  /** 
  * name: F10R1
  * description: Filter bank 10 register 1
  * address: 0x40006690
  * offset: 0x290
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F10R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F10R1;

  /** 
  * name: F10R2
  * description: Filter bank 10 register 2
  * address: 0x40006694
  * offset: 0x294
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F10R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F10R2;

  /** 
  * name: F11R1
  * description: Filter bank 11 register 1
  * address: 0x40006698
  * offset: 0x298
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F11R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F11R1;

  /** 
  * name: F11R2
  * description: Filter bank 11 register 2
  * address: 0x4000669C
  * offset: 0x29C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F11R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F11R2;

  /** 
  * name: F12R1
  * description: Filter bank 4 register 1
  * address: 0x400066A0
  * offset: 0x2A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F12R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F12R1;

  /** 
  * name: F12R2
  * description: Filter bank 12 register 2
  * address: 0x400066A4
  * offset: 0x2A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F12R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F12R2;

  /** 
  * name: F13R1
  * description: Filter bank 13 register 1
  * address: 0x400066A8
  * offset: 0x2A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F13R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F13R1;

  /** 
  * name: F13R2
  * description: Filter bank 13 register 2
  * address: 0x400066AC
  * offset: 0x2AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F13R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F13R2;

  /** 
  * name: F14R1
  * description: Filter bank 14 register 1
  * address: 0x400066B0
  * offset: 0x2B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F14R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F14R1;

  /** 
  * name: F14R2
  * description: Filter bank 14 register 2
  * address: 0x400066B4
  * offset: 0x2B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F14R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F14R2;

  /** 
  * name: F15R1
  * description: Filter bank 15 register 1
  * address: 0x400066B8
  * offset: 0x2B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F15R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F15R1;

  /** 
  * name: F15R2
  * description: Filter bank 15 register 2
  * address: 0x400066BC
  * offset: 0x2BC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F15R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F15R2;

  /** 
  * name: F16R1
  * description: Filter bank 16 register 1
  * address: 0x400066C0
  * offset: 0x2C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F16R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F16R1;

  /** 
  * name: F16R2
  * description: Filter bank 16 register 2
  * address: 0x400066C4
  * offset: 0x2C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F16R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F16R2;

  /** 
  * name: F17R1
  * description: Filter bank 17 register 1
  * address: 0x400066C8
  * offset: 0x2C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F17R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F17R1;

  /** 
  * name: F17R2
  * description: Filter bank 17 register 2
  * address: 0x400066CC
  * offset: 0x2CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F17R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F17R2;

  /** 
  * name: F18R1
  * description: Filter bank 18 register 1
  * address: 0x400066D0
  * offset: 0x2D0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F18R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F18R1;

  /** 
  * name: F18R2
  * description: Filter bank 18 register 2
  * address: 0x400066D4
  * offset: 0x2D4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F18R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F18R2;

  /** 
  * name: F19R1
  * description: Filter bank 19 register 1
  * address: 0x400066D8
  * offset: 0x2D8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F19R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F19R1;

  /** 
  * name: F19R2
  * description: Filter bank 19 register 2
  * address: 0x400066DC
  * offset: 0x2DC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F19R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F19R2;

  /** 
  * name: F20R1
  * description: Filter bank 20 register 1
  * address: 0x400066E0
  * offset: 0x2E0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F20R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F20R1;

  /** 
  * name: F20R2
  * description: Filter bank 20 register 2
  * address: 0x400066E4
  * offset: 0x2E4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F20R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F20R2;

  /** 
  * name: F21R1
  * description: Filter bank 21 register 1
  * address: 0x400066E8
  * offset: 0x2E8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F21R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F21R1;

  /** 
  * name: F21R2
  * description: Filter bank 21 register 2
  * address: 0x400066EC
  * offset: 0x2EC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F21R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F21R2;

  /** 
  * name: F22R1
  * description: Filter bank 22 register 1
  * address: 0x400066F0
  * offset: 0x2F0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F22R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F22R1;

  /** 
  * name: F22R2
  * description: Filter bank 22 register 2
  * address: 0x400066F4
  * offset: 0x2F4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F22R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F22R2;

  /** 
  * name: F23R1
  * description: Filter bank 23 register 1
  * address: 0x400066F8
  * offset: 0x2F8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F23R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F23R1;

  /** 
  * name: F23R2
  * description: Filter bank 23 register 2
  * address: 0x400066FC
  * offset: 0x2FC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F23R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F23R2;

  /** 
  * name: F24R1
  * description: Filter bank 24 register 1
  * address: 0x40006700
  * offset: 0x300
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F24R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F24R1;

  /** 
  * name: F24R2
  * description: Filter bank 24 register 2
  * address: 0x40006704
  * offset: 0x304
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F24R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F24R2;

  /** 
  * name: F25R1
  * description: Filter bank 25 register 1
  * address: 0x40006708
  * offset: 0x308
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F25R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F25R1;

  /** 
  * name: F25R2
  * description: Filter bank 25 register 2
  * address: 0x4000670C
  * offset: 0x30C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F25R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F25R2;

  /** 
  * name: F26R1
  * description: Filter bank 26 register 1
  * address: 0x40006710
  * offset: 0x310
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F26R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F26R1;

  /** 
  * name: F26R2
  * description: Filter bank 26 register 2
  * address: 0x40006714
  * offset: 0x314
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F26R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F26R2;

  /** 
  * name: F27R1
  * description: Filter bank 27 register 1
  * address: 0x40006718
  * offset: 0x318
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F27R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F27R1;

  /** 
  * name: F27R2
  * description: Filter bank 27 register 2
  * address: 0x4000671C
  * offset: 0x31C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN1_F27R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F27R2;

} CAN1_t;


/** 
*  name: CAN2
*  description: Controller area network
*  group: CAN
*  address: 0x40006800
*/
typedef struct{
  /** 
  * name: MCR
  * description: master control register
  * address: 0x40006800
  * offset: 0x0
  * reset value: 0x00010002
  * size: 0x20
  * access: read-write
  */
  struct CAN2_MCR_t {
    uint32_t INRQ : 1;  ///< INRQ, reset value: 0x0
    uint32_t SLEEP : 1;  ///< SLEEP, reset value: 0x1
    uint32_t TXFP : 1;  ///< TXFP, reset value: 0x0
    uint32_t RFLM : 1;  ///< RFLM, reset value: 0x0
    uint32_t NART : 1;  ///< NART, reset value: 0x0
    uint32_t AWUM : 1;  ///< AWUM, reset value: 0x0
    uint32_t ABOM : 1;  ///< ABOM, reset value: 0x0
    uint32_t TTCM : 1;  ///< TTCM, reset value: 0x0
    uint32_t _RESERVED_168 : 7;
    uint32_t RESET : 1;  ///< RESET, reset value: 0x0
    uint32_t DBF : 1;  ///< DBF, reset value: 0x1
  } MCR;

  /** 
  * name: MSR
  * description: master status register
  * address: 0x40006804
  * offset: 0x4
  * reset value: 0x00000C02
  * size: 0x20
  * access: 
  */
  struct CAN2_MSR_t {
    uint32_t INAK : 1;  ///< INAK, reset value: 0x0
    uint32_t SLAK : 1;  ///< SLAK, reset value: 0x1
    uint32_t ERRI : 1;  ///< ERRI, reset value: 0x0
    uint32_t WKUI : 1;  ///< WKUI, reset value: 0x0
    uint32_t SLAKI : 1;  ///< SLAKI, reset value: 0x0
    uint32_t _RESERVED_169 : 3;
    uint32_t TXM : 1;  ///< TXM, reset value: 0x0
    uint32_t RXM : 1;  ///< RXM, reset value: 0x0
    uint32_t SAMP : 1;  ///< SAMP, reset value: 0x1
    uint32_t RX : 1;  ///< RX, reset value: 0x1
  } MSR;

  /** 
  * name: TSR
  * description: transmit status register
  * address: 0x40006808
  * offset: 0x8
  * reset value: 0x1C000000
  * size: 0x20
  * access: 
  */
  struct CAN2_TSR_t {
    uint32_t RQCP0 : 1;  ///< RQCP0, reset value: 0x0
    uint32_t TXOK0 : 1;  ///< TXOK0, reset value: 0x0
    uint32_t ALST0 : 1;  ///< ALST0, reset value: 0x0
    uint32_t TERR0 : 1;  ///< TERR0, reset value: 0x0
    uint32_t _RESERVED_170 : 3;
    uint32_t ABRQ0 : 1;  ///< ABRQ0, reset value: 0x0
    uint32_t RQCP1 : 1;  ///< RQCP1, reset value: 0x0
    uint32_t TXOK1 : 1;  ///< TXOK1, reset value: 0x0
    uint32_t ALST1 : 1;  ///< ALST1, reset value: 0x0
    uint32_t TERR1 : 1;  ///< TERR1, reset value: 0x0
    uint32_t _RESERVED_171 : 3;
    uint32_t ABRQ1 : 1;  ///< ABRQ1, reset value: 0x0
    uint32_t RQCP2 : 1;  ///< RQCP2, reset value: 0x0
    uint32_t TXOK2 : 1;  ///< TXOK2, reset value: 0x0
    uint32_t ALST2 : 1;  ///< ALST2, reset value: 0x0
    uint32_t TERR2 : 1;  ///< TERR2, reset value: 0x0
    uint32_t _RESERVED_172 : 3;
    uint32_t ABRQ2 : 1;  ///< ABRQ2, reset value: 0x0
    uint32_t CODE : 2;  ///< CODE, reset value: 0x0
    uint32_t TME0 : 1;  ///< Lowest priority flag for mailbox 0, reset value: 0x1
    uint32_t TME1 : 1;  ///< Lowest priority flag for mailbox 1, reset value: 0x1
    uint32_t TME2 : 1;  ///< Lowest priority flag for mailbox 2, reset value: 0x1
    uint32_t LOW0 : 1;  ///< Lowest priority flag for mailbox 0, reset value: 0x0
    uint32_t LOW1 : 1;  ///< Lowest priority flag for mailbox 1, reset value: 0x0
    uint32_t LOW2 : 1;  ///< Lowest priority flag for mailbox 2, reset value: 0x0
  } TSR;

  /** 
  * name: RF0R
  * description: receive FIFO 0 register
  * address: 0x4000680C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN2_RF0R_t {
    uint32_t FMP0 : 2;  ///< FMP0, reset value: 0x0
    uint32_t _RESERVED_173 : 1;
    uint32_t FULL0 : 1;  ///< FULL0, reset value: 0x0
    uint32_t FOVR0 : 1;  ///< FOVR0, reset value: 0x0
    uint32_t RFOM0 : 1;  ///< RFOM0, reset value: 0x0
  } RF0R;

  /** 
  * name: RF1R
  * description: receive FIFO 1 register
  * address: 0x40006810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN2_RF1R_t {
    uint32_t FMP1 : 2;  ///< FMP1, reset value: 0x0
    uint32_t _RESERVED_174 : 1;
    uint32_t FULL1 : 1;  ///< FULL1, reset value: 0x0
    uint32_t FOVR1 : 1;  ///< FOVR1, reset value: 0x0
    uint32_t RFOM1 : 1;  ///< RFOM1, reset value: 0x0
  } RF1R;

  /** 
  * name: IER
  * description: interrupt enable register
  * address: 0x40006814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_IER_t {
    uint32_t TMEIE : 1;  ///< TMEIE, reset value: 0x0
    uint32_t FMPIE0 : 1;  ///< FMPIE0, reset value: 0x0
    uint32_t FFIE0 : 1;  ///< FFIE0, reset value: 0x0
    uint32_t FOVIE0 : 1;  ///< FOVIE0, reset value: 0x0
    uint32_t FMPIE1 : 1;  ///< FMPIE1, reset value: 0x0
    uint32_t FFIE1 : 1;  ///< FFIE1, reset value: 0x0
    uint32_t FOVIE1 : 1;  ///< FOVIE1, reset value: 0x0
    uint32_t _RESERVED_175 : 1;
    uint32_t EWGIE : 1;  ///< EWGIE, reset value: 0x0
    uint32_t EPVIE : 1;  ///< EPVIE, reset value: 0x0
    uint32_t BOFIE : 1;  ///< BOFIE, reset value: 0x0
    uint32_t LECIE : 1;  ///< LECIE, reset value: 0x0
    uint32_t _RESERVED_176 : 3;
    uint32_t ERRIE : 1;  ///< ERRIE, reset value: 0x0
    uint32_t WKUIE : 1;  ///< WKUIE, reset value: 0x0
    uint32_t SLKIE : 1;  ///< SLKIE, reset value: 0x0
  } IER;

  /** 
  * name: ESR
  * description: interrupt enable register
  * address: 0x40006818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CAN2_ESR_t {
    uint32_t EWGF : 1;  ///< EWGF, reset value: 0x0
    uint32_t EPVF : 1;  ///< EPVF, reset value: 0x0
    uint32_t BOFF : 1;  ///< BOFF, reset value: 0x0
    uint32_t _RESERVED_177 : 1;
    uint32_t LEC : 3;  ///< LEC, reset value: 0x0
    uint32_t _RESERVED_178 : 9;
    uint32_t TEC : 8;  ///< TEC, reset value: 0x0
    uint32_t REC : 8;  ///< REC, reset value: 0x0
  } ESR;

  /** 
  * name: BTR
  * description: bit timing register
  * address: 0x4000681C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_BTR_t {
    uint32_t BRP : 10;  ///< BRP, reset value: 0x0
    uint32_t _RESERVED_179 : 6;
    uint32_t TS1 : 4;  ///< TS1, reset value: 0x0
    uint32_t TS2 : 3;  ///< TS2, reset value: 0x0
    uint32_t _RESERVED_180 : 1;
    uint32_t SJW : 2;  ///< SJW, reset value: 0x0
    uint32_t _RESERVED_181 : 4;
    uint32_t LBKM : 1;  ///< LBKM, reset value: 0x0
    uint32_t SILM : 1;  ///< SILM, reset value: 0x0
  } BTR;

  const uint8_t _RESERVED_182[324];

  /** 
  * name: TI0R
  * description: TX mailbox identifier register
  * address: 0x40006980
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TI0R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI0R;

  /** 
  * name: TDT0R
  * description: mailbox data length control and time stamp register
  * address: 0x40006984
  * offset: 0x184
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDT0R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_183 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_184 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT0R;

  /** 
  * name: TDL0R
  * description: mailbox data low register
  * address: 0x40006988
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDL0R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL0R;

  /** 
  * name: TDH0R
  * description: mailbox data high register
  * address: 0x4000698C
  * offset: 0x18C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDH0R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH0R;

  /** 
  * name: TI1R
  * description: mailbox identifier register
  * address: 0x40006990
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TI1R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI1R;

  /** 
  * name: TDT1R
  * description: mailbox data length control and time stamp register
  * address: 0x40006994
  * offset: 0x194
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDT1R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_185 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_186 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT1R;

  /** 
  * name: TDL1R
  * description: mailbox data low register
  * address: 0x40006998
  * offset: 0x198
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDL1R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL1R;

  /** 
  * name: TDH1R
  * description: mailbox data high register
  * address: 0x4000699C
  * offset: 0x19C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDH1R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH1R;

  /** 
  * name: TI2R
  * description: mailbox identifier register
  * address: 0x400069A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TI2R_t {
    uint32_t TXRQ : 1;  ///< TXRQ, reset value: 0x0
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } TI2R;

  /** 
  * name: TDT2R
  * description: mailbox data length control and time stamp register
  * address: 0x400069A4
  * offset: 0x1A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDT2R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_187 : 4;
    uint32_t TGT : 1;  ///< TGT, reset value: 0x0
    uint32_t _RESERVED_188 : 7;
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } TDT2R;

  /** 
  * name: TDL2R
  * description: mailbox data low register
  * address: 0x400069A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDL2R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } TDL2R;

  /** 
  * name: TDH2R
  * description: mailbox data high register
  * address: 0x400069AC
  * offset: 0x1AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_TDH2R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } TDH2R;

  /** 
  * name: RI0R
  * description: receive FIFO mailbox identifier register
  * address: 0x400069B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RI0R_t {
    uint32_t _RESERVED_189 : 1;
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } RI0R;

  /** 
  * name: RDT0R
  * description: mailbox data high register
  * address: 0x400069B4
  * offset: 0x1B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDT0R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_190 : 4;
    uint32_t FMI : 8;  ///< FMI, reset value: 0x0
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } RDT0R;

  /** 
  * name: RDL0R
  * description: mailbox data high register
  * address: 0x400069B8
  * offset: 0x1B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDL0R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } RDL0R;

  /** 
  * name: RDH0R
  * description: receive FIFO mailbox data high register
  * address: 0x400069BC
  * offset: 0x1BC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDH0R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } RDH0R;

  /** 
  * name: RI1R
  * description: mailbox data high register
  * address: 0x400069C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RI1R_t {
    uint32_t _RESERVED_191 : 1;
    uint32_t RTR : 1;  ///< RTR, reset value: 0x0
    uint32_t IDE : 1;  ///< IDE, reset value: 0x0
    uint32_t EXID : 18;  ///< EXID, reset value: 0x0
    uint32_t STID : 11;  ///< STID, reset value: 0x0
  } RI1R;

  /** 
  * name: RDT1R
  * description: mailbox data high register
  * address: 0x400069C4
  * offset: 0x1C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDT1R_t {
    uint32_t DLC : 4;  ///< DLC, reset value: 0x0
    uint32_t _RESERVED_192 : 4;
    uint32_t FMI : 8;  ///< FMI, reset value: 0x0
    uint32_t TIME : 16;  ///< TIME, reset value: 0x0
  } RDT1R;

  /** 
  * name: RDL1R
  * description: mailbox data high register
  * address: 0x400069C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDL1R_t {
    uint32_t DATA0 : 8;  ///< DATA0, reset value: 0x0
    uint32_t DATA1 : 8;  ///< DATA1, reset value: 0x0
    uint32_t DATA2 : 8;  ///< DATA2, reset value: 0x0
    uint32_t DATA3 : 8;  ///< DATA3, reset value: 0x0
  } RDL1R;

  /** 
  * name: RDH1R
  * description: mailbox data high register
  * address: 0x400069CC
  * offset: 0x1CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CAN2_RDH1R_t {
    uint32_t DATA4 : 8;  ///< DATA4, reset value: 0x0
    uint32_t DATA5 : 8;  ///< DATA5, reset value: 0x0
    uint32_t DATA6 : 8;  ///< DATA6, reset value: 0x0
    uint32_t DATA7 : 8;  ///< DATA7, reset value: 0x0
  } RDH1R;

  const uint8_t _RESERVED_193[20];

  /** 
  * name: FMR
  * description: filter master register
  * address: 0x40006A00
  * offset: 0x200
  * reset value: 0x2A1C0E01
  * size: 0x20
  * access: read-write
  */
  struct CAN2_FMR_t {
    uint32_t FINIT : 1;  ///< FINIT, reset value: 0x1
    uint32_t _RESERVED_194 : 7;
    uint32_t CAN2SB : 6;  ///< CAN2SB, reset value: 0xE
  } FMR;

  /** 
  * name: FM1R
  * description: filter mode register
  * address: 0x40006A04
  * offset: 0x204
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_FM1R_t {
    uint32_t FBM0 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM1 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM2 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM3 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM4 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM5 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM6 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM7 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM8 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM9 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM10 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM11 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM12 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM13 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM14 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM15 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM16 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM17 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM18 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM19 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM20 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM21 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM22 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM23 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM24 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM25 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM26 : 1;  ///< Filter mode, reset value: 0x0
    uint32_t FBM27 : 1;  ///< Filter mode, reset value: 0x0
  } FM1R;

  /** 
  * name: FS1R
  * description: filter scale register
  * address: 0x40006A0C
  * offset: 0x20C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_FS1R_t {
    uint32_t FSC0 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC1 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC2 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC3 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC4 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC5 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC6 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC7 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC8 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC9 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC10 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC11 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC12 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC13 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC14 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC15 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC16 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC17 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC18 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC19 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC20 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC21 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC22 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC23 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC24 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC25 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC26 : 1;  ///< Filter scale configuration, reset value: 0x0
    uint32_t FSC27 : 1;  ///< Filter scale configuration, reset value: 0x0
  } FS1R;

  /** 
  * name: FFA1R
  * description: filter FIFO assignment register
  * address: 0x40006A14
  * offset: 0x214
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_FFA1R_t {
    uint32_t FFA0 : 1;  ///< Filter FIFO assignment for filter 0, reset value: 0x0
    uint32_t FFA1 : 1;  ///< Filter FIFO assignment for filter 1, reset value: 0x0
    uint32_t FFA2 : 1;  ///< Filter FIFO assignment for filter 2, reset value: 0x0
    uint32_t FFA3 : 1;  ///< Filter FIFO assignment for filter 3, reset value: 0x0
    uint32_t FFA4 : 1;  ///< Filter FIFO assignment for filter 4, reset value: 0x0
    uint32_t FFA5 : 1;  ///< Filter FIFO assignment for filter 5, reset value: 0x0
    uint32_t FFA6 : 1;  ///< Filter FIFO assignment for filter 6, reset value: 0x0
    uint32_t FFA7 : 1;  ///< Filter FIFO assignment for filter 7, reset value: 0x0
    uint32_t FFA8 : 1;  ///< Filter FIFO assignment for filter 8, reset value: 0x0
    uint32_t FFA9 : 1;  ///< Filter FIFO assignment for filter 9, reset value: 0x0
    uint32_t FFA10 : 1;  ///< Filter FIFO assignment for filter 10, reset value: 0x0
    uint32_t FFA11 : 1;  ///< Filter FIFO assignment for filter 11, reset value: 0x0
    uint32_t FFA12 : 1;  ///< Filter FIFO assignment for filter 12, reset value: 0x0
    uint32_t FFA13 : 1;  ///< Filter FIFO assignment for filter 13, reset value: 0x0
    uint32_t FFA14 : 1;  ///< Filter FIFO assignment for filter 14, reset value: 0x0
    uint32_t FFA15 : 1;  ///< Filter FIFO assignment for filter 15, reset value: 0x0
    uint32_t FFA16 : 1;  ///< Filter FIFO assignment for filter 16, reset value: 0x0
    uint32_t FFA17 : 1;  ///< Filter FIFO assignment for filter 17, reset value: 0x0
    uint32_t FFA18 : 1;  ///< Filter FIFO assignment for filter 18, reset value: 0x0
    uint32_t FFA19 : 1;  ///< Filter FIFO assignment for filter 19, reset value: 0x0
    uint32_t FFA20 : 1;  ///< Filter FIFO assignment for filter 20, reset value: 0x0
    uint32_t FFA21 : 1;  ///< Filter FIFO assignment for filter 21, reset value: 0x0
    uint32_t FFA22 : 1;  ///< Filter FIFO assignment for filter 22, reset value: 0x0
    uint32_t FFA23 : 1;  ///< Filter FIFO assignment for filter 23, reset value: 0x0
    uint32_t FFA24 : 1;  ///< Filter FIFO assignment for filter 24, reset value: 0x0
    uint32_t FFA25 : 1;  ///< Filter FIFO assignment for filter 25, reset value: 0x0
    uint32_t FFA26 : 1;  ///< Filter FIFO assignment for filter 26, reset value: 0x0
    uint32_t FFA27 : 1;  ///< Filter FIFO assignment for filter 27, reset value: 0x0
  } FFA1R;

  /** 
  * name: FA1R
  * description: filter activation register
  * address: 0x40006A1C
  * offset: 0x21C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_FA1R_t {
    uint32_t FACT0 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT1 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT2 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT3 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT4 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT5 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT6 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT7 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT8 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT9 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT10 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT11 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT12 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT13 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT14 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT15 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT16 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT17 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT18 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT19 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT20 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT21 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT22 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT23 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT24 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT25 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT26 : 1;  ///< Filter active, reset value: 0x0
    uint32_t FACT27 : 1;  ///< Filter active, reset value: 0x0
  } FA1R;

  const uint8_t _RESERVED_195[4];

  /** 
  * name: F0R1
  * description: Filter bank 0 register 1
  * address: 0x40006A40
  * offset: 0x240
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F0R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F0R1;

  /** 
  * name: F0R2
  * description: Filter bank 0 register 2
  * address: 0x40006A44
  * offset: 0x244
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F0R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F0R2;

  /** 
  * name: F1R1
  * description: Filter bank 1 register 1
  * address: 0x40006A48
  * offset: 0x248
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F1R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F1R1;

  /** 
  * name: F1R2
  * description: Filter bank 1 register 2
  * address: 0x40006A4C
  * offset: 0x24C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F1R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F1R2;

  /** 
  * name: F2R1
  * description: Filter bank 2 register 1
  * address: 0x40006A50
  * offset: 0x250
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F2R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F2R1;

  /** 
  * name: F2R2
  * description: Filter bank 2 register 2
  * address: 0x40006A54
  * offset: 0x254
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F2R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F2R2;

  /** 
  * name: F3R1
  * description: Filter bank 3 register 1
  * address: 0x40006A58
  * offset: 0x258
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F3R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F3R1;

  /** 
  * name: F3R2
  * description: Filter bank 3 register 2
  * address: 0x40006A5C
  * offset: 0x25C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F3R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F3R2;

  /** 
  * name: F4R1
  * description: Filter bank 4 register 1
  * address: 0x40006A60
  * offset: 0x260
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F4R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F4R1;

  /** 
  * name: F4R2
  * description: Filter bank 4 register 2
  * address: 0x40006A64
  * offset: 0x264
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F4R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F4R2;

  /** 
  * name: F5R1
  * description: Filter bank 5 register 1
  * address: 0x40006A68
  * offset: 0x268
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F5R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F5R1;

  /** 
  * name: F5R2
  * description: Filter bank 5 register 2
  * address: 0x40006A6C
  * offset: 0x26C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F5R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F5R2;

  /** 
  * name: F6R1
  * description: Filter bank 6 register 1
  * address: 0x40006A70
  * offset: 0x270
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F6R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F6R1;

  /** 
  * name: F6R2
  * description: Filter bank 6 register 2
  * address: 0x40006A74
  * offset: 0x274
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F6R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F6R2;

  /** 
  * name: F7R1
  * description: Filter bank 7 register 1
  * address: 0x40006A78
  * offset: 0x278
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F7R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F7R1;

  /** 
  * name: F7R2
  * description: Filter bank 7 register 2
  * address: 0x40006A7C
  * offset: 0x27C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F7R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F7R2;

  /** 
  * name: F8R1
  * description: Filter bank 8 register 1
  * address: 0x40006A80
  * offset: 0x280
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F8R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F8R1;

  /** 
  * name: F8R2
  * description: Filter bank 8 register 2
  * address: 0x40006A84
  * offset: 0x284
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F8R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F8R2;

  /** 
  * name: F9R1
  * description: Filter bank 9 register 1
  * address: 0x40006A88
  * offset: 0x288
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F9R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F9R1;

  /** 
  * name: F9R2
  * description: Filter bank 9 register 2
  * address: 0x40006A8C
  * offset: 0x28C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F9R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F9R2;

  /** 
  * name: F10R1
  * description: Filter bank 10 register 1
  * address: 0x40006A90
  * offset: 0x290
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F10R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F10R1;

  /** 
  * name: F10R2
  * description: Filter bank 10 register 2
  * address: 0x40006A94
  * offset: 0x294
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F10R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F10R2;

  /** 
  * name: F11R1
  * description: Filter bank 11 register 1
  * address: 0x40006A98
  * offset: 0x298
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F11R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F11R1;

  /** 
  * name: F11R2
  * description: Filter bank 11 register 2
  * address: 0x40006A9C
  * offset: 0x29C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F11R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F11R2;

  /** 
  * name: F12R1
  * description: Filter bank 4 register 1
  * address: 0x40006AA0
  * offset: 0x2A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F12R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F12R1;

  /** 
  * name: F12R2
  * description: Filter bank 12 register 2
  * address: 0x40006AA4
  * offset: 0x2A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F12R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F12R2;

  /** 
  * name: F13R1
  * description: Filter bank 13 register 1
  * address: 0x40006AA8
  * offset: 0x2A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F13R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F13R1;

  /** 
  * name: F13R2
  * description: Filter bank 13 register 2
  * address: 0x40006AAC
  * offset: 0x2AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F13R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F13R2;

  /** 
  * name: F14R1
  * description: Filter bank 14 register 1
  * address: 0x40006AB0
  * offset: 0x2B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F14R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F14R1;

  /** 
  * name: F14R2
  * description: Filter bank 14 register 2
  * address: 0x40006AB4
  * offset: 0x2B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F14R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F14R2;

  /** 
  * name: F15R1
  * description: Filter bank 15 register 1
  * address: 0x40006AB8
  * offset: 0x2B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F15R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F15R1;

  /** 
  * name: F15R2
  * description: Filter bank 15 register 2
  * address: 0x40006ABC
  * offset: 0x2BC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F15R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F15R2;

  /** 
  * name: F16R1
  * description: Filter bank 16 register 1
  * address: 0x40006AC0
  * offset: 0x2C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F16R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F16R1;

  /** 
  * name: F16R2
  * description: Filter bank 16 register 2
  * address: 0x40006AC4
  * offset: 0x2C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F16R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F16R2;

  /** 
  * name: F17R1
  * description: Filter bank 17 register 1
  * address: 0x40006AC8
  * offset: 0x2C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F17R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F17R1;

  /** 
  * name: F17R2
  * description: Filter bank 17 register 2
  * address: 0x40006ACC
  * offset: 0x2CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F17R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F17R2;

  /** 
  * name: F18R1
  * description: Filter bank 18 register 1
  * address: 0x40006AD0
  * offset: 0x2D0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F18R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F18R1;

  /** 
  * name: F18R2
  * description: Filter bank 18 register 2
  * address: 0x40006AD4
  * offset: 0x2D4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F18R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F18R2;

  /** 
  * name: F19R1
  * description: Filter bank 19 register 1
  * address: 0x40006AD8
  * offset: 0x2D8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F19R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F19R1;

  /** 
  * name: F19R2
  * description: Filter bank 19 register 2
  * address: 0x40006ADC
  * offset: 0x2DC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F19R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F19R2;

  /** 
  * name: F20R1
  * description: Filter bank 20 register 1
  * address: 0x40006AE0
  * offset: 0x2E0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F20R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F20R1;

  /** 
  * name: F20R2
  * description: Filter bank 20 register 2
  * address: 0x40006AE4
  * offset: 0x2E4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F20R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F20R2;

  /** 
  * name: F21R1
  * description: Filter bank 21 register 1
  * address: 0x40006AE8
  * offset: 0x2E8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F21R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F21R1;

  /** 
  * name: F21R2
  * description: Filter bank 21 register 2
  * address: 0x40006AEC
  * offset: 0x2EC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F21R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F21R2;

  /** 
  * name: F22R1
  * description: Filter bank 22 register 1
  * address: 0x40006AF0
  * offset: 0x2F0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F22R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F22R1;

  /** 
  * name: F22R2
  * description: Filter bank 22 register 2
  * address: 0x40006AF4
  * offset: 0x2F4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F22R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F22R2;

  /** 
  * name: F23R1
  * description: Filter bank 23 register 1
  * address: 0x40006AF8
  * offset: 0x2F8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F23R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F23R1;

  /** 
  * name: F23R2
  * description: Filter bank 23 register 2
  * address: 0x40006AFC
  * offset: 0x2FC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F23R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F23R2;

  /** 
  * name: F24R1
  * description: Filter bank 24 register 1
  * address: 0x40006B00
  * offset: 0x300
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F24R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F24R1;

  /** 
  * name: F24R2
  * description: Filter bank 24 register 2
  * address: 0x40006B04
  * offset: 0x304
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F24R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F24R2;

  /** 
  * name: F25R1
  * description: Filter bank 25 register 1
  * address: 0x40006B08
  * offset: 0x308
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F25R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F25R1;

  /** 
  * name: F25R2
  * description: Filter bank 25 register 2
  * address: 0x40006B0C
  * offset: 0x30C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F25R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F25R2;

  /** 
  * name: F26R1
  * description: Filter bank 26 register 1
  * address: 0x40006B10
  * offset: 0x310
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F26R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F26R1;

  /** 
  * name: F26R2
  * description: Filter bank 26 register 2
  * address: 0x40006B14
  * offset: 0x314
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F26R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F26R2;

  /** 
  * name: F27R1
  * description: Filter bank 27 register 1
  * address: 0x40006B18
  * offset: 0x318
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F27R1_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F27R1;

  /** 
  * name: F27R2
  * description: Filter bank 27 register 2
  * address: 0x40006B1C
  * offset: 0x31C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CAN2_F27R2_t {
    uint32_t FB0 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB1 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB2 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB3 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB4 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB5 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB6 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB7 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB8 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB9 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB10 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB11 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB12 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB13 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB14 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB15 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB16 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB17 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB18 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB19 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB20 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB21 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB22 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB23 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB24 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB25 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB26 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB27 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB28 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB29 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB30 : 1;  ///< Filter bits, reset value: 0x0
    uint32_t FB31 : 1;  ///< Filter bits, reset value: 0x0
  } F27R2;

} CAN2_t;


/** 
*  name: PWR
*  description: Power control
*  group: PWR
*  address: 0x40007000
*/
typedef struct{
  /** 
  * name: CR
  * description: power control register
  * address: 0x40007000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct PWR_CR_t {
    uint32_t LPDS : 1;  ///< Low-power deep sleep, reset value: 0x0
    uint32_t PDDS : 1;  ///< Power down deepsleep, reset value: 0x0
    uint32_t CWUF : 1;  ///< Clear wakeup flag, reset value: 0x0
    uint32_t CSBF : 1;  ///< Clear standby flag, reset value: 0x0
    uint32_t PVDE : 1;  ///< Power voltage detector enable, reset value: 0x0
    uint32_t PLS : 3;  ///< PVD level selection, reset value: 0x0
    uint32_t DBP : 1;  ///< Disable backup domain write protection, reset value: 0x0
    uint32_t FPDS : 1;  ///< Flash power down in Stop mode, reset value: 0x0
  } CR;

  /** 
  * name: CSR
  * description: power control/status register
  * address: 0x40007004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct PWR_CSR_t {
    uint32_t WUF : 1;  ///< Wakeup flag, reset value: 0x0
    uint32_t SBF : 1;  ///< Standby flag, reset value: 0x0
    uint32_t PVDO : 1;  ///< PVD output, reset value: 0x0
    uint32_t BRR : 1;  ///< Backup regulator ready, reset value: 0x0
    uint32_t _RESERVED_196 : 4;
    uint32_t EWUP : 1;  ///< Enable WKUP pin, reset value: 0x0
    uint32_t BRE : 1;  ///< Backup regulator enable, reset value: 0x0
    uint32_t _RESERVED_197 : 4;
    uint32_t VOSRDY : 1;  ///< Regulator voltage scaling output selection ready bit, reset value: 0x0
  } CSR;

} PWR_t;


/** 
*  name: DAC
*  description: Digital-to-analog converter
*  group: DAC
*  address: 0x40007400
*/
typedef struct{
  /** 
  * name: CR
  * description: control register
  * address: 0x40007400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_CR_t {
    uint32_t EN1 : 1;  ///< DAC channel1 enable, reset value: 0x0
    uint32_t BOFF1 : 1;  ///< DAC channel1 output buffer disable, reset value: 0x0
    uint32_t TEN1 : 1;  ///< DAC channel1 trigger enable, reset value: 0x0
    uint32_t TSEL1 : 3;  ///< DAC channel1 trigger selection, reset value: 0x0
    uint32_t WAVE1 : 2;  ///< DAC channel1 noise/triangle wave generation enable, reset value: 0x0
    uint32_t MAMP1 : 4;  ///< DAC channel1 mask/amplitude selector, reset value: 0x0
    uint32_t DMAEN1 : 1;  ///< DAC channel1 DMA enable, reset value: 0x0
    uint32_t DMAUDRIE1 : 1;  ///< DAC channel1 DMA Underrun Interrupt enable, reset value: 0x0
    uint32_t _RESERVED_198 : 2;
    uint32_t EN2 : 1;  ///< DAC channel2 enable, reset value: 0x0
    uint32_t BOFF2 : 1;  ///< DAC channel2 output buffer disable, reset value: 0x0
    uint32_t TEN2 : 1;  ///< DAC channel2 trigger enable, reset value: 0x0
    uint32_t TSEL2 : 3;  ///< DAC channel2 trigger selection, reset value: 0x0
    uint32_t WAVE2 : 2;  ///< DAC channel2 noise/triangle wave generation enable, reset value: 0x0
    uint32_t MAMP2 : 4;  ///< DAC channel2 mask/amplitude selector, reset value: 0x0
    uint32_t DMAEN2 : 1;  ///< DAC channel2 DMA enable, reset value: 0x0
    uint32_t DMAUDRIE2 : 1;  ///< DAC channel2 DMA underrun interrupt enable, reset value: 0x0
  } CR;

  /** 
  * name: SWTRIGR
  * description: software trigger register
  * address: 0x40007404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct DAC_SWTRIGR_t {
    uint32_t SWTRIG1 : 1;  ///< DAC channel1 software trigger, reset value: 0x0
    uint32_t SWTRIG2 : 1;  ///< DAC channel2 software trigger, reset value: 0x0
  } SWTRIGR;

  /** 
  * name: DHR12R1
  * description: channel1 12-bit right-aligned data holding register
  * address: 0x40007408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12R1_t {
    uint32_t DACC1DHR : 12;  ///< DAC channel1 12-bit right-aligned data, reset value: 0x0
  } DHR12R1;

  /** 
  * name: DHR12L1
  * description: channel1 12-bit left aligned data holding register
  * address: 0x4000740C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12L1_t {
    uint32_t _RESERVED_199 : 4;
    uint32_t DACC1DHR : 12;  ///< DAC channel1 12-bit left-aligned data, reset value: 0x0
  } DHR12L1;

  /** 
  * name: DHR8R1
  * description: channel1 8-bit right aligned data holding register
  * address: 0x40007410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR8R1_t {
    uint32_t DACC1DHR : 8;  ///< DAC channel1 8-bit right-aligned data, reset value: 0x0
  } DHR8R1;

  /** 
  * name: DHR12R2
  * description: channel2 12-bit right aligned data holding register
  * address: 0x40007414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12R2_t {
    uint32_t DACC2DHR : 12;  ///< DAC channel2 12-bit right-aligned data, reset value: 0x0
  } DHR12R2;

  /** 
  * name: DHR12L2
  * description: channel2 12-bit left aligned data holding register
  * address: 0x40007418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12L2_t {
    uint32_t _RESERVED_200 : 4;
    uint32_t DACC2DHR : 12;  ///< DAC channel2 12-bit left-aligned data, reset value: 0x0
  } DHR12L2;

  /** 
  * name: DHR8R2
  * description: channel2 8-bit right-aligned data holding register
  * address: 0x4000741C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR8R2_t {
    uint32_t DACC2DHR : 8;  ///< DAC channel2 8-bit right-aligned data, reset value: 0x0
  } DHR8R2;

  /** 
  * name: DHR12RD
  * description: Dual DAC 12-bit right-aligned data holding register
  * address: 0x40007420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12RD_t {
    uint32_t DACC1DHR : 12;  ///< DAC channel1 12-bit right-aligned data, reset value: 0x0
    uint32_t _RESERVED_201 : 4;
    uint32_t DACC2DHR : 12;  ///< DAC channel2 12-bit right-aligned data, reset value: 0x0
  } DHR12RD;

  /** 
  * name: DHR12LD
  * description: DUAL DAC 12-bit left aligned data holding register
  * address: 0x40007424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR12LD_t {
    uint32_t _RESERVED_202 : 4;
    uint32_t DACC1DHR : 12;  ///< DAC channel1 12-bit left-aligned data, reset value: 0x0
    uint32_t _RESERVED_203 : 4;
    uint32_t DACC2DHR : 12;  ///< DAC channel2 12-bit left-aligned data, reset value: 0x0
  } DHR12LD;

  /** 
  * name: DHR8RD
  * description: DUAL DAC 8-bit right aligned data holding register
  * address: 0x40007428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_DHR8RD_t {
    uint32_t DACC1DHR : 8;  ///< DAC channel1 8-bit right-aligned data, reset value: 0x0
    uint32_t DACC2DHR : 8;  ///< DAC channel2 8-bit right-aligned data, reset value: 0x0
  } DHR8RD;

  /** 
  * name: DOR1
  * description: channel1 data output register
  * address: 0x4000742C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DAC_DOR1_t {
    uint32_t DACC1DOR : 12;  ///< DAC channel1 data output, reset value: 0x0
  } DOR1;

  /** 
  * name: DOR2
  * description: channel2 data output register
  * address: 0x40007430
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DAC_DOR2_t {
    uint32_t DACC2DOR : 12;  ///< DAC channel2 data output, reset value: 0x0
  } DOR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40007434
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DAC_SR_t {
    uint32_t _RESERVED_204 : 13;
    uint32_t DMAUDR1 : 1;  ///< DAC channel1 DMA underrun flag, reset value: 0x0
    uint32_t _RESERVED_205 : 15;
    uint32_t DMAUDR2 : 1;  ///< DAC channel2 DMA underrun flag, reset value: 0x0
  } SR;

} DAC_t;


/** 
*  name: UART7
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40007800
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40007800
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct UART7_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40007804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART7_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40007808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART7_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4000780C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART7_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_206 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40007810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART7_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_207 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_208 : 5;
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40007814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART7_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t _RESERVED_209 : 2;
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t _RESERVED_210 : 3;
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

} UART7_t;


/** 
*  name: UART8
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40007C00
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40007C00
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct UART8_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40007C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART8_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40007C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART8_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x40007C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART8_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_211 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40007C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART8_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_212 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_213 : 5;
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40007C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct UART8_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t _RESERVED_214 : 2;
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t _RESERVED_215 : 3;
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

} UART8_t;


/** 
*  name: TIM1
*  description: Advanced-timers
*  group: TIM
*  address: 0x40010000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40010000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40010004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CR2_t {
    uint32_t CCPC : 1;  ///< Capture/compare preloaded control, reset value: 0x0
    uint32_t _RESERVED_216 : 1;
    uint32_t CCUS : 1;  ///< Capture/compare control update selection, reset value: 0x0
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
    uint32_t OIS1 : 1;  ///< Output Idle state 1, reset value: 0x0
    uint32_t OIS1N : 1;  ///< Output Idle state 1, reset value: 0x0
    uint32_t OIS2 : 1;  ///< Output Idle state 2, reset value: 0x0
    uint32_t OIS2N : 1;  ///< Output Idle state 2, reset value: 0x0
    uint32_t OIS3 : 1;  ///< Output Idle state 3, reset value: 0x0
    uint32_t OIS3N : 1;  ///< Output Idle state 3, reset value: 0x0
    uint32_t OIS4 : 1;  ///< Output Idle state 4, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40010008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_217 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4001000C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t COMIE : 1;  ///< COM interrupt enable, reset value: 0x0
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t BIE : 1;  ///< Break interrupt enable, reset value: 0x0
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t COMDE : 1;  ///< COM DMA request enable, reset value: 0x0
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40010010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t COMIF : 1;  ///< COM interrupt flag, reset value: 0x0
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t BIF : 1;  ///< Break interrupt flag, reset value: 0x0
    uint32_t _RESERVED_218 : 1;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40010014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM1_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t COMG : 1;  ///< Capture/Compare control update generation, reset value: 0x0
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
    uint32_t BG : 1;  ///< Break generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40010018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
    uint32_t OC1CE : 1;  ///< Output Compare 1 clear enable, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t OC2FE : 1;  ///< Output Compare 2 fast enable, reset value: 0x0
    uint32_t OC2PE : 1;  ///< Output Compare 2 preload enable, reset value: 0x0
    uint32_t OC2M : 3;  ///< Output Compare 2 mode, reset value: 0x0
    uint32_t OC2CE : 1;  ///< Output Compare 2 clear enable, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40010018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x4001001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< Capture/Compare 3 selection, reset value: 0x0
    uint32_t OC3FE : 1;  ///< Output compare 3 fast enable, reset value: 0x0
    uint32_t OC3PE : 1;  ///< Output compare 3 preload enable, reset value: 0x0
    uint32_t OC3M : 3;  ///< Output compare 3 mode, reset value: 0x0
    uint32_t OC3CE : 1;  ///< Output compare 3 clear enable, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t OC4FE : 1;  ///< Output compare 4 fast enable, reset value: 0x0
    uint32_t OC4PE : 1;  ///< Output compare 4 preload enable, reset value: 0x0
    uint32_t OC4M : 3;  ///< Output compare 4 mode, reset value: 0x0
    uint32_t OC4CE : 1;  ///< Output compare 4 clear enable, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x4001001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40010020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC1NE : 1;  ///< Capture/Compare 1 complementary output enable, reset value: 0x0
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC2NE : 1;  ///< Capture/Compare 2 complementary output enable, reset value: 0x0
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC3NE : 1;  ///< Capture/Compare 3 complementary output enable, reset value: 0x0
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40010024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40010028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4001002C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: RCR
  * description: repetition counter register
  * address: 0x40010030
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_RCR_t {
    uint32_t REP : 8;  ///< Repetition counter value, reset value: 0x0
  } RCR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40010034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40010038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCR2_t {
    uint32_t CCR2 : 16;  ///< Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x4001003C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCR3_t {
    uint32_t CCR3 : 16;  ///< Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40010040
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_CCR4_t {
    uint32_t CCR4 : 16;  ///< Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: BDTR
  * description: break and dead-time register
  * address: 0x40010044
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_BDTR_t {
    uint32_t DTG : 8;  ///< Dead-time generator setup, reset value: 0x0
    uint32_t LOCK : 2;  ///< Lock configuration, reset value: 0x0
    uint32_t OSSI : 1;  ///< Off-state selection for Idle mode, reset value: 0x0
    uint32_t OSSR : 1;  ///< Off-state selection for Run mode, reset value: 0x0
    uint32_t BKE : 1;  ///< Break enable, reset value: 0x0
    uint32_t BKP : 1;  ///< Break polarity, reset value: 0x0
    uint32_t AOE : 1;  ///< Automatic output enable, reset value: 0x0
    uint32_t MOE : 1;  ///< Main output enable, reset value: 0x0
  } BDTR;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40010048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_219 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x4001004C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM1_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

} TIM1_t;


/** 
*  name: TIM8
*  description: Advanced-timers
*  group: TIM
*  address: 0x40010400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40010400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t DIR : 1;  ///< Direction, reset value: 0x0
    uint32_t CMS : 2;  ///< Center-aligned mode selection, reset value: 0x0
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40010404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CR2_t {
    uint32_t CCPC : 1;  ///< Capture/compare preloaded control, reset value: 0x0
    uint32_t _RESERVED_220 : 1;
    uint32_t CCUS : 1;  ///< Capture/compare control update selection, reset value: 0x0
    uint32_t CCDS : 1;  ///< Capture/compare DMA selection, reset value: 0x0
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
    uint32_t TI1S : 1;  ///< TI1 selection, reset value: 0x0
    uint32_t OIS1 : 1;  ///< Output Idle state 1, reset value: 0x0
    uint32_t OIS1N : 1;  ///< Output Idle state 1, reset value: 0x0
    uint32_t OIS2 : 1;  ///< Output Idle state 2, reset value: 0x0
    uint32_t OIS2N : 1;  ///< Output Idle state 2, reset value: 0x0
    uint32_t OIS3 : 1;  ///< Output Idle state 3, reset value: 0x0
    uint32_t OIS3N : 1;  ///< Output Idle state 3, reset value: 0x0
    uint32_t OIS4 : 1;  ///< Output Idle state 4, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40010408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_221 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
    uint32_t ETF : 4;  ///< External trigger filter, reset value: 0x0
    uint32_t ETPS : 2;  ///< External trigger prescaler, reset value: 0x0
    uint32_t ECE : 1;  ///< External clock enable, reset value: 0x0
    uint32_t ETP : 1;  ///< External trigger polarity, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4001040C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t CC3IE : 1;  ///< Capture/Compare 3 interrupt enable, reset value: 0x0
    uint32_t CC4IE : 1;  ///< Capture/Compare 4 interrupt enable, reset value: 0x0
    uint32_t COMIE : 1;  ///< COM interrupt enable, reset value: 0x0
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
    uint32_t BIE : 1;  ///< Break interrupt enable, reset value: 0x0
    uint32_t UDE : 1;  ///< Update DMA request enable, reset value: 0x0
    uint32_t CC1DE : 1;  ///< Capture/Compare 1 DMA request enable, reset value: 0x0
    uint32_t CC2DE : 1;  ///< Capture/Compare 2 DMA request enable, reset value: 0x0
    uint32_t CC3DE : 1;  ///< Capture/Compare 3 DMA request enable, reset value: 0x0
    uint32_t CC4DE : 1;  ///< Capture/Compare 4 DMA request enable, reset value: 0x0
    uint32_t COMDE : 1;  ///< COM DMA request enable, reset value: 0x0
    uint32_t TDE : 1;  ///< Trigger DMA request enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40010410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t CC3IF : 1;  ///< Capture/Compare 3 interrupt flag, reset value: 0x0
    uint32_t CC4IF : 1;  ///< Capture/Compare 4 interrupt flag, reset value: 0x0
    uint32_t COMIF : 1;  ///< COM interrupt flag, reset value: 0x0
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t BIF : 1;  ///< Break interrupt flag, reset value: 0x0
    uint32_t _RESERVED_222 : 1;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
    uint32_t CC3OF : 1;  ///< Capture/Compare 3 overcapture flag, reset value: 0x0
    uint32_t CC4OF : 1;  ///< Capture/Compare 4 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40010414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM8_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t CC3G : 1;  ///< Capture/compare 3 generation, reset value: 0x0
    uint32_t CC4G : 1;  ///< Capture/compare 4 generation, reset value: 0x0
    uint32_t COMG : 1;  ///< Capture/Compare control update generation, reset value: 0x0
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
    uint32_t BG : 1;  ///< Break generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40010418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
    uint32_t OC1CE : 1;  ///< Output Compare 1 clear enable, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t OC2FE : 1;  ///< Output Compare 2 fast enable, reset value: 0x0
    uint32_t OC2PE : 1;  ///< Output Compare 2 preload enable, reset value: 0x0
    uint32_t OC2M : 3;  ///< Output Compare 2 mode, reset value: 0x0
    uint32_t OC2CE : 1;  ///< Output Compare 2 clear enable, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40010418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 4;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCMR2_Output
  * description: capture/compare mode register 2 (output mode)
  * address: 0x4001041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCMR2_Output_t {
    uint32_t CC3S : 2;  ///< Capture/Compare 3 selection, reset value: 0x0
    uint32_t OC3FE : 1;  ///< Output compare 3 fast enable, reset value: 0x0
    uint32_t OC3PE : 1;  ///< Output compare 3 preload enable, reset value: 0x0
    uint32_t OC3M : 3;  ///< Output compare 3 mode, reset value: 0x0
    uint32_t OC3CE : 1;  ///< Output compare 3 clear enable, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t OC4FE : 1;  ///< Output compare 4 fast enable, reset value: 0x0
    uint32_t OC4PE : 1;  ///< Output compare 4 preload enable, reset value: 0x0
    uint32_t OC4M : 3;  ///< Output compare 4 mode, reset value: 0x0
    uint32_t OC4CE : 1;  ///< Output compare 4 clear enable, reset value: 0x0
  } CCMR2_Output;

  /** 
  * name: CCMR2_Input
  * description: capture/compare mode register 2 (input mode)
  * address: 0x4001041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCMR2_Input_t {
    uint32_t CC3S : 2;  ///< Capture/compare 3 selection, reset value: 0x0
    uint32_t IC3PSC : 2;  ///< Input capture 3 prescaler, reset value: 0x0
    uint32_t IC3F : 4;  ///< Input capture 3 filter, reset value: 0x0
    uint32_t CC4S : 2;  ///< Capture/Compare 4 selection, reset value: 0x0
    uint32_t IC4PSC : 2;  ///< Input capture 4 prescaler, reset value: 0x0
    uint32_t IC4F : 4;  ///< Input capture 4 filter, reset value: 0x0
  } CCMR2_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40010420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC1NE : 1;  ///< Capture/Compare 1 complementary output enable, reset value: 0x0
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC2NE : 1;  ///< Capture/Compare 2 complementary output enable, reset value: 0x0
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t CC3E : 1;  ///< Capture/Compare 3 output enable, reset value: 0x0
    uint32_t CC3P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC3NE : 1;  ///< Capture/Compare 3 complementary output enable, reset value: 0x0
    uint32_t CC3NP : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
    uint32_t CC4E : 1;  ///< Capture/Compare 4 output enable, reset value: 0x0
    uint32_t CC4P : 1;  ///< Capture/Compare 3 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40010424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40010428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4001042C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: RCR
  * description: repetition counter register
  * address: 0x40010430
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_RCR_t {
    uint32_t REP : 8;  ///< Repetition counter value, reset value: 0x0
  } RCR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40010434
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40010438
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCR2_t {
    uint32_t CCR2 : 16;  ///< Capture/Compare 2 value, reset value: 0x0
  } CCR2;

  /** 
  * name: CCR3
  * description: capture/compare register 3
  * address: 0x4001043C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCR3_t {
    uint32_t CCR3 : 16;  ///< Capture/Compare value, reset value: 0x0
  } CCR3;

  /** 
  * name: CCR4
  * description: capture/compare register 4
  * address: 0x40010440
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_CCR4_t {
    uint32_t CCR4 : 16;  ///< Capture/Compare value, reset value: 0x0
  } CCR4;

  /** 
  * name: BDTR
  * description: break and dead-time register
  * address: 0x40010444
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_BDTR_t {
    uint32_t DTG : 8;  ///< Dead-time generator setup, reset value: 0x0
    uint32_t LOCK : 2;  ///< Lock configuration, reset value: 0x0
    uint32_t OSSI : 1;  ///< Off-state selection for Idle mode, reset value: 0x0
    uint32_t OSSR : 1;  ///< Off-state selection for Run mode, reset value: 0x0
    uint32_t BKE : 1;  ///< Break enable, reset value: 0x0
    uint32_t BKP : 1;  ///< Break polarity, reset value: 0x0
    uint32_t AOE : 1;  ///< Automatic output enable, reset value: 0x0
    uint32_t MOE : 1;  ///< Main output enable, reset value: 0x0
  } BDTR;

  /** 
  * name: DCR
  * description: DMA control register
  * address: 0x40010448
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_DCR_t {
    uint32_t DBA : 5;  ///< DMA base address, reset value: 0x0
    uint32_t _RESERVED_223 : 3;
    uint32_t DBL : 5;  ///< DMA burst length, reset value: 0x0
  } DCR;

  /** 
  * name: DMAR
  * description: DMA address for full transfer
  * address: 0x4001044C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM8_DMAR_t {
    uint32_t DMAB : 16;  ///< DMA register for burst accesses, reset value: 0x0
  } DMAR;

} TIM8_t;


/** 
*  name: USART1
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40011000
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40011000
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct USART1_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
    uint32_t CTS : 1;  ///< CTS flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40011004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40011008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4001100C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_224 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40011010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_225 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_226 : 1;
    uint32_t LBCL : 1;  ///< Last bit clock pulse, reset value: 0x0
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t CLKEN : 1;  ///< Clock enable, reset value: 0x0
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40011014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t NACK : 1;  ///< Smartcard NACK enable, reset value: 0x0
    uint32_t SCEN : 1;  ///< Smartcard mode enable, reset value: 0x0
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t RTSE : 1;  ///< RTS enable, reset value: 0x0
    uint32_t CTSE : 1;  ///< CTS enable, reset value: 0x0
    uint32_t CTSIE : 1;  ///< CTS interrupt enable, reset value: 0x0
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

  /** 
  * name: GTPR
  * description: Guard time and prescaler register
  * address: 0x40011018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART1_GTPR_t {
    uint32_t PSC : 8;  ///< Prescaler value, reset value: 0x0
    uint32_t GT : 8;  ///< Guard time value, reset value: 0x0
  } GTPR;

} USART1_t;


/** 
*  name: USART6
*  description: Universal synchronous asynchronous receiver transmitter
*  group: USART
*  address: 0x40011400
*/
typedef struct{
  /** 
  * name: SR
  * description: Status register
  * address: 0x40011400
  * offset: 0x0
  * reset value: 0x00C00000
  * size: 0x20
  * access: 
  */
  struct USART6_SR_t {
    uint32_t PE : 1;  ///< Parity error, reset value: 0x0
    uint32_t FE : 1;  ///< Framing error, reset value: 0x0
    uint32_t NF : 1;  ///< Noise detected flag, reset value: 0x0
    uint32_t ORE : 1;  ///< Overrun error, reset value: 0x0
    uint32_t IDLE : 1;  ///< IDLE line detected, reset value: 0x0
    uint32_t RXNE : 1;  ///< Read data register not empty, reset value: 0x0
    uint32_t TC : 1;  ///< Transmission complete, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit data register empty, reset value: 0x0
    uint32_t LBD : 1;  ///< LIN break detection flag, reset value: 0x0
    uint32_t CTS : 1;  ///< CTS flag, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: Data register
  * address: 0x40011404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_DR_t {
    uint32_t DR : 9;  ///< Data value, reset value: 0x0
  } DR;

  /** 
  * name: BRR
  * description: Baud rate register
  * address: 0x40011408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_BRR_t {
    uint32_t DIV_Fraction : 4;  ///< fraction of USARTDIV, reset value: 0x0
    uint32_t DIV_Mantissa : 12;  ///< mantissa of USARTDIV, reset value: 0x0
  } BRR;

  /** 
  * name: CR1
  * description: Control register 1
  * address: 0x4001140C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_CR1_t {
    uint32_t SBK : 1;  ///< Send break, reset value: 0x0
    uint32_t RWU : 1;  ///< Receiver wakeup, reset value: 0x0
    uint32_t RE : 1;  ///< Receiver enable, reset value: 0x0
    uint32_t TE : 1;  ///< Transmitter enable, reset value: 0x0
    uint32_t IDLEIE : 1;  ///< IDLE interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RXNE interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transmission complete interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< TXE interrupt enable, reset value: 0x0
    uint32_t PEIE : 1;  ///< PE interrupt enable, reset value: 0x0
    uint32_t PS : 1;  ///< Parity selection, reset value: 0x0
    uint32_t PCE : 1;  ///< Parity control enable, reset value: 0x0
    uint32_t WAKE : 1;  ///< Wakeup method, reset value: 0x0
    uint32_t M : 1;  ///< Word length, reset value: 0x0
    uint32_t UE : 1;  ///< USART enable, reset value: 0x0
    uint32_t _RESERVED_227 : 1;
    uint32_t OVER8 : 1;  ///< Oversampling mode, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: Control register 2
  * address: 0x40011410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_CR2_t {
    uint32_t ADD : 4;  ///< Address of the USART node, reset value: 0x0
    uint32_t _RESERVED_228 : 1;
    uint32_t LBDL : 1;  ///< lin break detection length, reset value: 0x0
    uint32_t LBDIE : 1;  ///< LIN break detection interrupt enable, reset value: 0x0
    uint32_t _RESERVED_229 : 1;
    uint32_t LBCL : 1;  ///< Last bit clock pulse, reset value: 0x0
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t CLKEN : 1;  ///< Clock enable, reset value: 0x0
    uint32_t STOP : 2;  ///< STOP bits, reset value: 0x0
    uint32_t LINEN : 1;  ///< LIN mode enable, reset value: 0x0
  } CR2;

  /** 
  * name: CR3
  * description: Control register 3
  * address: 0x40011414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_CR3_t {
    uint32_t EIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t IREN : 1;  ///< IrDA mode enable, reset value: 0x0
    uint32_t IRLP : 1;  ///< IrDA low-power, reset value: 0x0
    uint32_t HDSEL : 1;  ///< Half-duplex selection, reset value: 0x0
    uint32_t NACK : 1;  ///< Smartcard NACK enable, reset value: 0x0
    uint32_t SCEN : 1;  ///< Smartcard mode enable, reset value: 0x0
    uint32_t DMAR : 1;  ///< DMA enable receiver, reset value: 0x0
    uint32_t DMAT : 1;  ///< DMA enable transmitter, reset value: 0x0
    uint32_t RTSE : 1;  ///< RTS enable, reset value: 0x0
    uint32_t CTSE : 1;  ///< CTS enable, reset value: 0x0
    uint32_t CTSIE : 1;  ///< CTS interrupt enable, reset value: 0x0
    uint32_t ONEBIT : 1;  ///< One sample bit method enable, reset value: 0x0
  } CR3;

  /** 
  * name: GTPR
  * description: Guard time and prescaler register
  * address: 0x40011418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct USART6_GTPR_t {
    uint32_t PSC : 8;  ///< Prescaler value, reset value: 0x0
    uint32_t GT : 8;  ///< Guard time value, reset value: 0x0
  } GTPR;

} USART6_t;


/** 
*  name: ADC1
*  description: Analog-to-digital converter
*  group: ADC
*  address: 0x40012000
*/
typedef struct{
  /** 
  * name: SR
  * description: status register
  * address: 0x40012000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SR_t {
    uint32_t AWD : 1;  ///< Analog watchdog flag, reset value: 0x0
    uint32_t EOC : 1;  ///< Regular channel end of conversion, reset value: 0x0
    uint32_t JEOC : 1;  ///< Injected channel end of conversion, reset value: 0x0
    uint32_t JSTRT : 1;  ///< Injected channel start flag, reset value: 0x0
    uint32_t STRT : 1;  ///< Regular channel start flag, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun, reset value: 0x0
  } SR;

  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40012004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_CR1_t {
    uint32_t AWDCH : 5;  ///< Analog watchdog channel select bits, reset value: 0x0
    uint32_t EOCIE : 1;  ///< Interrupt enable for EOC, reset value: 0x0
    uint32_t AWDIE : 1;  ///< Analog watchdog interrupt enable, reset value: 0x0
    uint32_t JEOCIE : 1;  ///< Interrupt enable for injected channels, reset value: 0x0
    uint32_t SCAN : 1;  ///< Scan mode, reset value: 0x0
    uint32_t AWDSGL : 1;  ///< Enable the watchdog on a single channel in scan mode, reset value: 0x0
    uint32_t JAUTO : 1;  ///< Automatic injected group conversion, reset value: 0x0
    uint32_t DISCEN : 1;  ///< Discontinuous mode on regular channels, reset value: 0x0
    uint32_t JDISCEN : 1;  ///< Discontinuous mode on injected channels, reset value: 0x0
    uint32_t DISCNUM : 3;  ///< Discontinuous mode channel count, reset value: 0x0
    uint32_t _RESERVED_230 : 6;
    uint32_t JAWDEN : 1;  ///< Analog watchdog enable on injected channels, reset value: 0x0
    uint32_t AWDEN : 1;  ///< Analog watchdog enable on regular channels, reset value: 0x0
    uint32_t RES : 2;  ///< Resolution, reset value: 0x0
    uint32_t OVRIE : 1;  ///< Overrun interrupt enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40012008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_CR2_t {
    uint32_t ADON : 1;  ///< A/D Converter ON / OFF, reset value: 0x0
    uint32_t CONT : 1;  ///< Continuous conversion, reset value: 0x0
    uint32_t _RESERVED_231 : 6;
    uint32_t DMA : 1;  ///< Direct memory access mode (for single ADC mode), reset value: 0x0
    uint32_t DDS : 1;  ///< DMA disable selection (for single ADC mode), reset value: 0x0
    uint32_t EOCS : 1;  ///< End of conversion selection, reset value: 0x0
    uint32_t ALIGN : 1;  ///< Data alignment, reset value: 0x0
    uint32_t _RESERVED_232 : 4;
    uint32_t JEXTSEL : 4;  ///< External event select for injected group, reset value: 0x0
    uint32_t JEXTEN : 2;  ///< External trigger enable for injected channels, reset value: 0x0
    uint32_t JSWSTART : 1;  ///< Start conversion of injected channels, reset value: 0x0
    uint32_t _RESERVED_233 : 1;
    uint32_t EXTSEL : 4;  ///< External event select for regular group, reset value: 0x0
    uint32_t EXTEN : 2;  ///< External trigger enable for regular channels, reset value: 0x0
    uint32_t SWSTART : 1;  ///< Start conversion of regular channels, reset value: 0x0
  } CR2;

  /** 
  * name: SMPR1
  * description: sample time register 1
  * address: 0x4001200C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SMPR1_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR1;

  /** 
  * name: SMPR2
  * description: sample time register 2
  * address: 0x40012010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SMPR2_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR2;

  /** 
  * name: JOFR1
  * description: injected channel data offset register x
  * address: 0x40012014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_JOFR1_t {
    uint32_t JOFFSET1 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR1;

  /** 
  * name: JOFR2
  * description: injected channel data offset register x
  * address: 0x40012018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_JOFR2_t {
    uint32_t JOFFSET2 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR2;

  /** 
  * name: JOFR3
  * description: injected channel data offset register x
  * address: 0x4001201C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_JOFR3_t {
    uint32_t JOFFSET3 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR3;

  /** 
  * name: JOFR4
  * description: injected channel data offset register x
  * address: 0x40012020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_JOFR4_t {
    uint32_t JOFFSET4 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR4;

  /** 
  * name: HTR
  * description: watchdog higher threshold register
  * address: 0x40012024
  * offset: 0x24
  * reset value: 0x00000FFF
  * size: 0x20
  * access: read-write
  */
  struct ADC1_HTR_t {
    uint32_t HT : 12;  ///< Analog watchdog higher threshold, reset value: 0xFFF
  } HTR;

  /** 
  * name: LTR
  * description: watchdog lower threshold register
  * address: 0x40012028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_LTR_t {
    uint32_t LT : 12;  ///< Analog watchdog lower threshold, reset value: 0x0
  } LTR;

  /** 
  * name: SQR1
  * description: regular sequence register 1
  * address: 0x4001202C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SQR1_t {
    uint32_t SQ13 : 5;  ///< 13th conversion in regular sequence, reset value: 0x0
    uint32_t SQ14 : 5;  ///< 14th conversion in regular sequence, reset value: 0x0
    uint32_t SQ15 : 5;  ///< 15th conversion in regular sequence, reset value: 0x0
    uint32_t SQ16 : 5;  ///< 16th conversion in regular sequence, reset value: 0x0
    uint32_t L : 4;  ///< Regular channel sequence length, reset value: 0x0
  } SQR1;

  /** 
  * name: SQR2
  * description: regular sequence register 2
  * address: 0x40012030
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SQR2_t {
    uint32_t SQ7 : 5;  ///< 7th conversion in regular sequence, reset value: 0x0
    uint32_t SQ8 : 5;  ///< 8th conversion in regular sequence, reset value: 0x0
    uint32_t SQ9 : 5;  ///< 9th conversion in regular sequence, reset value: 0x0
    uint32_t SQ10 : 5;  ///< 10th conversion in regular sequence, reset value: 0x0
    uint32_t SQ11 : 5;  ///< 11th conversion in regular sequence, reset value: 0x0
    uint32_t SQ12 : 5;  ///< 12th conversion in regular sequence, reset value: 0x0
  } SQR2;

  /** 
  * name: SQR3
  * description: regular sequence register 3
  * address: 0x40012034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_SQR3_t {
    uint32_t SQ1 : 5;  ///< 1st conversion in regular sequence, reset value: 0x0
    uint32_t SQ2 : 5;  ///< 2nd conversion in regular sequence, reset value: 0x0
    uint32_t SQ3 : 5;  ///< 3rd conversion in regular sequence, reset value: 0x0
    uint32_t SQ4 : 5;  ///< 4th conversion in regular sequence, reset value: 0x0
    uint32_t SQ5 : 5;  ///< 5th conversion in regular sequence, reset value: 0x0
    uint32_t SQ6 : 5;  ///< 6th conversion in regular sequence, reset value: 0x0
  } SQR3;

  /** 
  * name: JSQR
  * description: injected sequence register
  * address: 0x40012038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC1_JSQR_t {
    uint32_t JSQ1 : 5;  ///< 1st conversion in injected sequence, reset value: 0x0
    uint32_t JSQ2 : 5;  ///< 2nd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ3 : 5;  ///< 3rd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ4 : 5;  ///< 4th conversion in injected sequence, reset value: 0x0
    uint32_t JL : 2;  ///< Injected sequence length, reset value: 0x0
  } JSQR;

  /** 
  * name: JDR1
  * description: injected data register x
  * address: 0x4001203C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC1_JDR1_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR1;

  /** 
  * name: JDR2
  * description: injected data register x
  * address: 0x40012040
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC1_JDR2_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR2;

  /** 
  * name: JDR3
  * description: injected data register x
  * address: 0x40012044
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC1_JDR3_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR3;

  /** 
  * name: JDR4
  * description: injected data register x
  * address: 0x40012048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC1_JDR4_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR4;

  /** 
  * name: DR
  * description: regular data register
  * address: 0x4001204C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC1_DR_t {
    uint32_t DATA : 16;  ///< Regular data, reset value: 0x0
  } DR;

} ADC1_t;


/** 
*  name: ADC2
*  description: Analog-to-digital converter
*  group: ADC
*  address: 0x40012100
*/
typedef struct{
  /** 
  * name: SR
  * description: status register
  * address: 0x40012100
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SR_t {
    uint32_t AWD : 1;  ///< Analog watchdog flag, reset value: 0x0
    uint32_t EOC : 1;  ///< Regular channel end of conversion, reset value: 0x0
    uint32_t JEOC : 1;  ///< Injected channel end of conversion, reset value: 0x0
    uint32_t JSTRT : 1;  ///< Injected channel start flag, reset value: 0x0
    uint32_t STRT : 1;  ///< Regular channel start flag, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun, reset value: 0x0
  } SR;

  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40012104
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_CR1_t {
    uint32_t AWDCH : 5;  ///< Analog watchdog channel select bits, reset value: 0x0
    uint32_t EOCIE : 1;  ///< Interrupt enable for EOC, reset value: 0x0
    uint32_t AWDIE : 1;  ///< Analog watchdog interrupt enable, reset value: 0x0
    uint32_t JEOCIE : 1;  ///< Interrupt enable for injected channels, reset value: 0x0
    uint32_t SCAN : 1;  ///< Scan mode, reset value: 0x0
    uint32_t AWDSGL : 1;  ///< Enable the watchdog on a single channel in scan mode, reset value: 0x0
    uint32_t JAUTO : 1;  ///< Automatic injected group conversion, reset value: 0x0
    uint32_t DISCEN : 1;  ///< Discontinuous mode on regular channels, reset value: 0x0
    uint32_t JDISCEN : 1;  ///< Discontinuous mode on injected channels, reset value: 0x0
    uint32_t DISCNUM : 3;  ///< Discontinuous mode channel count, reset value: 0x0
    uint32_t _RESERVED_234 : 6;
    uint32_t JAWDEN : 1;  ///< Analog watchdog enable on injected channels, reset value: 0x0
    uint32_t AWDEN : 1;  ///< Analog watchdog enable on regular channels, reset value: 0x0
    uint32_t RES : 2;  ///< Resolution, reset value: 0x0
    uint32_t OVRIE : 1;  ///< Overrun interrupt enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40012108
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_CR2_t {
    uint32_t ADON : 1;  ///< A/D Converter ON / OFF, reset value: 0x0
    uint32_t CONT : 1;  ///< Continuous conversion, reset value: 0x0
    uint32_t _RESERVED_235 : 6;
    uint32_t DMA : 1;  ///< Direct memory access mode (for single ADC mode), reset value: 0x0
    uint32_t DDS : 1;  ///< DMA disable selection (for single ADC mode), reset value: 0x0
    uint32_t EOCS : 1;  ///< End of conversion selection, reset value: 0x0
    uint32_t ALIGN : 1;  ///< Data alignment, reset value: 0x0
    uint32_t _RESERVED_236 : 4;
    uint32_t JEXTSEL : 4;  ///< External event select for injected group, reset value: 0x0
    uint32_t JEXTEN : 2;  ///< External trigger enable for injected channels, reset value: 0x0
    uint32_t JSWSTART : 1;  ///< Start conversion of injected channels, reset value: 0x0
    uint32_t _RESERVED_237 : 1;
    uint32_t EXTSEL : 4;  ///< External event select for regular group, reset value: 0x0
    uint32_t EXTEN : 2;  ///< External trigger enable for regular channels, reset value: 0x0
    uint32_t SWSTART : 1;  ///< Start conversion of regular channels, reset value: 0x0
  } CR2;

  /** 
  * name: SMPR1
  * description: sample time register 1
  * address: 0x4001210C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SMPR1_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR1;

  /** 
  * name: SMPR2
  * description: sample time register 2
  * address: 0x40012110
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SMPR2_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR2;

  /** 
  * name: JOFR1
  * description: injected channel data offset register x
  * address: 0x40012114
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_JOFR1_t {
    uint32_t JOFFSET1 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR1;

  /** 
  * name: JOFR2
  * description: injected channel data offset register x
  * address: 0x40012118
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_JOFR2_t {
    uint32_t JOFFSET2 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR2;

  /** 
  * name: JOFR3
  * description: injected channel data offset register x
  * address: 0x4001211C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_JOFR3_t {
    uint32_t JOFFSET3 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR3;

  /** 
  * name: JOFR4
  * description: injected channel data offset register x
  * address: 0x40012120
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_JOFR4_t {
    uint32_t JOFFSET4 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR4;

  /** 
  * name: HTR
  * description: watchdog higher threshold register
  * address: 0x40012124
  * offset: 0x24
  * reset value: 0x00000FFF
  * size: 0x20
  * access: read-write
  */
  struct ADC2_HTR_t {
    uint32_t HT : 12;  ///< Analog watchdog higher threshold, reset value: 0xFFF
  } HTR;

  /** 
  * name: LTR
  * description: watchdog lower threshold register
  * address: 0x40012128
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_LTR_t {
    uint32_t LT : 12;  ///< Analog watchdog lower threshold, reset value: 0x0
  } LTR;

  /** 
  * name: SQR1
  * description: regular sequence register 1
  * address: 0x4001212C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SQR1_t {
    uint32_t SQ13 : 5;  ///< 13th conversion in regular sequence, reset value: 0x0
    uint32_t SQ14 : 5;  ///< 14th conversion in regular sequence, reset value: 0x0
    uint32_t SQ15 : 5;  ///< 15th conversion in regular sequence, reset value: 0x0
    uint32_t SQ16 : 5;  ///< 16th conversion in regular sequence, reset value: 0x0
    uint32_t L : 4;  ///< Regular channel sequence length, reset value: 0x0
  } SQR1;

  /** 
  * name: SQR2
  * description: regular sequence register 2
  * address: 0x40012130
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SQR2_t {
    uint32_t SQ7 : 5;  ///< 7th conversion in regular sequence, reset value: 0x0
    uint32_t SQ8 : 5;  ///< 8th conversion in regular sequence, reset value: 0x0
    uint32_t SQ9 : 5;  ///< 9th conversion in regular sequence, reset value: 0x0
    uint32_t SQ10 : 5;  ///< 10th conversion in regular sequence, reset value: 0x0
    uint32_t SQ11 : 5;  ///< 11th conversion in regular sequence, reset value: 0x0
    uint32_t SQ12 : 5;  ///< 12th conversion in regular sequence, reset value: 0x0
  } SQR2;

  /** 
  * name: SQR3
  * description: regular sequence register 3
  * address: 0x40012134
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_SQR3_t {
    uint32_t SQ1 : 5;  ///< 1st conversion in regular sequence, reset value: 0x0
    uint32_t SQ2 : 5;  ///< 2nd conversion in regular sequence, reset value: 0x0
    uint32_t SQ3 : 5;  ///< 3rd conversion in regular sequence, reset value: 0x0
    uint32_t SQ4 : 5;  ///< 4th conversion in regular sequence, reset value: 0x0
    uint32_t SQ5 : 5;  ///< 5th conversion in regular sequence, reset value: 0x0
    uint32_t SQ6 : 5;  ///< 6th conversion in regular sequence, reset value: 0x0
  } SQR3;

  /** 
  * name: JSQR
  * description: injected sequence register
  * address: 0x40012138
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC2_JSQR_t {
    uint32_t JSQ1 : 5;  ///< 1st conversion in injected sequence, reset value: 0x0
    uint32_t JSQ2 : 5;  ///< 2nd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ3 : 5;  ///< 3rd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ4 : 5;  ///< 4th conversion in injected sequence, reset value: 0x0
    uint32_t JL : 2;  ///< Injected sequence length, reset value: 0x0
  } JSQR;

  /** 
  * name: JDR1
  * description: injected data register x
  * address: 0x4001213C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC2_JDR1_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR1;

  /** 
  * name: JDR2
  * description: injected data register x
  * address: 0x40012140
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC2_JDR2_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR2;

  /** 
  * name: JDR3
  * description: injected data register x
  * address: 0x40012144
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC2_JDR3_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR3;

  /** 
  * name: JDR4
  * description: injected data register x
  * address: 0x40012148
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC2_JDR4_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR4;

  /** 
  * name: DR
  * description: regular data register
  * address: 0x4001214C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC2_DR_t {
    uint32_t DATA : 16;  ///< Regular data, reset value: 0x0
  } DR;

} ADC2_t;


/** 
*  name: ADC3
*  description: Analog-to-digital converter
*  group: ADC
*  address: 0x40012200
*/
typedef struct{
  /** 
  * name: SR
  * description: status register
  * address: 0x40012200
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SR_t {
    uint32_t AWD : 1;  ///< Analog watchdog flag, reset value: 0x0
    uint32_t EOC : 1;  ///< Regular channel end of conversion, reset value: 0x0
    uint32_t JEOC : 1;  ///< Injected channel end of conversion, reset value: 0x0
    uint32_t JSTRT : 1;  ///< Injected channel start flag, reset value: 0x0
    uint32_t STRT : 1;  ///< Regular channel start flag, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun, reset value: 0x0
  } SR;

  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40012204
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_CR1_t {
    uint32_t AWDCH : 5;  ///< Analog watchdog channel select bits, reset value: 0x0
    uint32_t EOCIE : 1;  ///< Interrupt enable for EOC, reset value: 0x0
    uint32_t AWDIE : 1;  ///< Analog watchdog interrupt enable, reset value: 0x0
    uint32_t JEOCIE : 1;  ///< Interrupt enable for injected channels, reset value: 0x0
    uint32_t SCAN : 1;  ///< Scan mode, reset value: 0x0
    uint32_t AWDSGL : 1;  ///< Enable the watchdog on a single channel in scan mode, reset value: 0x0
    uint32_t JAUTO : 1;  ///< Automatic injected group conversion, reset value: 0x0
    uint32_t DISCEN : 1;  ///< Discontinuous mode on regular channels, reset value: 0x0
    uint32_t JDISCEN : 1;  ///< Discontinuous mode on injected channels, reset value: 0x0
    uint32_t DISCNUM : 3;  ///< Discontinuous mode channel count, reset value: 0x0
    uint32_t _RESERVED_238 : 6;
    uint32_t JAWDEN : 1;  ///< Analog watchdog enable on injected channels, reset value: 0x0
    uint32_t AWDEN : 1;  ///< Analog watchdog enable on regular channels, reset value: 0x0
    uint32_t RES : 2;  ///< Resolution, reset value: 0x0
    uint32_t OVRIE : 1;  ///< Overrun interrupt enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40012208
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_CR2_t {
    uint32_t ADON : 1;  ///< A/D Converter ON / OFF, reset value: 0x0
    uint32_t CONT : 1;  ///< Continuous conversion, reset value: 0x0
    uint32_t _RESERVED_239 : 6;
    uint32_t DMA : 1;  ///< Direct memory access mode (for single ADC mode), reset value: 0x0
    uint32_t DDS : 1;  ///< DMA disable selection (for single ADC mode), reset value: 0x0
    uint32_t EOCS : 1;  ///< End of conversion selection, reset value: 0x0
    uint32_t ALIGN : 1;  ///< Data alignment, reset value: 0x0
    uint32_t _RESERVED_240 : 4;
    uint32_t JEXTSEL : 4;  ///< External event select for injected group, reset value: 0x0
    uint32_t JEXTEN : 2;  ///< External trigger enable for injected channels, reset value: 0x0
    uint32_t JSWSTART : 1;  ///< Start conversion of injected channels, reset value: 0x0
    uint32_t _RESERVED_241 : 1;
    uint32_t EXTSEL : 4;  ///< External event select for regular group, reset value: 0x0
    uint32_t EXTEN : 2;  ///< External trigger enable for regular channels, reset value: 0x0
    uint32_t SWSTART : 1;  ///< Start conversion of regular channels, reset value: 0x0
  } CR2;

  /** 
  * name: SMPR1
  * description: sample time register 1
  * address: 0x4001220C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SMPR1_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR1;

  /** 
  * name: SMPR2
  * description: sample time register 2
  * address: 0x40012210
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SMPR2_t {
    uint32_t SMPx_x : 32;  ///< Sample time bits, reset value: 0x0
  } SMPR2;

  /** 
  * name: JOFR1
  * description: injected channel data offset register x
  * address: 0x40012214
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_JOFR1_t {
    uint32_t JOFFSET1 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR1;

  /** 
  * name: JOFR2
  * description: injected channel data offset register x
  * address: 0x40012218
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_JOFR2_t {
    uint32_t JOFFSET2 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR2;

  /** 
  * name: JOFR3
  * description: injected channel data offset register x
  * address: 0x4001221C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_JOFR3_t {
    uint32_t JOFFSET3 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR3;

  /** 
  * name: JOFR4
  * description: injected channel data offset register x
  * address: 0x40012220
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_JOFR4_t {
    uint32_t JOFFSET4 : 12;  ///< Data offset for injected channel x, reset value: 0x0
  } JOFR4;

  /** 
  * name: HTR
  * description: watchdog higher threshold register
  * address: 0x40012224
  * offset: 0x24
  * reset value: 0x00000FFF
  * size: 0x20
  * access: read-write
  */
  struct ADC3_HTR_t {
    uint32_t HT : 12;  ///< Analog watchdog higher threshold, reset value: 0xFFF
  } HTR;

  /** 
  * name: LTR
  * description: watchdog lower threshold register
  * address: 0x40012228
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_LTR_t {
    uint32_t LT : 12;  ///< Analog watchdog lower threshold, reset value: 0x0
  } LTR;

  /** 
  * name: SQR1
  * description: regular sequence register 1
  * address: 0x4001222C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SQR1_t {
    uint32_t SQ13 : 5;  ///< 13th conversion in regular sequence, reset value: 0x0
    uint32_t SQ14 : 5;  ///< 14th conversion in regular sequence, reset value: 0x0
    uint32_t SQ15 : 5;  ///< 15th conversion in regular sequence, reset value: 0x0
    uint32_t SQ16 : 5;  ///< 16th conversion in regular sequence, reset value: 0x0
    uint32_t L : 4;  ///< Regular channel sequence length, reset value: 0x0
  } SQR1;

  /** 
  * name: SQR2
  * description: regular sequence register 2
  * address: 0x40012230
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SQR2_t {
    uint32_t SQ7 : 5;  ///< 7th conversion in regular sequence, reset value: 0x0
    uint32_t SQ8 : 5;  ///< 8th conversion in regular sequence, reset value: 0x0
    uint32_t SQ9 : 5;  ///< 9th conversion in regular sequence, reset value: 0x0
    uint32_t SQ10 : 5;  ///< 10th conversion in regular sequence, reset value: 0x0
    uint32_t SQ11 : 5;  ///< 11th conversion in regular sequence, reset value: 0x0
    uint32_t SQ12 : 5;  ///< 12th conversion in regular sequence, reset value: 0x0
  } SQR2;

  /** 
  * name: SQR3
  * description: regular sequence register 3
  * address: 0x40012234
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_SQR3_t {
    uint32_t SQ1 : 5;  ///< 1st conversion in regular sequence, reset value: 0x0
    uint32_t SQ2 : 5;  ///< 2nd conversion in regular sequence, reset value: 0x0
    uint32_t SQ3 : 5;  ///< 3rd conversion in regular sequence, reset value: 0x0
    uint32_t SQ4 : 5;  ///< 4th conversion in regular sequence, reset value: 0x0
    uint32_t SQ5 : 5;  ///< 5th conversion in regular sequence, reset value: 0x0
    uint32_t SQ6 : 5;  ///< 6th conversion in regular sequence, reset value: 0x0
  } SQR3;

  /** 
  * name: JSQR
  * description: injected sequence register
  * address: 0x40012238
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct ADC3_JSQR_t {
    uint32_t JSQ1 : 5;  ///< 1st conversion in injected sequence, reset value: 0x0
    uint32_t JSQ2 : 5;  ///< 2nd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ3 : 5;  ///< 3rd conversion in injected sequence, reset value: 0x0
    uint32_t JSQ4 : 5;  ///< 4th conversion in injected sequence, reset value: 0x0
    uint32_t JL : 2;  ///< Injected sequence length, reset value: 0x0
  } JSQR;

  /** 
  * name: JDR1
  * description: injected data register x
  * address: 0x4001223C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC3_JDR1_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR1;

  /** 
  * name: JDR2
  * description: injected data register x
  * address: 0x40012240
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC3_JDR2_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR2;

  /** 
  * name: JDR3
  * description: injected data register x
  * address: 0x40012244
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC3_JDR3_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR3;

  /** 
  * name: JDR4
  * description: injected data register x
  * address: 0x40012248
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC3_JDR4_t {
    uint32_t JDATA : 16;  ///< Injected data, reset value: 0x0
  } JDR4;

  /** 
  * name: DR
  * description: regular data register
  * address: 0x4001224C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct ADC3_DR_t {
    uint32_t DATA : 16;  ///< Regular data, reset value: 0x0
  } DR;

} ADC3_t;


/** 
*  name: C_ADC
*  description: Common ADC registers
*  group: ADC
*  address: 0x40012300
*/
typedef struct{
  /** 
  * name: CSR
  * description: ADC Common status register
  * address: 0x40012300
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct C_ADC_CSR_t {
    uint32_t AWD1 : 1;  ///< Analog watchdog flag of ADC 1, reset value: 0x0
    uint32_t EOC1 : 1;  ///< End of conversion of ADC 1, reset value: 0x0
    uint32_t JEOC1 : 1;  ///< Injected channel end of conversion of ADC 1, reset value: 0x0
    uint32_t JSTRT1 : 1;  ///< Injected channel Start flag of ADC 1, reset value: 0x0
    uint32_t STRT1 : 1;  ///< Regular channel Start flag of ADC 1, reset value: 0x0
    uint32_t OVR1 : 1;  ///< Overrun flag of ADC 1, reset value: 0x0
    uint32_t _RESERVED_242 : 2;
    uint32_t AWD2 : 1;  ///< Analog watchdog flag of ADC 2, reset value: 0x0
    uint32_t EOC2 : 1;  ///< End of conversion of ADC 2, reset value: 0x0
    uint32_t JEOC2 : 1;  ///< Injected channel end of conversion of ADC 2, reset value: 0x0
    uint32_t JSTRT2 : 1;  ///< Injected channel Start flag of ADC 2, reset value: 0x0
    uint32_t STRT2 : 1;  ///< Regular channel Start flag of ADC 2, reset value: 0x0
    uint32_t OVR2 : 1;  ///< Overrun flag of ADC 2, reset value: 0x0
    uint32_t _RESERVED_243 : 2;
    uint32_t AWD3 : 1;  ///< Analog watchdog flag of ADC 3, reset value: 0x0
    uint32_t EOC3 : 1;  ///< End of conversion of ADC 3, reset value: 0x0
    uint32_t JEOC3 : 1;  ///< Injected channel end of conversion of ADC 3, reset value: 0x0
    uint32_t JSTRT3 : 1;  ///< Injected channel Start flag of ADC 3, reset value: 0x0
    uint32_t STRT3 : 1;  ///< Regular channel Start flag of ADC 3, reset value: 0x0
    uint32_t OVR3 : 1;  ///< Overrun flag of ADC3, reset value: 0x0
  } CSR;

  /** 
  * name: CCR
  * description: ADC common control register
  * address: 0x40012304
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct C_ADC_CCR_t {
    uint32_t MULT : 5;  ///< Multi ADC mode selection, reset value: 0x0
    uint32_t _RESERVED_244 : 3;
    uint32_t DELAY : 4;  ///< Delay between 2 sampling phases, reset value: 0x0
    uint32_t _RESERVED_245 : 1;
    uint32_t DDS : 1;  ///< DMA disable selection for multi-ADC mode, reset value: 0x0
    uint32_t DMA : 2;  ///< Direct memory access mode for multi ADC mode, reset value: 0x0
    uint32_t ADCPRE : 2;  ///< ADC prescaler, reset value: 0x0
    uint32_t _RESERVED_246 : 4;
    uint32_t VBATE : 1;  ///< VBAT enable, reset value: 0x0
    uint32_t TSVREFE : 1;  ///< Temperature sensor and VREFINT enable, reset value: 0x0
  } CCR;

  /** 
  * name: CDR
  * description: ADC common regular data register for dual and triple modes
  * address: 0x40012308
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct C_ADC_CDR_t {
    uint32_t DATA1 : 16;  ///< 1st data item of a pair of regular conversions, reset value: 0x0
    uint32_t DATA2 : 16;  ///< 2nd data item of a pair of regular conversions, reset value: 0x0
  } CDR;

} C_ADC_t;


/** 
*  name: SDIO
*  description: Secure digital input/output interface
*  group: SDIO
*  address: 0x40012C00
*/
typedef struct{
  /** 
  * name: POWER
  * description: power control register
  * address: 0x40012C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_POWER_t {
    uint32_t PWRCTRL : 2;  ///< PWRCTRL, reset value: 0x0
  } POWER;

  /** 
  * name: CLKCR
  * description: SDI clock control register
  * address: 0x40012C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_CLKCR_t {
    uint32_t CLKDIV : 8;  ///< Clock divide factor, reset value: 0x0
    uint32_t CLKEN : 1;  ///< Clock enable bit, reset value: 0x0
    uint32_t PWRSAV : 1;  ///< Power saving configuration bit, reset value: 0x0
    uint32_t BYPASS : 1;  ///< Clock divider bypass enable bit, reset value: 0x0
    uint32_t WIDBUS : 2;  ///< Wide bus mode enable bit, reset value: 0x0
    uint32_t NEGEDGE : 1;  ///< SDIO_CK dephasing selection bit, reset value: 0x0
    uint32_t HWFC_EN : 1;  ///< HW Flow Control enable, reset value: 0x0
  } CLKCR;

  /** 
  * name: ARG
  * description: argument register
  * address: 0x40012C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_ARG_t {
    uint32_t CMDARG : 32;  ///< Command argument, reset value: 0x0
  } ARG;

  /** 
  * name: CMD
  * description: command register
  * address: 0x40012C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_CMD_t {
    uint32_t CMDINDEX : 6;  ///< Command index, reset value: 0x0
    uint32_t WAITRESP : 2;  ///< Wait for response bits, reset value: 0x0
    uint32_t WAITINT : 1;  ///< CPSM waits for interrupt request, reset value: 0x0
    uint32_t WAITPEND : 1;  ///< CPSM Waits for ends of data transfer (CmdPend internal signal)., reset value: 0x0
    uint32_t CPSMEN : 1;  ///< Command path state machine (CPSM) Enable bit, reset value: 0x0
    uint32_t SDIOSuspend : 1;  ///< SD I/O suspend command, reset value: 0x0
    uint32_t ENCMDcompl : 1;  ///< Enable CMD completion, reset value: 0x0
    uint32_t nIEN : 1;  ///< not Interrupt Enable, reset value: 0x0
    uint32_t CE_ATACMD : 1;  ///< CE-ATA command, reset value: 0x0
  } CMD;

  /** 
  * name: RESPCMD
  * description: command response register
  * address: 0x40012C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_RESPCMD_t {
    uint32_t RESPCMD : 6;  ///< Response command index, reset value: 0x0
  } RESPCMD;

  /** 
  * name: RESP1
  * description: response 1..4 register
  * address: 0x40012C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_RESP1_t {
    uint32_t CARDSTATUS1 : 32;  ///< see Table 132., reset value: 0x0
  } RESP1;

  /** 
  * name: RESP2
  * description: response 1..4 register
  * address: 0x40012C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_RESP2_t {
    uint32_t CARDSTATUS2 : 32;  ///< see Table 132., reset value: 0x0
  } RESP2;

  /** 
  * name: RESP3
  * description: response 1..4 register
  * address: 0x40012C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_RESP3_t {
    uint32_t CARDSTATUS3 : 32;  ///< see Table 132., reset value: 0x0
  } RESP3;

  /** 
  * name: RESP4
  * description: response 1..4 register
  * address: 0x40012C20
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_RESP4_t {
    uint32_t CARDSTATUS4 : 32;  ///< see Table 132., reset value: 0x0
  } RESP4;

  /** 
  * name: DTIMER
  * description: data timer register
  * address: 0x40012C24
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_DTIMER_t {
    uint32_t DATATIME : 32;  ///< Data timeout period, reset value: 0x0
  } DTIMER;

  /** 
  * name: DLEN
  * description: data length register
  * address: 0x40012C28
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_DLEN_t {
    uint32_t DATALENGTH : 25;  ///< Data length value, reset value: 0x0
  } DLEN;

  /** 
  * name: DCTRL
  * description: data control register
  * address: 0x40012C2C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_DCTRL_t {
    uint32_t DTEN : 1;  ///< DTEN, reset value: 0x0
    uint32_t DTDIR : 1;  ///< Data transfer direction selection, reset value: 0x0
    uint32_t DTMODE : 1;  ///< Data transfer mode selection 1: Stream or SDIO multibyte data transfer., reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA enable bit, reset value: 0x0
    uint32_t DBLOCKSIZE : 4;  ///< Data block size, reset value: 0x0
    uint32_t RWSTART : 1;  ///< Read wait start, reset value: 0x0
    uint32_t RWSTOP : 1;  ///< Read wait stop, reset value: 0x0
    uint32_t RWMOD : 1;  ///< Read wait mode, reset value: 0x0
    uint32_t SDIOEN : 1;  ///< SD I/O enable functions, reset value: 0x0
  } DCTRL;

  /** 
  * name: DCOUNT
  * description: data counter register
  * address: 0x40012C30
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_DCOUNT_t {
    uint32_t DATACOUNT : 25;  ///< Data count value, reset value: 0x0
  } DCOUNT;

  /** 
  * name: STA
  * description: status register
  * address: 0x40012C34
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_STA_t {
    uint32_t CCRCFAIL : 1;  ///< Command response received (CRC check failed), reset value: 0x0
    uint32_t DCRCFAIL : 1;  ///< Data block sent/received (CRC check failed), reset value: 0x0
    uint32_t CTIMEOUT : 1;  ///< Command response timeout, reset value: 0x0
    uint32_t DTIMEOUT : 1;  ///< Data timeout, reset value: 0x0
    uint32_t TXUNDERR : 1;  ///< Transmit FIFO underrun error, reset value: 0x0
    uint32_t RXOVERR : 1;  ///< Received FIFO overrun error, reset value: 0x0
    uint32_t CMDREND : 1;  ///< Command response received (CRC check passed), reset value: 0x0
    uint32_t CMDSENT : 1;  ///< Command sent (no response required), reset value: 0x0
    uint32_t DATAEND : 1;  ///< Data end (data counter, SDIDCOUNT, is zero), reset value: 0x0
    uint32_t STBITERR : 1;  ///< Start bit not detected on all data signals in wide bus mode, reset value: 0x0
    uint32_t DBCKEND : 1;  ///< Data block sent/received (CRC check passed), reset value: 0x0
    uint32_t CMDACT : 1;  ///< Command transfer in progress, reset value: 0x0
    uint32_t TXACT : 1;  ///< Data transmit in progress, reset value: 0x0
    uint32_t RXACT : 1;  ///< Data receive in progress, reset value: 0x0
    uint32_t TXFIFOHE : 1;  ///< Transmit FIFO half empty: at least 8 words can be written into the FIFO, reset value: 0x0
    uint32_t RXFIFOHF : 1;  ///< Receive FIFO half full: there are at least 8 words in the FIFO, reset value: 0x0
    uint32_t TXFIFOF : 1;  ///< Transmit FIFO full, reset value: 0x0
    uint32_t RXFIFOF : 1;  ///< Receive FIFO full, reset value: 0x0
    uint32_t TXFIFOE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t RXFIFOE : 1;  ///< Receive FIFO empty, reset value: 0x0
    uint32_t TXDAVL : 1;  ///< Data available in transmit FIFO, reset value: 0x0
    uint32_t RXDAVL : 1;  ///< Data available in receive FIFO, reset value: 0x0
    uint32_t SDIOIT : 1;  ///< SDIO interrupt received, reset value: 0x0
    uint32_t CEATAEND : 1;  ///< CE-ATA command completion signal received for CMD61, reset value: 0x0
  } STA;

  /** 
  * name: ICR
  * description: interrupt clear register
  * address: 0x40012C38
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_ICR_t {
    uint32_t CCRCFAILC : 1;  ///< CCRCFAIL flag clear bit, reset value: 0x0
    uint32_t DCRCFAILC : 1;  ///< DCRCFAIL flag clear bit, reset value: 0x0
    uint32_t CTIMEOUTC : 1;  ///< CTIMEOUT flag clear bit, reset value: 0x0
    uint32_t DTIMEOUTC : 1;  ///< DTIMEOUT flag clear bit, reset value: 0x0
    uint32_t TXUNDERRC : 1;  ///< TXUNDERR flag clear bit, reset value: 0x0
    uint32_t RXOVERRC : 1;  ///< RXOVERR flag clear bit, reset value: 0x0
    uint32_t CMDRENDC : 1;  ///< CMDREND flag clear bit, reset value: 0x0
    uint32_t CMDSENTC : 1;  ///< CMDSENT flag clear bit, reset value: 0x0
    uint32_t DATAENDC : 1;  ///< DATAEND flag clear bit, reset value: 0x0
    uint32_t STBITERRC : 1;  ///< STBITERR flag clear bit, reset value: 0x0
    uint32_t DBCKENDC : 1;  ///< DBCKEND flag clear bit, reset value: 0x0
    uint32_t _RESERVED_247 : 11;
    uint32_t SDIOITC : 1;  ///< SDIOIT flag clear bit, reset value: 0x0
    uint32_t CEATAENDC : 1;  ///< CEATAEND flag clear bit, reset value: 0x0
  } ICR;

  /** 
  * name: MASK
  * description: mask register
  * address: 0x40012C3C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_MASK_t {
    uint32_t CCRCFAILIE : 1;  ///< Command CRC fail interrupt enable, reset value: 0x0
    uint32_t DCRCFAILIE : 1;  ///< Data CRC fail interrupt enable, reset value: 0x0
    uint32_t CTIMEOUTIE : 1;  ///< Command timeout interrupt enable, reset value: 0x0
    uint32_t DTIMEOUTIE : 1;  ///< Data timeout interrupt enable, reset value: 0x0
    uint32_t TXUNDERRIE : 1;  ///< Tx FIFO underrun error interrupt enable, reset value: 0x0
    uint32_t RXOVERRIE : 1;  ///< Rx FIFO overrun error interrupt enable, reset value: 0x0
    uint32_t CMDRENDIE : 1;  ///< Command response received interrupt enable, reset value: 0x0
    uint32_t CMDSENTIE : 1;  ///< Command sent interrupt enable, reset value: 0x0
    uint32_t DATAENDIE : 1;  ///< Data end interrupt enable, reset value: 0x0
    uint32_t STBITERRIE : 1;  ///< Start bit error interrupt enable, reset value: 0x0
    uint32_t DBCKENDIE : 1;  ///< Data block end interrupt enable, reset value: 0x0
    uint32_t CMDACTIE : 1;  ///< Command acting interrupt enable, reset value: 0x0
    uint32_t TXACTIE : 1;  ///< Data transmit acting interrupt enable, reset value: 0x0
    uint32_t RXACTIE : 1;  ///< Data receive acting interrupt enable, reset value: 0x0
    uint32_t TXFIFOHEIE : 1;  ///< Tx FIFO half empty interrupt enable, reset value: 0x0
    uint32_t RXFIFOHFIE : 1;  ///< Rx FIFO half full interrupt enable, reset value: 0x0
    uint32_t TXFIFOFIE : 1;  ///< Tx FIFO full interrupt enable, reset value: 0x0
    uint32_t RXFIFOFIE : 1;  ///< Rx FIFO full interrupt enable, reset value: 0x0
    uint32_t TXFIFOEIE : 1;  ///< Tx FIFO empty interrupt enable, reset value: 0x0
    uint32_t RXFIFOEIE : 1;  ///< Rx FIFO empty interrupt enable, reset value: 0x0
    uint32_t TXDAVLIE : 1;  ///< Data available in Tx FIFO interrupt enable, reset value: 0x0
    uint32_t RXDAVLIE : 1;  ///< Data available in Rx FIFO interrupt enable, reset value: 0x0
    uint32_t SDIOITIE : 1;  ///< SDIO mode interrupt received interrupt enable, reset value: 0x0
    uint32_t CEATAENDIE : 1;  ///< CE-ATA command completion signal received interrupt enable, reset value: 0x0
  } MASK;

  /** 
  * name: FIFOCNT
  * description: FIFO counter register
  * address: 0x40012C48
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SDIO_FIFOCNT_t {
    uint32_t FIFOCOUNT : 24;  ///< Remaining number of words to be written to or read from the FIFO., reset value: 0x0
  } FIFOCNT;

  const uint8_t _RESERVED_248[24];

  /** 
  * name: FIFO
  * description: data FIFO register
  * address: 0x40012C80
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SDIO_FIFO_t {
    uint32_t FIFOData : 32;  ///< Receive and transmit FIFO data, reset value: 0x0
  } FIFO;

} SDIO_t;


/** 
*  name: SPI1
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40013000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40013000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI1_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40013004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI1_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_249 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40013008
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI1_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4001300C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI1_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40013010
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI1_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40013014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI1_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40013018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI1_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4001301C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI1_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_250 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40013020
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI1_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI1_t;


/** 
*  name: SPI4
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40013400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40013400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI4_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40013404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI4_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_251 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40013408
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI4_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4001340C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI4_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40013410
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI4_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40013414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI4_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40013418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI4_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4001341C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI4_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_252 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40013420
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI4_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI4_t;


/** 
*  name: SYSCFG
*  description: System configuration controller
*  group: SYSCFG
*  address: 0x40013800
*/
typedef struct{
  /** 
  * name: MEMRM
  * description: memory remap register
  * address: 0x40013800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_MEMRM_t {
    uint32_t MEM_MODE : 2;  ///< MEM_MODE, reset value: 0x0
  } MEMRM;

  /** 
  * name: PMC
  * description: peripheral mode configuration register
  * address: 0x40013804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_PMC_t {
    uint32_t _RESERVED_253 : 23;
    uint32_t MII_RMII_SEL : 1;  ///< Ethernet PHY interface selection, reset value: 0x0
  } PMC;

  /** 
  * name: EXTICR1
  * description: external interrupt configuration register 1
  * address: 0x40013808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_EXTICR1_t {
    uint32_t EXTI0 : 4;  ///< EXTI x configuration (x = 0 to 3), reset value: 0x0
    uint32_t EXTI1 : 4;  ///< EXTI x configuration (x = 0 to 3), reset value: 0x0
    uint32_t EXTI2 : 4;  ///< EXTI x configuration (x = 0 to 3), reset value: 0x0
    uint32_t EXTI3 : 4;  ///< EXTI x configuration (x = 0 to 3), reset value: 0x0
  } EXTICR1;

  /** 
  * name: EXTICR2
  * description: external interrupt configuration register 2
  * address: 0x4001380C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_EXTICR2_t {
    uint32_t EXTI4 : 4;  ///< EXTI x configuration (x = 4 to 7), reset value: 0x0
    uint32_t EXTI5 : 4;  ///< EXTI x configuration (x = 4 to 7), reset value: 0x0
    uint32_t EXTI6 : 4;  ///< EXTI x configuration (x = 4 to 7), reset value: 0x0
    uint32_t EXTI7 : 4;  ///< EXTI x configuration (x = 4 to 7), reset value: 0x0
  } EXTICR2;

  /** 
  * name: EXTICR3
  * description: external interrupt configuration register 3
  * address: 0x40013810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_EXTICR3_t {
    uint32_t EXTI8 : 4;  ///< EXTI x configuration (x = 8 to 11), reset value: 0x0
    uint32_t EXTI9 : 4;  ///< EXTI x configuration (x = 8 to 11), reset value: 0x0
    uint32_t EXTI10 : 4;  ///< EXTI10, reset value: 0x0
    uint32_t EXTI11 : 4;  ///< EXTI x configuration (x = 8 to 11), reset value: 0x0
  } EXTICR3;

  /** 
  * name: EXTICR4
  * description: external interrupt configuration register 4
  * address: 0x40013814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SYSCFG_EXTICR4_t {
    uint32_t EXTI12 : 4;  ///< EXTI x configuration (x = 12 to 15), reset value: 0x0
    uint32_t EXTI13 : 4;  ///< EXTI x configuration (x = 12 to 15), reset value: 0x0
    uint32_t EXTI14 : 4;  ///< EXTI x configuration (x = 12 to 15), reset value: 0x0
    uint32_t EXTI15 : 4;  ///< EXTI x configuration (x = 12 to 15), reset value: 0x0
  } EXTICR4;

  /** 
  * name: CMPCR
  * description: Compensation cell control register
  * address: 0x40013820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SYSCFG_CMPCR_t {
    uint32_t CMP_PD : 1;  ///< Compensation cell power-down, reset value: 0x0
    uint32_t _RESERVED_254 : 7;
    uint32_t READY : 1;  ///< READY, reset value: 0x0
  } CMPCR;

} SYSCFG_t;


/** 
*  name: EXTI
*  description: External interrupt/event controller
*  group: EXTI
*  address: 0x40013C00
*/
typedef struct{
  /** 
  * name: IMR
  * description: Interrupt mask register (EXTI_IMR)
  * address: 0x40013C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_IMR_t {
    uint32_t MR0 : 1;  ///< Interrupt Mask on line 0, reset value: 0x0
    uint32_t MR1 : 1;  ///< Interrupt Mask on line 1, reset value: 0x0
    uint32_t MR2 : 1;  ///< Interrupt Mask on line 2, reset value: 0x0
    uint32_t MR3 : 1;  ///< Interrupt Mask on line 3, reset value: 0x0
    uint32_t MR4 : 1;  ///< Interrupt Mask on line 4, reset value: 0x0
    uint32_t MR5 : 1;  ///< Interrupt Mask on line 5, reset value: 0x0
    uint32_t MR6 : 1;  ///< Interrupt Mask on line 6, reset value: 0x0
    uint32_t MR7 : 1;  ///< Interrupt Mask on line 7, reset value: 0x0
    uint32_t MR8 : 1;  ///< Interrupt Mask on line 8, reset value: 0x0
    uint32_t MR9 : 1;  ///< Interrupt Mask on line 9, reset value: 0x0
    uint32_t MR10 : 1;  ///< Interrupt Mask on line 10, reset value: 0x0
    uint32_t MR11 : 1;  ///< Interrupt Mask on line 11, reset value: 0x0
    uint32_t MR12 : 1;  ///< Interrupt Mask on line 12, reset value: 0x0
    uint32_t MR13 : 1;  ///< Interrupt Mask on line 13, reset value: 0x0
    uint32_t MR14 : 1;  ///< Interrupt Mask on line 14, reset value: 0x0
    uint32_t MR15 : 1;  ///< Interrupt Mask on line 15, reset value: 0x0
    uint32_t MR16 : 1;  ///< Interrupt Mask on line 16, reset value: 0x0
    uint32_t MR17 : 1;  ///< Interrupt Mask on line 17, reset value: 0x0
    uint32_t MR18 : 1;  ///< Interrupt Mask on line 18, reset value: 0x0
    uint32_t MR19 : 1;  ///< Interrupt Mask on line 19, reset value: 0x0
    uint32_t MR20 : 1;  ///< Interrupt Mask on line 20, reset value: 0x0
    uint32_t MR21 : 1;  ///< Interrupt Mask on line 21, reset value: 0x0
    uint32_t MR22 : 1;  ///< Interrupt Mask on line 22, reset value: 0x0
  } IMR;

  /** 
  * name: EMR
  * description: Event mask register (EXTI_EMR)
  * address: 0x40013C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_EMR_t {
    uint32_t MR0 : 1;  ///< Event Mask on line 0, reset value: 0x0
    uint32_t MR1 : 1;  ///< Event Mask on line 1, reset value: 0x0
    uint32_t MR2 : 1;  ///< Event Mask on line 2, reset value: 0x0
    uint32_t MR3 : 1;  ///< Event Mask on line 3, reset value: 0x0
    uint32_t MR4 : 1;  ///< Event Mask on line 4, reset value: 0x0
    uint32_t MR5 : 1;  ///< Event Mask on line 5, reset value: 0x0
    uint32_t MR6 : 1;  ///< Event Mask on line 6, reset value: 0x0
    uint32_t MR7 : 1;  ///< Event Mask on line 7, reset value: 0x0
    uint32_t MR8 : 1;  ///< Event Mask on line 8, reset value: 0x0
    uint32_t MR9 : 1;  ///< Event Mask on line 9, reset value: 0x0
    uint32_t MR10 : 1;  ///< Event Mask on line 10, reset value: 0x0
    uint32_t MR11 : 1;  ///< Event Mask on line 11, reset value: 0x0
    uint32_t MR12 : 1;  ///< Event Mask on line 12, reset value: 0x0
    uint32_t MR13 : 1;  ///< Event Mask on line 13, reset value: 0x0
    uint32_t MR14 : 1;  ///< Event Mask on line 14, reset value: 0x0
    uint32_t MR15 : 1;  ///< Event Mask on line 15, reset value: 0x0
    uint32_t MR16 : 1;  ///< Event Mask on line 16, reset value: 0x0
    uint32_t MR17 : 1;  ///< Event Mask on line 17, reset value: 0x0
    uint32_t MR18 : 1;  ///< Event Mask on line 18, reset value: 0x0
    uint32_t MR19 : 1;  ///< Event Mask on line 19, reset value: 0x0
    uint32_t MR20 : 1;  ///< Event Mask on line 20, reset value: 0x0
    uint32_t MR21 : 1;  ///< Event Mask on line 21, reset value: 0x0
    uint32_t MR22 : 1;  ///< Event Mask on line 22, reset value: 0x0
  } EMR;

  /** 
  * name: RTSR
  * description: Rising Trigger selection register (EXTI_RTSR)
  * address: 0x40013C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_RTSR_t {
    uint32_t TR0 : 1;  ///< Rising trigger event configuration of line 0, reset value: 0x0
    uint32_t TR1 : 1;  ///< Rising trigger event configuration of line 1, reset value: 0x0
    uint32_t TR2 : 1;  ///< Rising trigger event configuration of line 2, reset value: 0x0
    uint32_t TR3 : 1;  ///< Rising trigger event configuration of line 3, reset value: 0x0
    uint32_t TR4 : 1;  ///< Rising trigger event configuration of line 4, reset value: 0x0
    uint32_t TR5 : 1;  ///< Rising trigger event configuration of line 5, reset value: 0x0
    uint32_t TR6 : 1;  ///< Rising trigger event configuration of line 6, reset value: 0x0
    uint32_t TR7 : 1;  ///< Rising trigger event configuration of line 7, reset value: 0x0
    uint32_t TR8 : 1;  ///< Rising trigger event configuration of line 8, reset value: 0x0
    uint32_t TR9 : 1;  ///< Rising trigger event configuration of line 9, reset value: 0x0
    uint32_t TR10 : 1;  ///< Rising trigger event configuration of line 10, reset value: 0x0
    uint32_t TR11 : 1;  ///< Rising trigger event configuration of line 11, reset value: 0x0
    uint32_t TR12 : 1;  ///< Rising trigger event configuration of line 12, reset value: 0x0
    uint32_t TR13 : 1;  ///< Rising trigger event configuration of line 13, reset value: 0x0
    uint32_t TR14 : 1;  ///< Rising trigger event configuration of line 14, reset value: 0x0
    uint32_t TR15 : 1;  ///< Rising trigger event configuration of line 15, reset value: 0x0
    uint32_t TR16 : 1;  ///< Rising trigger event configuration of line 16, reset value: 0x0
    uint32_t TR17 : 1;  ///< Rising trigger event configuration of line 17, reset value: 0x0
    uint32_t TR18 : 1;  ///< Rising trigger event configuration of line 18, reset value: 0x0
    uint32_t TR19 : 1;  ///< Rising trigger event configuration of line 19, reset value: 0x0
    uint32_t TR20 : 1;  ///< Rising trigger event configuration of line 20, reset value: 0x0
    uint32_t TR21 : 1;  ///< Rising trigger event configuration of line 21, reset value: 0x0
    uint32_t TR22 : 1;  ///< Rising trigger event configuration of line 22, reset value: 0x0
  } RTSR;

  /** 
  * name: FTSR
  * description: Falling Trigger selection register (EXTI_FTSR)
  * address: 0x40013C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_FTSR_t {
    uint32_t TR0 : 1;  ///< Falling trigger event configuration of line 0, reset value: 0x0
    uint32_t TR1 : 1;  ///< Falling trigger event configuration of line 1, reset value: 0x0
    uint32_t TR2 : 1;  ///< Falling trigger event configuration of line 2, reset value: 0x0
    uint32_t TR3 : 1;  ///< Falling trigger event configuration of line 3, reset value: 0x0
    uint32_t TR4 : 1;  ///< Falling trigger event configuration of line 4, reset value: 0x0
    uint32_t TR5 : 1;  ///< Falling trigger event configuration of line 5, reset value: 0x0
    uint32_t TR6 : 1;  ///< Falling trigger event configuration of line 6, reset value: 0x0
    uint32_t TR7 : 1;  ///< Falling trigger event configuration of line 7, reset value: 0x0
    uint32_t TR8 : 1;  ///< Falling trigger event configuration of line 8, reset value: 0x0
    uint32_t TR9 : 1;  ///< Falling trigger event configuration of line 9, reset value: 0x0
    uint32_t TR10 : 1;  ///< Falling trigger event configuration of line 10, reset value: 0x0
    uint32_t TR11 : 1;  ///< Falling trigger event configuration of line 11, reset value: 0x0
    uint32_t TR12 : 1;  ///< Falling trigger event configuration of line 12, reset value: 0x0
    uint32_t TR13 : 1;  ///< Falling trigger event configuration of line 13, reset value: 0x0
    uint32_t TR14 : 1;  ///< Falling trigger event configuration of line 14, reset value: 0x0
    uint32_t TR15 : 1;  ///< Falling trigger event configuration of line 15, reset value: 0x0
    uint32_t TR16 : 1;  ///< Falling trigger event configuration of line 16, reset value: 0x0
    uint32_t TR17 : 1;  ///< Falling trigger event configuration of line 17, reset value: 0x0
    uint32_t TR18 : 1;  ///< Falling trigger event configuration of line 18, reset value: 0x0
    uint32_t TR19 : 1;  ///< Falling trigger event configuration of line 19, reset value: 0x0
    uint32_t TR20 : 1;  ///< Falling trigger event configuration of line 20, reset value: 0x0
    uint32_t TR21 : 1;  ///< Falling trigger event configuration of line 21, reset value: 0x0
    uint32_t TR22 : 1;  ///< Falling trigger event configuration of line 22, reset value: 0x0
  } FTSR;

  /** 
  * name: SWIER
  * description: Software interrupt event register (EXTI_SWIER)
  * address: 0x40013C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_SWIER_t {
    uint32_t SWIER0 : 1;  ///< Software Interrupt on line 0, reset value: 0x0
    uint32_t SWIER1 : 1;  ///< Software Interrupt on line 1, reset value: 0x0
    uint32_t SWIER2 : 1;  ///< Software Interrupt on line 2, reset value: 0x0
    uint32_t SWIER3 : 1;  ///< Software Interrupt on line 3, reset value: 0x0
    uint32_t SWIER4 : 1;  ///< Software Interrupt on line 4, reset value: 0x0
    uint32_t SWIER5 : 1;  ///< Software Interrupt on line 5, reset value: 0x0
    uint32_t SWIER6 : 1;  ///< Software Interrupt on line 6, reset value: 0x0
    uint32_t SWIER7 : 1;  ///< Software Interrupt on line 7, reset value: 0x0
    uint32_t SWIER8 : 1;  ///< Software Interrupt on line 8, reset value: 0x0
    uint32_t SWIER9 : 1;  ///< Software Interrupt on line 9, reset value: 0x0
    uint32_t SWIER10 : 1;  ///< Software Interrupt on line 10, reset value: 0x0
    uint32_t SWIER11 : 1;  ///< Software Interrupt on line 11, reset value: 0x0
    uint32_t SWIER12 : 1;  ///< Software Interrupt on line 12, reset value: 0x0
    uint32_t SWIER13 : 1;  ///< Software Interrupt on line 13, reset value: 0x0
    uint32_t SWIER14 : 1;  ///< Software Interrupt on line 14, reset value: 0x0
    uint32_t SWIER15 : 1;  ///< Software Interrupt on line 15, reset value: 0x0
    uint32_t SWIER16 : 1;  ///< Software Interrupt on line 16, reset value: 0x0
    uint32_t SWIER17 : 1;  ///< Software Interrupt on line 17, reset value: 0x0
    uint32_t SWIER18 : 1;  ///< Software Interrupt on line 18, reset value: 0x0
    uint32_t SWIER19 : 1;  ///< Software Interrupt on line 19, reset value: 0x0
    uint32_t SWIER20 : 1;  ///< Software Interrupt on line 20, reset value: 0x0
    uint32_t SWIER21 : 1;  ///< Software Interrupt on line 21, reset value: 0x0
    uint32_t SWIER22 : 1;  ///< Software Interrupt on line 22, reset value: 0x0
  } SWIER;

  /** 
  * name: PR
  * description: Pending register (EXTI_PR)
  * address: 0x40013C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct EXTI_PR_t {
    uint32_t PR0 : 1;  ///< Pending bit 0, reset value: 0x0
    uint32_t PR1 : 1;  ///< Pending bit 1, reset value: 0x0
    uint32_t PR2 : 1;  ///< Pending bit 2, reset value: 0x0
    uint32_t PR3 : 1;  ///< Pending bit 3, reset value: 0x0
    uint32_t PR4 : 1;  ///< Pending bit 4, reset value: 0x0
    uint32_t PR5 : 1;  ///< Pending bit 5, reset value: 0x0
    uint32_t PR6 : 1;  ///< Pending bit 6, reset value: 0x0
    uint32_t PR7 : 1;  ///< Pending bit 7, reset value: 0x0
    uint32_t PR8 : 1;  ///< Pending bit 8, reset value: 0x0
    uint32_t PR9 : 1;  ///< Pending bit 9, reset value: 0x0
    uint32_t PR10 : 1;  ///< Pending bit 10, reset value: 0x0
    uint32_t PR11 : 1;  ///< Pending bit 11, reset value: 0x0
    uint32_t PR12 : 1;  ///< Pending bit 12, reset value: 0x0
    uint32_t PR13 : 1;  ///< Pending bit 13, reset value: 0x0
    uint32_t PR14 : 1;  ///< Pending bit 14, reset value: 0x0
    uint32_t PR15 : 1;  ///< Pending bit 15, reset value: 0x0
    uint32_t PR16 : 1;  ///< Pending bit 16, reset value: 0x0
    uint32_t PR17 : 1;  ///< Pending bit 17, reset value: 0x0
    uint32_t PR18 : 1;  ///< Pending bit 18, reset value: 0x0
    uint32_t PR19 : 1;  ///< Pending bit 19, reset value: 0x0
    uint32_t PR20 : 1;  ///< Pending bit 20, reset value: 0x0
    uint32_t PR21 : 1;  ///< Pending bit 21, reset value: 0x0
    uint32_t PR22 : 1;  ///< Pending bit 22, reset value: 0x0
  } PR;

} EXTI_t;


/** 
*  name: TIM9
*  description: General purpose timers
*  group: TIM
*  address: 0x40014000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40014000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t OPM : 1;  ///< One-pulse mode, reset value: 0x0
    uint32_t _RESERVED_255 : 3;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40014004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CR2_t {
    uint32_t _RESERVED_256 : 4;
    uint32_t MMS : 3;  ///< Master mode selection, reset value: 0x0
  } CR2;

  /** 
  * name: SMCR
  * description: slave mode control register
  * address: 0x40014008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_SMCR_t {
    uint32_t SMS : 3;  ///< Slave mode selection, reset value: 0x0
    uint32_t _RESERVED_257 : 1;
    uint32_t TS : 3;  ///< Trigger selection, reset value: 0x0
    uint32_t MSM : 1;  ///< Master/Slave mode, reset value: 0x0
  } SMCR;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4001400C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
    uint32_t CC2IE : 1;  ///< Capture/Compare 2 interrupt enable, reset value: 0x0
    uint32_t _RESERVED_258 : 3;
    uint32_t TIE : 1;  ///< Trigger interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40014010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t CC2IF : 1;  ///< Capture/Compare 2 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_259 : 3;
    uint32_t TIF : 1;  ///< Trigger interrupt flag, reset value: 0x0
    uint32_t _RESERVED_260 : 2;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
    uint32_t CC2OF : 1;  ///< Capture/compare 2 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40014014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM9_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
    uint32_t CC2G : 1;  ///< Capture/compare 2 generation, reset value: 0x0
    uint32_t _RESERVED_261 : 3;
    uint32_t TG : 1;  ///< Trigger generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40014018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
    uint32_t _RESERVED_262 : 1;
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t OC2FE : 1;  ///< Output Compare 2 fast enable, reset value: 0x0
    uint32_t OC2PE : 1;  ///< Output Compare 2 preload enable, reset value: 0x0
    uint32_t OC2M : 3;  ///< Output Compare 2 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40014018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 3;  ///< Input capture 1 filter, reset value: 0x0
    uint32_t _RESERVED_263 : 1;
    uint32_t CC2S : 2;  ///< Capture/Compare 2 selection, reset value: 0x0
    uint32_t IC2PCS : 2;  ///< Input capture 2 prescaler, reset value: 0x0
    uint32_t IC2F : 3;  ///< Input capture 2 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40014020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_264 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t CC2E : 1;  ///< Capture/Compare 2 output enable, reset value: 0x0
    uint32_t CC2P : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
    uint32_t _RESERVED_265 : 1;
    uint32_t CC2NP : 1;  ///< Capture/Compare 2 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40014024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40014028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4001402C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40014034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: CCR2
  * description: capture/compare register 2
  * address: 0x40014038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM9_CCR2_t {
    uint32_t CCR2 : 16;  ///< Capture/Compare 2 value, reset value: 0x0
  } CCR2;

} TIM9_t;


/** 
*  name: TIM10
*  description: General-purpose-timers
*  group: TIM
*  address: 0x40014400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40014400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t _RESERVED_266 : 4;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4001440C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40014410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_267 : 7;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40014414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM10_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40014418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40014418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40014420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_268 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40014424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40014428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4001442C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40014434
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM10_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

} TIM10_t;


/** 
*  name: TIM11
*  description: General-purpose-timers
*  group: TIM
*  address: 0x40014800
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40014800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CR1_t {
    uint32_t CEN : 1;  ///< Counter enable, reset value: 0x0
    uint32_t UDIS : 1;  ///< Update disable, reset value: 0x0
    uint32_t URS : 1;  ///< Update request source, reset value: 0x0
    uint32_t _RESERVED_269 : 4;
    uint32_t ARPE : 1;  ///< Auto-reload preload enable, reset value: 0x0
    uint32_t CKD : 2;  ///< Clock division, reset value: 0x0
  } CR1;

  /** 
  * name: DIER
  * description: DMA/Interrupt enable register
  * address: 0x4001480C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_DIER_t {
    uint32_t UIE : 1;  ///< Update interrupt enable, reset value: 0x0
    uint32_t CC1IE : 1;  ///< Capture/Compare 1 interrupt enable, reset value: 0x0
  } DIER;

  /** 
  * name: SR
  * description: status register
  * address: 0x40014810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_SR_t {
    uint32_t UIF : 1;  ///< Update interrupt flag, reset value: 0x0
    uint32_t CC1IF : 1;  ///< Capture/compare 1 interrupt flag, reset value: 0x0
    uint32_t _RESERVED_270 : 7;
    uint32_t CC1OF : 1;  ///< Capture/Compare 1 overcapture flag, reset value: 0x0
  } SR;

  /** 
  * name: EGR
  * description: event generation register
  * address: 0x40014814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct TIM11_EGR_t {
    uint32_t UG : 1;  ///< Update generation, reset value: 0x0
    uint32_t CC1G : 1;  ///< Capture/compare 1 generation, reset value: 0x0
  } EGR;

  /** 
  * name: CCMR1_Output
  * description: capture/compare mode register 1 (output mode)
  * address: 0x40014818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CCMR1_Output_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t OC1FE : 1;  ///< Output Compare 1 fast enable, reset value: 0x0
    uint32_t OC1PE : 1;  ///< Output Compare 1 preload enable, reset value: 0x0
    uint32_t OC1M : 3;  ///< Output Compare 1 mode, reset value: 0x0
  } CCMR1_Output;

  /** 
  * name: CCMR1_Input
  * description: capture/compare mode register 1 (input mode)
  * address: 0x40014818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CCMR1_Input_t {
    uint32_t CC1S : 2;  ///< Capture/Compare 1 selection, reset value: 0x0
    uint32_t ICPCS : 2;  ///< Input capture 1 prescaler, reset value: 0x0
    uint32_t IC1F : 4;  ///< Input capture 1 filter, reset value: 0x0
  } CCMR1_Input;

  /** 
  * name: CCER
  * description: capture/compare enable register
  * address: 0x40014820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CCER_t {
    uint32_t CC1E : 1;  ///< Capture/Compare 1 output enable, reset value: 0x0
    uint32_t CC1P : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
    uint32_t _RESERVED_271 : 1;
    uint32_t CC1NP : 1;  ///< Capture/Compare 1 output Polarity, reset value: 0x0
  } CCER;

  /** 
  * name: CNT
  * description: counter
  * address: 0x40014824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CNT_t {
    uint32_t CNT : 16;  ///< counter value, reset value: 0x0
  } CNT;

  /** 
  * name: PSC
  * description: prescaler
  * address: 0x40014828
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_PSC_t {
    uint32_t PSC : 16;  ///< Prescaler value, reset value: 0x0
  } PSC;

  /** 
  * name: ARR
  * description: auto-reload register
  * address: 0x4001482C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_ARR_t {
    uint32_t ARR : 16;  ///< Auto-reload value, reset value: 0x0
  } ARR;

  /** 
  * name: CCR1
  * description: capture/compare register 1
  * address: 0x40014834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_CCR1_t {
    uint32_t CCR1 : 16;  ///< Capture/Compare 1 value, reset value: 0x0
  } CCR1;

  /** 
  * name: OR
  * description: option register
  * address: 0x40014850
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct TIM11_OR_t {
    uint32_t RMP : 2;  ///< Input 1 remapping capability, reset value: 0x0
  } OR;

} TIM11_t;


/** 
*  name: SPI5
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40015000
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40015000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI5_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40015004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI5_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_272 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40015008
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI5_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4001500C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI5_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40015010
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI5_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40015014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI5_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40015018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI5_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4001501C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI5_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_273 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40015020
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI5_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI5_t;


/** 
*  name: SPI6
*  description: Serial peripheral interface
*  group: SPI
*  address: 0x40015400
*/
typedef struct{
  /** 
  * name: CR1
  * description: control register 1
  * address: 0x40015400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI6_CR1_t {
    uint32_t CPHA : 1;  ///< Clock phase, reset value: 0x0
    uint32_t CPOL : 1;  ///< Clock polarity, reset value: 0x0
    uint32_t MSTR : 1;  ///< Master selection, reset value: 0x0
    uint32_t BR : 3;  ///< Baud rate control, reset value: 0x0
    uint32_t SPE : 1;  ///< SPI enable, reset value: 0x0
    uint32_t LSBFIRST : 1;  ///< Frame format, reset value: 0x0
    uint32_t SSI : 1;  ///< Internal slave select, reset value: 0x0
    uint32_t SSM : 1;  ///< Software slave management, reset value: 0x0
    uint32_t RXONLY : 1;  ///< Receive only, reset value: 0x0
    uint32_t DFF : 1;  ///< Data frame format, reset value: 0x0
    uint32_t CRCNEXT : 1;  ///< CRC transfer next, reset value: 0x0
    uint32_t CRCEN : 1;  ///< Hardware CRC calculation enable, reset value: 0x0
    uint32_t BIDIOE : 1;  ///< Output enable in bidirectional mode, reset value: 0x0
    uint32_t BIDIMODE : 1;  ///< Bidirectional data mode enable, reset value: 0x0
  } CR1;

  /** 
  * name: CR2
  * description: control register 2
  * address: 0x40015404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI6_CR2_t {
    uint32_t RXDMAEN : 1;  ///< Rx buffer DMA enable, reset value: 0x0
    uint32_t TXDMAEN : 1;  ///< Tx buffer DMA enable, reset value: 0x0
    uint32_t SSOE : 1;  ///< SS output enable, reset value: 0x0
    uint32_t _RESERVED_274 : 1;
    uint32_t FRF : 1;  ///< Frame format, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t RXNEIE : 1;  ///< RX buffer not empty interrupt enable, reset value: 0x0
    uint32_t TXEIE : 1;  ///< Tx buffer empty interrupt enable, reset value: 0x0
  } CR2;

  /** 
  * name: SR
  * description: status register
  * address: 0x40015408
  * offset: 0x8
  * reset value: 0x00000002
  * size: 0x20
  * access: 
  */
  struct SPI6_SR_t {
    uint32_t RXNE : 1;  ///< Receive buffer not empty, reset value: 0x0
    uint32_t TXE : 1;  ///< Transmit buffer empty, reset value: 0x1
    uint32_t CHSIDE : 1;  ///< Channel side, reset value: 0x0
    uint32_t UDR : 1;  ///< Underrun flag, reset value: 0x0
    uint32_t CRCERR : 1;  ///< CRC error flag, reset value: 0x0
    uint32_t MODF : 1;  ///< Mode fault, reset value: 0x0
    uint32_t OVR : 1;  ///< Overrun flag, reset value: 0x0
    uint32_t BSY : 1;  ///< Busy flag, reset value: 0x0
    uint32_t TIFRFE : 1;  ///< TI frame format error, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x4001540C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI6_DR_t {
    uint32_t DR : 16;  ///< Data register, reset value: 0x0
  } DR;

  /** 
  * name: CRCPR
  * description: CRC polynomial register
  * address: 0x40015410
  * offset: 0x10
  * reset value: 0x00000007
  * size: 0x20
  * access: read-write
  */
  struct SPI6_CRCPR_t {
    uint32_t CRCPOLY : 16;  ///< CRC polynomial register, reset value: 0x7
  } CRCPR;

  /** 
  * name: RXCRCR
  * description: RX CRC register
  * address: 0x40015414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI6_RXCRCR_t {
    uint32_t RxCRC : 16;  ///< Rx CRC register, reset value: 0x0
  } RXCRCR;

  /** 
  * name: TXCRCR
  * description: TX CRC register
  * address: 0x40015418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct SPI6_TXCRCR_t {
    uint32_t TxCRC : 16;  ///< Tx CRC register, reset value: 0x0
  } TXCRCR;

  /** 
  * name: I2SCFGR
  * description: I2S configuration register
  * address: 0x4001541C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SPI6_I2SCFGR_t {
    uint32_t CHLEN : 1;  ///< Channel length (number of bits per audio channel), reset value: 0x0
    uint32_t DATLEN : 2;  ///< Data length to be transferred, reset value: 0x0
    uint32_t CKPOL : 1;  ///< Steady state clock polarity, reset value: 0x0
    uint32_t I2SSTD : 2;  ///< I2S standard selection, reset value: 0x0
    uint32_t _RESERVED_275 : 1;
    uint32_t PCMSYNC : 1;  ///< PCM frame synchronization, reset value: 0x0
    uint32_t I2SCFG : 2;  ///< I2S configuration mode, reset value: 0x0
    uint32_t I2SE : 1;  ///< I2S Enable, reset value: 0x0
    uint32_t I2SMOD : 1;  ///< I2S mode selection, reset value: 0x0
  } I2SCFGR;

  /** 
  * name: I2SPR
  * description: I2S prescaler register
  * address: 0x40015420
  * offset: 0x20
  * reset value: 0x00000008
  * size: 0x20
  * access: read-write
  */
  struct SPI6_I2SPR_t {
    uint32_t I2SDIV : 8;  ///< I2S Linear prescaler, reset value: 0x8
    uint32_t ODD : 1;  ///< Odd factor for the prescaler, reset value: 0x0
    uint32_t MCKOE : 1;  ///< Master clock output enable, reset value: 0x0
  } I2SPR;

} SPI6_t;


/** 
*  name: SAI1
*  description: Serial audio interface
*  group: SAI1
*  address: 0x40015800
*/
typedef struct{
  const uint8_t _RESERVED_276[4];

  /** 
  * name: SAI_ACR1
  * description: SAI AConfiguration register 1
  * address: 0x40015804
  * offset: 0x4
  * reset value: 0x00000040
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_ACR1_t {
    uint32_t MODE : 2;  ///< Audio block mode, reset value: 0x0
    uint32_t PRTCFG : 2;  ///< Protocol configuration, reset value: 0x0
    uint32_t _RESERVED_277 : 1;
    uint32_t DS : 3;  ///< Data size, reset value: 0x2
    uint32_t LSBFIRST : 1;  ///< Least significant bit first, reset value: 0x0
    uint32_t CKSTR : 1;  ///< Clock strobing edge, reset value: 0x0
    uint32_t SYNCEN : 2;  ///< Synchronization enable, reset value: 0x0
    uint32_t MONO : 1;  ///< Mono mode, reset value: 0x0
    uint32_t OUTDRIV : 1;  ///< Output drive, reset value: 0x0
    uint32_t _RESERVED_278 : 2;
    uint32_t SAIAEN : 1;  ///< Audio block enable, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA enable, reset value: 0x0
    uint32_t _RESERVED_279 : 1;
    uint32_t NODIV : 1;  ///< No divider, reset value: 0x0
    uint32_t MCKDIV : 4;  ///< Master clock divider, reset value: 0x0
  } SAI_ACR1;

  /** 
  * name: SAI_ACR2
  * description: SAI AConfiguration register 2
  * address: 0x40015808
  * offset: 0x8
  * reset value: 0x00000040
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_ACR2_t {
    uint32_t FTH : 3;  ///< FIFO threshold, reset value: 0x0
    uint32_t FFLUSH : 1;  ///< FIFO flush, reset value: 0x0
    uint32_t TRIS : 1;  ///< Tristate management on data line, reset value: 0x0
    uint32_t MUTE : 1;  ///< Mute, reset value: 0x0
    uint32_t MUTEVAL : 1;  ///< Mute value, reset value: 0x1
    uint32_t MUTECNT : 6;  ///< Mute counter, reset value: 0x0
    uint32_t CPL : 1;  ///< Complement bit, reset value: 0x0
    uint32_t COMP : 2;  ///< Companding mode, reset value: 0x0
  } SAI_ACR2;

  /** 
  * name: SAI_AFRCR
  * description: SAI AFrame configuration register
  * address: 0x4001580C
  * offset: 0xC
  * reset value: 0x00000007
  * size: 0x20
  * access: 
  */
  struct SAI1_SAI_AFRCR_t {
    uint32_t FRL : 8;  ///< Frame length, reset value: 0x7
    uint32_t FSALL : 7;  ///< Frame synchronization active level length, reset value: 0x0
    uint32_t _RESERVED_280 : 1;
    uint32_t FSDEF : 1;  ///< Frame synchronization definition, reset value: 0x0
    uint32_t FSPOL : 1;  ///< Frame synchronization polarity, reset value: 0x0
    uint32_t FSOFF : 1;  ///< Frame synchronization offset, reset value: 0x0
  } SAI_AFRCR;

  /** 
  * name: SAI_ASLOTR
  * description: SAI ASlot register
  * address: 0x40015810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_ASLOTR_t {
    uint32_t FBOFF : 5;  ///< First bit offset, reset value: 0x0
    uint32_t _RESERVED_281 : 1;
    uint32_t SLOTSZ : 2;  ///< Slot size, reset value: 0x0
    uint32_t NBSLOT : 4;  ///< Number of slots in an audio frame, reset value: 0x0
    uint32_t _RESERVED_282 : 4;
    uint32_t SLOTEN : 16;  ///< Slot enable, reset value: 0x0
  } SAI_ASLOTR;

  /** 
  * name: SAI_AIM
  * description: SAI AInterrupt mask register2
  * address: 0x40015814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_AIM_t {
    uint32_t OVRUDRIE : 1;  ///< Overrun/underrun interrupt enable, reset value: 0x0
    uint32_t MUTEDETIE : 1;  ///< Mute detection interrupt enable, reset value: 0x0
    uint32_t WCKCFGIE : 1;  ///< Wrong clock configuration interrupt enable, reset value: 0x0
    uint32_t FREQIE : 1;  ///< FIFO request interrupt enable, reset value: 0x0
    uint32_t CNRDYIE : 1;  ///< Codec not ready interrupt enable, reset value: 0x0
    uint32_t AFSDETIE : 1;  ///< Anticipated frame synchronization detection interrupt enable, reset value: 0x0
    uint32_t LFSDETIE : 1;  ///< Late frame synchronization detection interrupt enable, reset value: 0x0
  } SAI_AIM;

  /** 
  * name: SAI_ASR
  * description: SAI AStatus register
  * address: 0x40015818
  * offset: 0x18
  * reset value: 0x00000008
  * size: 0x20
  * access: read-only
  */
  const struct SAI1_SAI_ASR_t {
    uint32_t OVRUDR : 1;  ///< Overrun / underrun, reset value: 0x0
    uint32_t MUTEDET : 1;  ///< Mute detection, reset value: 0x0
    uint32_t WCKCFG : 1;  ///< Wrong clock configuration flag, reset value: 0x0
    uint32_t FREQ : 1;  ///< FIFO request, reset value: 0x1
    uint32_t CNRDY : 1;  ///< Codec not ready, reset value: 0x0
    uint32_t AFSDET : 1;  ///< Anticipated frame synchronization detection, reset value: 0x0
    uint32_t LFSDET : 1;  ///< Late frame synchronization detection, reset value: 0x0
    uint32_t _RESERVED_283 : 9;
    uint32_t FLTH : 3;  ///< FIFO level threshold, reset value: 0x0
  } SAI_ASR;

  /** 
  * name: SAI_ACLRFR
  * description: SAI AClear flag register
  * address: 0x4001581C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_ACLRFR_t {
    uint32_t COVRUDR : 1;  ///< Clear overrun / underrun, reset value: 0x0
    uint32_t CMUTEDET : 1;  ///< Mute detection flag, reset value: 0x0
    uint32_t CWCKCFG : 1;  ///< Clear wrong clock configuration flag, reset value: 0x0
    uint32_t _RESERVED_284 : 1;
    uint32_t CCNRDY : 1;  ///< Clear codec not ready flag, reset value: 0x0
    uint32_t CAFSDET : 1;  ///< Clear anticipated frame synchronization detection flag, reset value: 0x0
    uint32_t CLFSDET : 1;  ///< Clear late frame synchronization detection flag, reset value: 0x0
  } SAI_ACLRFR;

  /** 
  * name: SAI_ADR
  * description: SAI AData register
  * address: 0x40015820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_ADR_t {
    uint32_t DATA : 32;  ///< Data, reset value: 0x0
  } SAI_ADR;

  /** 
  * name: SAI_BCR1
  * description: SAI BConfiguration register 1
  * address: 0x40015824
  * offset: 0x24
  * reset value: 0x00000040
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BCR1_t {
    uint32_t MODE : 2;  ///< Audio block mode, reset value: 0x0
    uint32_t PRTCFG : 2;  ///< Protocol configuration, reset value: 0x0
    uint32_t _RESERVED_285 : 1;
    uint32_t DS : 3;  ///< Data size, reset value: 0x2
    uint32_t LSBFIRST : 1;  ///< Least significant bit first, reset value: 0x0
    uint32_t CKSTR : 1;  ///< Clock strobing edge, reset value: 0x0
    uint32_t SYNCEN : 2;  ///< Synchronization enable, reset value: 0x0
    uint32_t MONO : 1;  ///< Mono mode, reset value: 0x0
    uint32_t OUTDRIV : 1;  ///< Output drive, reset value: 0x0
    uint32_t _RESERVED_286 : 2;
    uint32_t SAIBEN : 1;  ///< Audio block enable, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA enable, reset value: 0x0
    uint32_t _RESERVED_287 : 1;
    uint32_t NODIV : 1;  ///< No divider, reset value: 0x0
    uint32_t MCKDIV : 4;  ///< Master clock divider, reset value: 0x0
  } SAI_BCR1;

  /** 
  * name: SAI_BCR2
  * description: SAI BConfiguration register 2
  * address: 0x40015828
  * offset: 0x28
  * reset value: 0x00000040
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BCR2_t {
    uint32_t FTH : 3;  ///< FIFO threshold, reset value: 0x0
    uint32_t FFLUSH : 1;  ///< FIFO flush, reset value: 0x0
    uint32_t TRIS : 1;  ///< Tristate management on data line, reset value: 0x0
    uint32_t MUTE : 1;  ///< Mute, reset value: 0x0
    uint32_t MUTEVAL : 1;  ///< Mute value, reset value: 0x1
    uint32_t MUTECNT : 6;  ///< Mute counter, reset value: 0x0
    uint32_t CPL : 1;  ///< Complement bit, reset value: 0x0
    uint32_t COMP : 2;  ///< Companding mode, reset value: 0x0
  } SAI_BCR2;

  /** 
  * name: SAI_BFRCR
  * description: SAI BFrame configuration register
  * address: 0x4001582C
  * offset: 0x2C
  * reset value: 0x00000007
  * size: 0x20
  * access: 
  */
  struct SAI1_SAI_BFRCR_t {
    uint32_t FRL : 8;  ///< Frame length, reset value: 0x7
    uint32_t FSALL : 7;  ///< Frame synchronization active level length, reset value: 0x0
    uint32_t _RESERVED_288 : 1;
    uint32_t FSDEF : 1;  ///< Frame synchronization definition, reset value: 0x0
    uint32_t FSPOL : 1;  ///< Frame synchronization polarity, reset value: 0x0
    uint32_t FSOFF : 1;  ///< Frame synchronization offset, reset value: 0x0
  } SAI_BFRCR;

  /** 
  * name: SAI_BSLOTR
  * description: SAI BSlot register
  * address: 0x40015830
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BSLOTR_t {
    uint32_t FBOFF : 5;  ///< First bit offset, reset value: 0x0
    uint32_t _RESERVED_289 : 1;
    uint32_t SLOTSZ : 2;  ///< Slot size, reset value: 0x0
    uint32_t NBSLOT : 4;  ///< Number of slots in an audio frame, reset value: 0x0
    uint32_t _RESERVED_290 : 4;
    uint32_t SLOTEN : 16;  ///< Slot enable, reset value: 0x0
  } SAI_BSLOTR;

  /** 
  * name: SAI_BIM
  * description: SAI BInterrupt mask register2
  * address: 0x40015834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BIM_t {
    uint32_t OVRUDRIE : 1;  ///< Overrun/underrun interrupt enable, reset value: 0x0
    uint32_t MUTEDETIE : 1;  ///< Mute detection interrupt enable, reset value: 0x0
    uint32_t WCKCFGIE : 1;  ///< Wrong clock configuration interrupt enable, reset value: 0x0
    uint32_t FREQIE : 1;  ///< FIFO request interrupt enable, reset value: 0x0
    uint32_t CNRDYIE : 1;  ///< Codec not ready interrupt enable, reset value: 0x0
    uint32_t AFSDETIE : 1;  ///< Anticipated frame synchronization detection interrupt enable, reset value: 0x0
    uint32_t LFSDETIE : 1;  ///< Late frame synchronization detection interrupt enable, reset value: 0x0
  } SAI_BIM;

  /** 
  * name: SAI_BSR
  * description: SAI BStatus register
  * address: 0x40015838
  * offset: 0x38
  * reset value: 0x00000008
  * size: 0x20
  * access: read-only
  */
  const struct SAI1_SAI_BSR_t {
    uint32_t OVRUDR : 1;  ///< Overrun / underrun, reset value: 0x0
    uint32_t MUTEDET : 1;  ///< Mute detection, reset value: 0x0
    uint32_t WCKCFG : 1;  ///< Wrong clock configuration flag, reset value: 0x0
    uint32_t FREQ : 1;  ///< FIFO request, reset value: 0x1
    uint32_t CNRDY : 1;  ///< Codec not ready, reset value: 0x0
    uint32_t AFSDET : 1;  ///< Anticipated frame synchronization detection, reset value: 0x0
    uint32_t LFSDET : 1;  ///< Late frame synchronization detection, reset value: 0x0
    uint32_t _RESERVED_291 : 9;
    uint32_t FLTH : 3;  ///< FIFO level threshold, reset value: 0x0
  } SAI_BSR;

  /** 
  * name: SAI_BCLRFR
  * description: SAI BClear flag register
  * address: 0x4001583C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BCLRFR_t {
    uint32_t COVRUDR : 1;  ///< Clear overrun / underrun, reset value: 0x0
    uint32_t CMUTEDET : 1;  ///< Mute detection flag, reset value: 0x0
    uint32_t CWCKCFG : 1;  ///< Clear wrong clock configuration flag, reset value: 0x0
    uint32_t _RESERVED_292 : 1;
    uint32_t CCNRDY : 1;  ///< Clear codec not ready flag, reset value: 0x0
    uint32_t CAFSDET : 1;  ///< Clear anticipated frame synchronization detection flag, reset value: 0x0
    uint32_t CLFSDET : 1;  ///< Clear late frame synchronization detection flag, reset value: 0x0
  } SAI_BCLRFR;

  /** 
  * name: SAI_BDR
  * description: SAI BData register
  * address: 0x40015840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct SAI1_SAI_BDR_t {
    uint32_t DATA : 32;  ///< Data, reset value: 0x0
  } SAI_BDR;

} SAI1_t;


/** 
*  name: LTDC
*  description: LCD-TFT Controller
*  group: LTDC
*  address: 0x40016800
*/
typedef struct{
  const uint8_t _RESERVED_293[8];

  /** 
  * name: SSCR
  * description: Synchronization Size Configuration Register
  * address: 0x40016808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_SSCR_t {
    uint32_t VSH : 11;  ///< Vertical Synchronization Height (in units of horizontal scan line), reset value: 0x0
    uint32_t _RESERVED_294 : 5;
    uint32_t HSW : 10;  ///< Horizontal Synchronization Width (in units of pixel clock period), reset value: 0x0
  } SSCR;

  /** 
  * name: BPCR
  * description: Back Porch Configuration Register
  * address: 0x4001680C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_BPCR_t {
    uint32_t AVBP : 11;  ///< Accumulated Vertical back porch (in units of horizontal scan line), reset value: 0x0
    uint32_t _RESERVED_295 : 5;
    uint32_t AHBP : 10;  ///< Accumulated Horizontal back porch (in units of pixel clock period), reset value: 0x0
  } BPCR;

  /** 
  * name: AWCR
  * description: Active Width Configuration Register
  * address: 0x40016810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_AWCR_t {
    uint32_t AAH : 11;  ///< Accumulated Active Height (in units of horizontal scan line), reset value: 0x0
    uint32_t _RESERVED_296 : 5;
    uint32_t AAV : 10;  ///< AAV, reset value: 0x0
  } AWCR;

  /** 
  * name: TWCR
  * description: Total Width Configuration Register
  * address: 0x40016814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_TWCR_t {
    uint32_t TOTALH : 11;  ///< Total Height (in units of horizontal scan line), reset value: 0x0
    uint32_t _RESERVED_297 : 5;
    uint32_t TOTALW : 10;  ///< Total Width (in units of pixel clock period), reset value: 0x0
  } TWCR;

  /** 
  * name: GCR
  * description: Global Control Register
  * address: 0x40016818
  * offset: 0x18
  * reset value: 0x00002220
  * size: 0x20
  * access: 
  */
  struct LTDC_GCR_t {
    uint32_t LTDCEN : 1;  ///< LCD-TFT controller enable bit, reset value: 0x0
    uint32_t _RESERVED_298 : 3;
    uint32_t DBW : 3;  ///< Dither Blue Width, reset value: 0x2
    uint32_t _RESERVED_299 : 1;
    uint32_t DGW : 3;  ///< Dither Green Width, reset value: 0x2
    uint32_t _RESERVED_300 : 1;
    uint32_t DRW : 3;  ///< Dither Red Width, reset value: 0x2
    uint32_t _RESERVED_301 : 1;
    uint32_t DEN : 1;  ///< Dither Enable, reset value: 0x0
    uint32_t _RESERVED_302 : 11;
    uint32_t PCPOL : 1;  ///< Pixel Clock Polarity, reset value: 0x0
    uint32_t DEPOL : 1;  ///< Data Enable Polarity, reset value: 0x0
    uint32_t VSPOL : 1;  ///< Vertical Synchronization Polarity, reset value: 0x0
    uint32_t HSPOL : 1;  ///< Horizontal Synchronization Polarity, reset value: 0x0
  } GCR;

  /** 
  * name: SRCR
  * description: Shadow Reload Configuration Register
  * address: 0x40016824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_SRCR_t {
    uint32_t IMR : 1;  ///< Immediate Reload, reset value: 0x0
    uint32_t VBR : 1;  ///< Vertical Blanking Reload, reset value: 0x0
  } SRCR;

  /** 
  * name: BCCR
  * description: Background Color Configuration Register
  * address: 0x4001682C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_BCCR_t {
    uint32_t BC : 24;  ///< Background Color Red value, reset value: 0x0
  } BCCR;

  /** 
  * name: IER
  * description: Interrupt Enable Register
  * address: 0x40016834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_IER_t {
    uint32_t LIE : 1;  ///< Line Interrupt Enable, reset value: 0x0
    uint32_t FUIE : 1;  ///< FIFO Underrun Interrupt Enable, reset value: 0x0
    uint32_t TERRIE : 1;  ///< Transfer Error Interrupt Enable, reset value: 0x0
    uint32_t RRIE : 1;  ///< Register Reload interrupt enable, reset value: 0x0
  } IER;

  /** 
  * name: ISR
  * description: Interrupt Status Register
  * address: 0x40016838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct LTDC_ISR_t {
    uint32_t LIF : 1;  ///< Line Interrupt flag, reset value: 0x0
    uint32_t FUIF : 1;  ///< FIFO Underrun Interrupt flag, reset value: 0x0
    uint32_t TERRIF : 1;  ///< Transfer Error interrupt flag, reset value: 0x0
    uint32_t RRIF : 1;  ///< Register Reload Interrupt Flag, reset value: 0x0
  } ISR;

  /** 
  * name: ICR
  * description: Interrupt Clear Register
  * address: 0x4001683C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct LTDC_ICR_t {
    uint32_t CLIF : 1;  ///< Clears the Line Interrupt Flag, reset value: 0x0
    uint32_t CFUIF : 1;  ///< Clears the FIFO Underrun Interrupt flag, reset value: 0x0
    uint32_t CTERRIF : 1;  ///< Clears the Transfer Error Interrupt Flag, reset value: 0x0
    uint32_t CRRIF : 1;  ///< Clears Register Reload Interrupt Flag, reset value: 0x0
  } ICR;

  /** 
  * name: LIPCR
  * description: Line Interrupt Position Configuration Register
  * address: 0x40016840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_LIPCR_t {
    uint32_t LIPOS : 11;  ///< Line Interrupt Position, reset value: 0x0
  } LIPCR;

  /** 
  * name: CPSR
  * description: Current Position Status Register
  * address: 0x40016844
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct LTDC_CPSR_t {
    uint32_t CYPOS : 16;  ///< Current Y Position, reset value: 0x0
    uint32_t CXPOS : 16;  ///< Current X Position, reset value: 0x0
  } CPSR;

  /** 
  * name: CDSR
  * description: Current Display Status Register
  * address: 0x40016848
  * offset: 0x48
  * reset value: 0x0000000F
  * size: 0x20
  * access: read-only
  */
  const struct LTDC_CDSR_t {
    uint32_t VDES : 1;  ///< Vertical Data Enable display Status, reset value: 0x1
    uint32_t HDES : 1;  ///< Horizontal Data Enable display Status, reset value: 0x1
    uint32_t VSYNCS : 1;  ///< Vertical Synchronization display Status, reset value: 0x1
    uint32_t HSYNCS : 1;  ///< Horizontal Synchronization display Status, reset value: 0x1
  } CDSR;

  const uint8_t _RESERVED_303[28];

  /** 
  * name: L1CR
  * description: Layerx Control Register
  * address: 0x40016884
  * offset: 0x84
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CR_t {
    uint32_t LEN : 1;  ///< Layer Enable, reset value: 0x0
    uint32_t COLKEN : 1;  ///< Color Keying Enable, reset value: 0x0
    uint32_t _RESERVED_304 : 2;
    uint32_t CLUTEN : 1;  ///< Color Look-Up Table Enable, reset value: 0x0
  } L1CR;

  /** 
  * name: L1WHPCR
  * description: Layerx Window Horizontal Position Configuration Register
  * address: 0x40016888
  * offset: 0x88
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1WHPCR_t {
    uint32_t WHSTPOS : 12;  ///< Window Horizontal Start Position, reset value: 0x0
    uint32_t _RESERVED_305 : 4;
    uint32_t WHSPPOS : 12;  ///< Window Horizontal Stop Position, reset value: 0x0
  } L1WHPCR;

  /** 
  * name: L1WVPCR
  * description: Layerx Window Vertical Position Configuration Register
  * address: 0x4001688C
  * offset: 0x8C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1WVPCR_t {
    uint32_t WVSTPOS : 11;  ///< Window Vertical Start Position, reset value: 0x0
    uint32_t _RESERVED_306 : 5;
    uint32_t WVSPPOS : 11;  ///< Window Vertical Stop Position, reset value: 0x0
  } L1WVPCR;

  /** 
  * name: L1CKCR
  * description: Layerx Color Keying Configuration Register
  * address: 0x40016890
  * offset: 0x90
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CKCR_t {
    uint32_t CKBLUE : 8;  ///< Color Key Blue value, reset value: 0x0
    uint32_t CKGREEN : 8;  ///< Color Key Green value, reset value: 0x0
    uint32_t CKRED : 8;  ///< Color Key Red value, reset value: 0x0
  } L1CKCR;

  /** 
  * name: L1PFCR
  * description: Layerx Pixel Format Configuration Register
  * address: 0x40016894
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1PFCR_t {
    uint32_t PF : 3;  ///< Pixel Format, reset value: 0x0
  } L1PFCR;

  /** 
  * name: L1CACR
  * description: Layerx Constant Alpha Configuration Register
  * address: 0x40016898
  * offset: 0x98
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CACR_t {
    uint32_t CONSTA : 8;  ///< Constant Alpha, reset value: 0x0
  } L1CACR;

  /** 
  * name: L1DCCR
  * description: Layerx Default Color Configuration Register
  * address: 0x4001689C
  * offset: 0x9C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1DCCR_t {
    uint32_t DCBLUE : 8;  ///< Default Color Blue, reset value: 0x0
    uint32_t DCGREEN : 8;  ///< Default Color Green, reset value: 0x0
    uint32_t DCRED : 8;  ///< Default Color Red, reset value: 0x0
    uint32_t DCALPHA : 8;  ///< Default Color Alpha, reset value: 0x0
  } L1DCCR;

  /** 
  * name: L1BFCR
  * description: Layerx Blending Factors Configuration Register
  * address: 0x400168A0
  * offset: 0xA0
  * reset value: 0x00000607
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1BFCR_t {
    uint32_t BF2 : 3;  ///< Blending Factor 2, reset value: 0x7
    uint32_t _RESERVED_307 : 5;
    uint32_t BF1 : 3;  ///< Blending Factor 1, reset value: 0x6
  } L1BFCR;

  /** 
  * name: L1CFBAR
  * description: Layerx Color Frame Buffer Address Register
  * address: 0x400168AC
  * offset: 0xAC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CFBAR_t {
    uint32_t CFBADD : 32;  ///< Color Frame Buffer Start Address, reset value: 0x0
  } L1CFBAR;

  /** 
  * name: L1CFBLR
  * description: Layerx Color Frame Buffer Length Register
  * address: 0x400168B0
  * offset: 0xB0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CFBLR_t {
    uint32_t CFBLL : 13;  ///< Color Frame Buffer Line Length, reset value: 0x0
    uint32_t _RESERVED_308 : 3;
    uint32_t CFBP : 13;  ///< Color Frame Buffer Pitch in bytes, reset value: 0x0
  } L1CFBLR;

  /** 
  * name: L1CFBLNR
  * description: Layerx ColorFrame Buffer Line Number Register
  * address: 0x400168B4
  * offset: 0xB4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L1CFBLNR_t {
    uint32_t CFBLNBR : 11;  ///< Frame Buffer Line Number, reset value: 0x0
  } L1CFBLNR;

  /** 
  * name: L1CLUTWR
  * description: Layerx CLUT Write Register
  * address: 0x400168C4
  * offset: 0xC4
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct LTDC_L1CLUTWR_t {
    uint32_t BLUE : 8;  ///< Blue value, reset value: 0x0
    uint32_t GREEN : 8;  ///< Green value, reset value: 0x0
    uint32_t RED : 8;  ///< Red value, reset value: 0x0
    uint32_t CLUTADD : 8;  ///< CLUT Address, reset value: 0x0
  } L1CLUTWR;

  const uint8_t _RESERVED_309[32];

  /** 
  * name: L2CR
  * description: Layerx Control Register
  * address: 0x40016904
  * offset: 0x104
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CR_t {
    uint32_t LEN : 1;  ///< Layer Enable, reset value: 0x0
    uint32_t COLKEN : 1;  ///< Color Keying Enable, reset value: 0x0
    uint32_t _RESERVED_310 : 2;
    uint32_t CLUTEN : 1;  ///< Color Look-Up Table Enable, reset value: 0x0
  } L2CR;

  /** 
  * name: L2WHPCR
  * description: Layerx Window Horizontal Position Configuration Register
  * address: 0x40016908
  * offset: 0x108
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2WHPCR_t {
    uint32_t WHSTPOS : 12;  ///< Window Horizontal Start Position, reset value: 0x0
    uint32_t _RESERVED_311 : 4;
    uint32_t WHSPPOS : 12;  ///< Window Horizontal Stop Position, reset value: 0x0
  } L2WHPCR;

  /** 
  * name: L2WVPCR
  * description: Layerx Window Vertical Position Configuration Register
  * address: 0x4001690C
  * offset: 0x10C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2WVPCR_t {
    uint32_t WVSTPOS : 11;  ///< Window Vertical Start Position, reset value: 0x0
    uint32_t _RESERVED_312 : 5;
    uint32_t WVSPPOS : 11;  ///< Window Vertical Stop Position, reset value: 0x0
  } L2WVPCR;

  /** 
  * name: L2CKCR
  * description: Layerx Color Keying Configuration Register
  * address: 0x40016910
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CKCR_t {
    uint32_t CKBLUE : 8;  ///< Color Key Blue value, reset value: 0x0
    uint32_t CKGREEN : 7;  ///< Color Key Green value, reset value: 0x0
    uint32_t CKRED : 9;  ///< Color Key Red value, reset value: 0x0
  } L2CKCR;

  /** 
  * name: L2PFCR
  * description: Layerx Pixel Format Configuration Register
  * address: 0x40016914
  * offset: 0x114
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2PFCR_t {
    uint32_t PF : 3;  ///< Pixel Format, reset value: 0x0
  } L2PFCR;

  /** 
  * name: L2CACR
  * description: Layerx Constant Alpha Configuration Register
  * address: 0x40016918
  * offset: 0x118
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CACR_t {
    uint32_t CONSTA : 8;  ///< Constant Alpha, reset value: 0x0
  } L2CACR;

  /** 
  * name: L2DCCR
  * description: Layerx Default Color Configuration Register
  * address: 0x4001691C
  * offset: 0x11C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2DCCR_t {
    uint32_t DCBLUE : 8;  ///< Default Color Blue, reset value: 0x0
    uint32_t DCGREEN : 8;  ///< Default Color Green, reset value: 0x0
    uint32_t DCRED : 8;  ///< Default Color Red, reset value: 0x0
    uint32_t DCALPHA : 8;  ///< Default Color Alpha, reset value: 0x0
  } L2DCCR;

  /** 
  * name: L2BFCR
  * description: Layerx Blending Factors Configuration Register
  * address: 0x40016920
  * offset: 0x120
  * reset value: 0x00000607
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2BFCR_t {
    uint32_t BF2 : 3;  ///< Blending Factor 2, reset value: 0x7
    uint32_t _RESERVED_313 : 5;
    uint32_t BF1 : 3;  ///< Blending Factor 1, reset value: 0x6
  } L2BFCR;

  /** 
  * name: L2CFBAR
  * description: Layerx Color Frame Buffer Address Register
  * address: 0x4001692C
  * offset: 0x12C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CFBAR_t {
    uint32_t CFBADD : 32;  ///< Color Frame Buffer Start Address, reset value: 0x0
  } L2CFBAR;

  /** 
  * name: L2CFBLR
  * description: Layerx Color Frame Buffer Length Register
  * address: 0x40016930
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CFBLR_t {
    uint32_t CFBLL : 13;  ///< Color Frame Buffer Line Length, reset value: 0x0
    uint32_t _RESERVED_314 : 3;
    uint32_t CFBP : 13;  ///< Color Frame Buffer Pitch in bytes, reset value: 0x0
  } L2CFBLR;

  /** 
  * name: L2CFBLNR
  * description: Layerx ColorFrame Buffer Line Number Register
  * address: 0x40016934
  * offset: 0x134
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct LTDC_L2CFBLNR_t {
    uint32_t CFBLNBR : 11;  ///< Frame Buffer Line Number, reset value: 0x0
  } L2CFBLNR;

  /** 
  * name: L2CLUTWR
  * description: Layerx CLUT Write Register
  * address: 0x40016944
  * offset: 0x144
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct LTDC_L2CLUTWR_t {
    uint32_t BLUE : 8;  ///< Blue value, reset value: 0x0
    uint32_t GREEN : 8;  ///< Green value, reset value: 0x0
    uint32_t RED : 8;  ///< Red value, reset value: 0x0
    uint32_t CLUTADD : 8;  ///< CLUT Address, reset value: 0x0
  } L2CLUTWR;

} LTDC_t;


/** 
*  name: GPIOA
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40020000
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40020000
  * offset: 0x0
  * reset value: 0xA8000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40020004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40020008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002000C
  * offset: 0xC
  * reset value: 0x64000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x1
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x1
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40020010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOA_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40020014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40020018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOA_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40020020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40020024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOA_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOA_t;


/** 
*  name: GPIOB
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40020400
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40020400
  * offset: 0x0
  * reset value: 0x00000280
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x2
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40020404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40020408
  * offset: 0x8
  * reset value: 0x000000C0
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x3
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002040C
  * offset: 0xC
  * reset value: 0x00000100
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x1
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40020410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOB_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40020414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40020418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOB_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40020420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40020424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOB_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOB_t;


/** 
*  name: GPIOC
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40020800
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40020800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40020804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40020808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002080C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40020810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOC_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40020814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40020818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOC_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002081C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40020820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40020824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOC_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOC_t;


/** 
*  name: GPIOD
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40020C00
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40020C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40020C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40020C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x40020C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40020C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOD_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40020C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40020C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOD_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x40020C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40020C20
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40020C24
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOD_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOD_t;


/** 
*  name: GPIOE
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40021000
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40021000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40021004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40021008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002100C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40021010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOE_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40021014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40021018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOE_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002101C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40021020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40021024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOE_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOE_t;


/** 
*  name: GPIOF
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40021400
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40021400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40021404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40021408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002140C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40021410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOF_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40021414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40021418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOF_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002141C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40021420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40021424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOF_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOF_t;


/** 
*  name: GPIOG
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40021800
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40021800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40021804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40021808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002180C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40021810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOG_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40021814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40021818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOG_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002181C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40021820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40021824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOG_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOG_t;


/** 
*  name: GPIOH
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40021C00
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40021C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40021C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40021C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x40021C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40021C10
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOH_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40021C14
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40021C18
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOH_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x40021C1C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40021C20
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40021C24
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOH_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOH_t;


/** 
*  name: GPIOI
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40022000
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40022000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40022004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40022008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002200C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40022010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOI_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40022014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40022018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOI_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002201C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40022020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40022024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOI_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOI_t;


/** 
*  name: GPIOJ
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40022400
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40022400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40022404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40022408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002240C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40022410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOJ_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40022414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40022418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOJ_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002241C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40022420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40022424
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOJ_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOJ_t;


/** 
*  name: GPIOK
*  description: General-purpose I/Os
*  group: GPIO
*  address: 0x40022800
*/
typedef struct{
  /** 
  * name: MODER
  * description: GPIO port mode register
  * address: 0x40022800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_MODER_t {
    uint32_t MODER0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t MODER15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } MODER;

  /** 
  * name: OTYPER
  * description: GPIO port output type register
  * address: 0x40022804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_OTYPER_t {
    uint32_t OT0 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT1 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT2 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT3 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT4 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT5 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT6 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT7 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT8 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT9 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT10 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT11 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT12 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT13 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT14 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OT15 : 1;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OTYPER;

  /** 
  * name: OSPEEDR
  * description: GPIO port output speed register
  * address: 0x40022808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_OSPEEDR_t {
    uint32_t OSPEEDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t OSPEEDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } OSPEEDR;

  /** 
  * name: PUPDR
  * description: GPIO port pull-up/pull-down register
  * address: 0x4002280C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_PUPDR_t {
    uint32_t PUPDR0 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR1 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR2 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR3 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR4 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR5 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR6 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR7 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR8 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR9 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR10 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR11 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR12 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR13 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR14 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
    uint32_t PUPDR15 : 2;  ///< Port x configuration bits (y = 0..15), reset value: 0x0
  } PUPDR;

  /** 
  * name: IDR
  * description: GPIO port input data register
  * address: 0x40022810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct GPIOK_IDR_t {
    uint32_t IDR0 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR1 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR2 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR3 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR4 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR5 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR6 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR7 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR8 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR9 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR10 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR11 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR12 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR13 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR14 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
    uint32_t IDR15 : 1;  ///< Port input data (y = 0..15), reset value: 0x0
  } IDR;

  /** 
  * name: ODR
  * description: GPIO port output data register
  * address: 0x40022814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_ODR_t {
    uint32_t ODR0 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR1 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR2 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR3 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR4 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR5 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR6 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR7 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR8 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR9 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR10 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR11 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR12 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR13 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR14 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
    uint32_t ODR15 : 1;  ///< Port output data (y = 0..15), reset value: 0x0
  } ODR;

  /** 
  * name: BSRR
  * description: GPIO port bit set/reset register
  * address: 0x40022818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct GPIOK_BSRR_t {
    uint32_t BS0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS1 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS2 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS3 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS4 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS5 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS6 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS7 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS8 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS9 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS10 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS11 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS12 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS13 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS14 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BS15 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR0 : 1;  ///< Port x set bit y (y= 0..15), reset value: 0x0
    uint32_t BR1 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR2 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR3 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR4 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR5 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR6 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR7 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR8 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR9 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR10 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR11 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR12 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR13 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR14 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
    uint32_t BR15 : 1;  ///< Port x reset bit y (y = 0..15), reset value: 0x0
  } BSRR;

  /** 
  * name: LCKR
  * description: GPIO port configuration lock register
  * address: 0x4002281C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_LCKR_t {
    uint32_t LCK0 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK1 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK2 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK3 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK4 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK5 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK6 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK7 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK8 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK9 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK10 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK11 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK12 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK13 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK14 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCK15 : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
    uint32_t LCKK : 1;  ///< Port x lock bit y (y= 0..15), reset value: 0x0
  } LCKR;

  /** 
  * name: AFRL
  * description: GPIO alternate function low register
  * address: 0x40022820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_AFRL_t {
    uint32_t AFRL0 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL1 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL2 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL3 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL4 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL5 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL6 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
    uint32_t AFRL7 : 4;  ///< Alternate function selection for port x bit y (y = 0..7), reset value: 0x0
  } AFRL;

  /** 
  * name: AFRH
  * description: GPIO alternate function high register
  * address: 0x40022824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct GPIOK_AFRH_t {
    uint32_t AFRH8 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH9 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH10 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH11 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH12 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH13 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH14 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
    uint32_t AFRH15 : 4;  ///< Alternate function selection for port x bit y (y = 8..15), reset value: 0x0
  } AFRH;

} GPIOK_t;


/** 
*  name: CRC
*  description: Cryptographic processor
*  group: CRC
*  address: 0x40023000
*/
typedef struct{
  /** 
  * name: DR
  * description: Data register
  * address: 0x40023000
  * offset: 0x0
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct CRC_DR_t {
    uint32_t DR : 32;  ///< Data Register, reset value: 0xFFFFFFFF
  } DR;

  /** 
  * name: IDR
  * description: Independent Data register
  * address: 0x40023004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRC_IDR_t {
    uint32_t IDR : 8;  ///< Independent Data register, reset value: 0x0
  } IDR;

  /** 
  * name: CR
  * description: Control register
  * address: 0x40023008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRC_CR_t {
    uint32_t CR : 1;  ///< Control regidter, reset value: 0x0
  } CR;

} CRC_t;


/** 
*  name: RCC
*  description: Reset and clock control
*  group: RCC
*  address: 0x40023800
*/
typedef struct{
  /** 
  * name: CR
  * description: clock control register
  * address: 0x40023800
  * offset: 0x0
  * reset value: 0x00000083
  * size: 0x20
  * access: 
  */
  struct RCC_CR_t {
    uint32_t HSION : 1;  ///< Internal high-speed clock enable, reset value: 0x1
    uint32_t HSIRDY : 1;  ///< Internal high-speed clock ready flag, reset value: 0x1
    uint32_t _RESERVED_315 : 1;
    uint32_t HSITRIM : 5;  ///< Internal high-speed clock trimming, reset value: 0x10
    uint32_t HSICAL : 8;  ///< Internal high-speed clock calibration, reset value: 0x0
    uint32_t HSEON : 1;  ///< HSE clock enable, reset value: 0x0
    uint32_t HSERDY : 1;  ///< HSE clock ready flag, reset value: 0x0
    uint32_t HSEBYP : 1;  ///< HSE clock bypass, reset value: 0x0
    uint32_t CSSON : 1;  ///< Clock security system enable, reset value: 0x0
    uint32_t _RESERVED_316 : 4;
    uint32_t PLLON : 1;  ///< Main PLL (PLL) enable, reset value: 0x0
    uint32_t PLLRDY : 1;  ///< Main PLL (PLL) clock ready flag, reset value: 0x0
    uint32_t PLLI2SON : 1;  ///< PLLI2S enable, reset value: 0x0
    uint32_t PLLI2SRDY : 1;  ///< PLLI2S clock ready flag, reset value: 0x0
  } CR;

  /** 
  * name: PLLCFGR
  * description: PLL configuration register
  * address: 0x40023804
  * offset: 0x4
  * reset value: 0x24003010
  * size: 0x20
  * access: read-write
  */
  struct RCC_PLLCFGR_t {
    uint32_t PLLM0 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x0
    uint32_t PLLM1 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x0
    uint32_t PLLM2 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x0
    uint32_t PLLM3 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x0
    uint32_t PLLM4 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x1
    uint32_t PLLM5 : 1;  ///< Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock, reset value: 0x0
    uint32_t PLLN0 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN1 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN2 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN3 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN4 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN5 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t PLLN6 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x1
    uint32_t PLLN7 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x1
    uint32_t PLLN8 : 1;  ///< Main PLL (PLL) multiplication factor for VCO, reset value: 0x0
    uint32_t _RESERVED_317 : 1;
    uint32_t PLLP0 : 1;  ///< Main PLL (PLL) division factor for main system clock, reset value: 0x0
    uint32_t PLLP1 : 1;  ///< Main PLL (PLL) division factor for main system clock, reset value: 0x0
    uint32_t _RESERVED_318 : 4;
    uint32_t PLLSRC : 1;  ///< Main PLL(PLL) and audio PLL (PLLI2S) entry clock source, reset value: 0x0
    uint32_t _RESERVED_319 : 1;
    uint32_t PLLQ0 : 1;  ///< Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks, reset value: 0x0
    uint32_t PLLQ1 : 1;  ///< Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks, reset value: 0x0
    uint32_t PLLQ2 : 1;  ///< Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks, reset value: 0x1
    uint32_t PLLQ3 : 1;  ///< Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks, reset value: 0x0
  } PLLCFGR;

  /** 
  * name: CFGR
  * description: clock configuration register
  * address: 0x40023808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct RCC_CFGR_t {
    uint32_t SW0 : 1;  ///< System clock switch, reset value: 0x0
    uint32_t SW1 : 1;  ///< System clock switch, reset value: 0x0
    uint32_t SWS0 : 1;  ///< System clock switch status, reset value: 0x0
    uint32_t SWS1 : 1;  ///< System clock switch status, reset value: 0x0
    uint32_t HPRE : 4;  ///< AHB prescaler, reset value: 0x0
    uint32_t _RESERVED_320 : 2;
    uint32_t PPRE1 : 3;  ///< APB Low speed prescaler (APB1), reset value: 0x0
    uint32_t PPRE2 : 3;  ///< APB high-speed prescaler (APB2), reset value: 0x0
    uint32_t RTCPRE : 5;  ///< HSE division factor for RTC clock, reset value: 0x0
    uint32_t MCO1 : 2;  ///< Microcontroller clock output 1, reset value: 0x0
    uint32_t I2SSRC : 1;  ///< I2S clock selection, reset value: 0x0
    uint32_t MCO1PRE : 3;  ///< MCO1 prescaler, reset value: 0x0
    uint32_t MCO2PRE : 3;  ///< MCO2 prescaler, reset value: 0x0
    uint32_t MCO2 : 2;  ///< Microcontroller clock output 2, reset value: 0x0
  } CFGR;

  /** 
  * name: CIR
  * description: clock interrupt register
  * address: 0x4002380C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct RCC_CIR_t {
    uint32_t LSIRDYF : 1;  ///< LSI ready interrupt flag, reset value: 0x0
    uint32_t LSERDYF : 1;  ///< LSE ready interrupt flag, reset value: 0x0
    uint32_t HSIRDYF : 1;  ///< HSI ready interrupt flag, reset value: 0x0
    uint32_t HSERDYF : 1;  ///< HSE ready interrupt flag, reset value: 0x0
    uint32_t PLLRDYF : 1;  ///< Main PLL (PLL) ready interrupt flag, reset value: 0x0
    uint32_t PLLI2SRDYF : 1;  ///< PLLI2S ready interrupt flag, reset value: 0x0
    uint32_t _RESERVED_321 : 1;
    uint32_t CSSF : 1;  ///< Clock security system interrupt flag, reset value: 0x0
    uint32_t LSIRDYIE : 1;  ///< LSI ready interrupt enable, reset value: 0x0
    uint32_t LSERDYIE : 1;  ///< LSE ready interrupt enable, reset value: 0x0
    uint32_t HSIRDYIE : 1;  ///< HSI ready interrupt enable, reset value: 0x0
    uint32_t HSERDYIE : 1;  ///< HSE ready interrupt enable, reset value: 0x0
    uint32_t PLLRDYIE : 1;  ///< Main PLL (PLL) ready interrupt enable, reset value: 0x0
    uint32_t PLLI2SRDYIE : 1;  ///< PLLI2S ready interrupt enable, reset value: 0x0
    uint32_t _RESERVED_322 : 2;
    uint32_t LSIRDYC : 1;  ///< LSI ready interrupt clear, reset value: 0x0
    uint32_t LSERDYC : 1;  ///< LSE ready interrupt clear, reset value: 0x0
    uint32_t HSIRDYC : 1;  ///< HSI ready interrupt clear, reset value: 0x0
    uint32_t HSERDYC : 1;  ///< HSE ready interrupt clear, reset value: 0x0
    uint32_t PLLRDYC : 1;  ///< Main PLL(PLL) ready interrupt clear, reset value: 0x0
    uint32_t PLLI2SRDYC : 1;  ///< PLLI2S ready interrupt clear, reset value: 0x0
    uint32_t _RESERVED_323 : 1;
    uint32_t CSSC : 1;  ///< Clock security system interrupt clear, reset value: 0x0
  } CIR;

  /** 
  * name: AHB1RSTR
  * description: AHB1 peripheral reset register
  * address: 0x40023810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB1RSTR_t {
    uint32_t GPIOARST : 1;  ///< IO port A reset, reset value: 0x0
    uint32_t GPIOBRST : 1;  ///< IO port B reset, reset value: 0x0
    uint32_t GPIOCRST : 1;  ///< IO port C reset, reset value: 0x0
    uint32_t GPIODRST : 1;  ///< IO port D reset, reset value: 0x0
    uint32_t GPIOERST : 1;  ///< IO port E reset, reset value: 0x0
    uint32_t GPIOFRST : 1;  ///< IO port F reset, reset value: 0x0
    uint32_t GPIOGRST : 1;  ///< IO port G reset, reset value: 0x0
    uint32_t GPIOHRST : 1;  ///< IO port H reset, reset value: 0x0
    uint32_t GPIOIRST : 1;  ///< IO port I reset, reset value: 0x0
    uint32_t _RESERVED_324 : 3;
    uint32_t CRCRST : 1;  ///< CRC reset, reset value: 0x0
    uint32_t _RESERVED_325 : 8;
    uint32_t DMA1RST : 1;  ///< DMA2 reset, reset value: 0x0
    uint32_t DMA2RST : 1;  ///< DMA2 reset, reset value: 0x0
    uint32_t _RESERVED_326 : 2;
    uint32_t ETHMACRST : 1;  ///< Ethernet MAC reset, reset value: 0x0
    uint32_t _RESERVED_327 : 3;
    uint32_t OTGHSRST : 1;  ///< USB OTG HS module reset, reset value: 0x0
  } AHB1RSTR;

  /** 
  * name: AHB2RSTR
  * description: AHB2 peripheral reset register
  * address: 0x40023814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB2RSTR_t {
    uint32_t DCMIRST : 1;  ///< Camera interface reset, reset value: 0x0
    uint32_t _RESERVED_328 : 5;
    uint32_t RNGRST : 1;  ///< Random number generator module reset, reset value: 0x0
    uint32_t OTGFSRST : 1;  ///< USB OTG FS module reset, reset value: 0x0
  } AHB2RSTR;

  /** 
  * name: AHB3RSTR
  * description: AHB3 peripheral reset register
  * address: 0x40023818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB3RSTR_t {
    uint32_t FSMCRST : 1;  ///< Flexible static memory controller module reset, reset value: 0x0
  } AHB3RSTR;

  /** 
  * name: APB1RSTR
  * description: APB1 peripheral reset register
  * address: 0x40023820
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB1RSTR_t {
    uint32_t TIM2RST : 1;  ///< TIM2 reset, reset value: 0x0
    uint32_t TIM3RST : 1;  ///< TIM3 reset, reset value: 0x0
    uint32_t TIM4RST : 1;  ///< TIM4 reset, reset value: 0x0
    uint32_t TIM5RST : 1;  ///< TIM5 reset, reset value: 0x0
    uint32_t TIM6RST : 1;  ///< TIM6 reset, reset value: 0x0
    uint32_t TIM7RST : 1;  ///< TIM7 reset, reset value: 0x0
    uint32_t TIM12RST : 1;  ///< TIM12 reset, reset value: 0x0
    uint32_t TIM13RST : 1;  ///< TIM13 reset, reset value: 0x0
    uint32_t TIM14RST : 1;  ///< TIM14 reset, reset value: 0x0
    uint32_t _RESERVED_329 : 2;
    uint32_t WWDGRST : 1;  ///< Window watchdog reset, reset value: 0x0
    uint32_t _RESERVED_330 : 2;
    uint32_t SPI2RST : 1;  ///< SPI 2 reset, reset value: 0x0
    uint32_t SPI3RST : 1;  ///< SPI 3 reset, reset value: 0x0
    uint32_t _RESERVED_331 : 1;
    uint32_t UART2RST : 1;  ///< USART 2 reset, reset value: 0x0
    uint32_t UART3RST : 1;  ///< USART 3 reset, reset value: 0x0
    uint32_t UART4RST : 1;  ///< USART 4 reset, reset value: 0x0
    uint32_t UART5RST : 1;  ///< USART 5 reset, reset value: 0x0
    uint32_t I2C1RST : 1;  ///< I2C 1 reset, reset value: 0x0
    uint32_t I2C2RST : 1;  ///< I2C 2 reset, reset value: 0x0
    uint32_t I2C3RST : 1;  ///< I2C3 reset, reset value: 0x0
    uint32_t _RESERVED_332 : 1;
    uint32_t CAN1RST : 1;  ///< CAN1 reset, reset value: 0x0
    uint32_t CAN2RST : 1;  ///< CAN2 reset, reset value: 0x0
    uint32_t _RESERVED_333 : 1;
    uint32_t PWRRST : 1;  ///< Power interface reset, reset value: 0x0
    uint32_t DACRST : 1;  ///< DAC reset, reset value: 0x0
  } APB1RSTR;

  /** 
  * name: APB2RSTR
  * description: APB2 peripheral reset register
  * address: 0x40023824
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB2RSTR_t {
    uint32_t TIM1RST : 1;  ///< TIM1 reset, reset value: 0x0
    uint32_t TIM8RST : 1;  ///< TIM8 reset, reset value: 0x0
    uint32_t _RESERVED_334 : 2;
    uint32_t USART1RST : 1;  ///< USART1 reset, reset value: 0x0
    uint32_t USART6RST : 1;  ///< USART6 reset, reset value: 0x0
    uint32_t _RESERVED_335 : 2;
    uint32_t ADCRST : 1;  ///< ADC interface reset (common to all ADCs), reset value: 0x0
    uint32_t _RESERVED_336 : 2;
    uint32_t SDIORST : 1;  ///< SDIO reset, reset value: 0x0
    uint32_t SPI1RST : 1;  ///< SPI 1 reset, reset value: 0x0
    uint32_t _RESERVED_337 : 1;
    uint32_t SYSCFGRST : 1;  ///< System configuration controller reset, reset value: 0x0
    uint32_t _RESERVED_338 : 1;
    uint32_t TIM9RST : 1;  ///< TIM9 reset, reset value: 0x0
    uint32_t TIM10RST : 1;  ///< TIM10 reset, reset value: 0x0
    uint32_t TIM11RST : 1;  ///< TIM11 reset, reset value: 0x0
  } APB2RSTR;

  /** 
  * name: AHB1ENR
  * description: AHB1 peripheral clock register
  * address: 0x40023830
  * offset: 0x30
  * reset value: 0x00100000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB1ENR_t {
    uint32_t GPIOAEN : 1;  ///< IO port A clock enable, reset value: 0x0
    uint32_t GPIOBEN : 1;  ///< IO port B clock enable, reset value: 0x0
    uint32_t GPIOCEN : 1;  ///< IO port C clock enable, reset value: 0x0
    uint32_t GPIODEN : 1;  ///< IO port D clock enable, reset value: 0x0
    uint32_t GPIOEEN : 1;  ///< IO port E clock enable, reset value: 0x0
    uint32_t GPIOFEN : 1;  ///< IO port F clock enable, reset value: 0x0
    uint32_t GPIOGEN : 1;  ///< IO port G clock enable, reset value: 0x0
    uint32_t GPIOHEN : 1;  ///< IO port H clock enable, reset value: 0x0
    uint32_t GPIOIEN : 1;  ///< IO port I clock enable, reset value: 0x0
    uint32_t _RESERVED_339 : 3;
    uint32_t CRCEN : 1;  ///< CRC clock enable, reset value: 0x0
    uint32_t _RESERVED_340 : 5;
    uint32_t BKPSRAMEN : 1;  ///< Backup SRAM interface clock enable, reset value: 0x0
    uint32_t _RESERVED_341 : 2;
    uint32_t DMA1EN : 1;  ///< DMA1 clock enable, reset value: 0x0
    uint32_t DMA2EN : 1;  ///< DMA2 clock enable, reset value: 0x0
    uint32_t _RESERVED_342 : 2;
    uint32_t ETHMACEN : 1;  ///< Ethernet MAC clock enable, reset value: 0x0
    uint32_t ETHMACTXEN : 1;  ///< Ethernet Transmission clock enable, reset value: 0x0
    uint32_t ETHMACRXEN : 1;  ///< Ethernet Reception clock enable, reset value: 0x0
    uint32_t ETHMACPTPEN : 1;  ///< Ethernet PTP clock enable, reset value: 0x0
    uint32_t OTGHSEN : 1;  ///< USB OTG HS clock enable, reset value: 0x0
    uint32_t OTGHSULPIEN : 1;  ///< USB OTG HSULPI clock enable, reset value: 0x0
  } AHB1ENR;

  /** 
  * name: AHB2ENR
  * description: AHB2 peripheral clock enable register
  * address: 0x40023834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB2ENR_t {
    uint32_t DCMIEN : 1;  ///< Camera interface enable, reset value: 0x0
    uint32_t _RESERVED_343 : 5;
    uint32_t RNGEN : 1;  ///< Random number generator clock enable, reset value: 0x0
    uint32_t OTGFSEN : 1;  ///< USB OTG FS clock enable, reset value: 0x0
  } AHB2ENR;

  /** 
  * name: AHB3ENR
  * description: AHB3 peripheral clock enable register
  * address: 0x40023838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB3ENR_t {
    uint32_t FSMCEN : 1;  ///< Flexible static memory controller module clock enable, reset value: 0x0
  } AHB3ENR;

  /** 
  * name: APB1ENR
  * description: APB1 peripheral clock enable register
  * address: 0x40023840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB1ENR_t {
    uint32_t TIM2EN : 1;  ///< TIM2 clock enable, reset value: 0x0
    uint32_t TIM3EN : 1;  ///< TIM3 clock enable, reset value: 0x0
    uint32_t TIM4EN : 1;  ///< TIM4 clock enable, reset value: 0x0
    uint32_t TIM5EN : 1;  ///< TIM5 clock enable, reset value: 0x0
    uint32_t TIM6EN : 1;  ///< TIM6 clock enable, reset value: 0x0
    uint32_t TIM7EN : 1;  ///< TIM7 clock enable, reset value: 0x0
    uint32_t TIM12EN : 1;  ///< TIM12 clock enable, reset value: 0x0
    uint32_t TIM13EN : 1;  ///< TIM13 clock enable, reset value: 0x0
    uint32_t TIM14EN : 1;  ///< TIM14 clock enable, reset value: 0x0
    uint32_t _RESERVED_344 : 2;
    uint32_t WWDGEN : 1;  ///< Window watchdog clock enable, reset value: 0x0
    uint32_t _RESERVED_345 : 2;
    uint32_t SPI2EN : 1;  ///< SPI2 clock enable, reset value: 0x0
    uint32_t SPI3EN : 1;  ///< SPI3 clock enable, reset value: 0x0
    uint32_t _RESERVED_346 : 1;
    uint32_t USART2EN : 1;  ///< USART 2 clock enable, reset value: 0x0
    uint32_t USART3EN : 1;  ///< USART3 clock enable, reset value: 0x0
    uint32_t UART4EN : 1;  ///< UART4 clock enable, reset value: 0x0
    uint32_t UART5EN : 1;  ///< UART5 clock enable, reset value: 0x0
    uint32_t I2C1EN : 1;  ///< I2C1 clock enable, reset value: 0x0
    uint32_t I2C2EN : 1;  ///< I2C2 clock enable, reset value: 0x0
    uint32_t I2C3EN : 1;  ///< I2C3 clock enable, reset value: 0x0
    uint32_t _RESERVED_347 : 1;
    uint32_t CAN1EN : 1;  ///< CAN 1 clock enable, reset value: 0x0
    uint32_t CAN2EN : 1;  ///< CAN 2 clock enable, reset value: 0x0
    uint32_t _RESERVED_348 : 1;
    uint32_t PWREN : 1;  ///< Power interface clock enable, reset value: 0x0
    uint32_t DACEN : 1;  ///< DAC interface clock enable, reset value: 0x0
  } APB1ENR;

  /** 
  * name: APB2ENR
  * description: APB2 peripheral clock enable register
  * address: 0x40023844
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB2ENR_t {
    uint32_t TIM1EN : 1;  ///< TIM1 clock enable, reset value: 0x0
    uint32_t TIM8EN : 1;  ///< TIM8 clock enable, reset value: 0x0
    uint32_t _RESERVED_349 : 2;
    uint32_t USART1EN : 1;  ///< USART1 clock enable, reset value: 0x0
    uint32_t USART6EN : 1;  ///< USART6 clock enable, reset value: 0x0
    uint32_t _RESERVED_350 : 2;
    uint32_t ADC1EN : 1;  ///< ADC1 clock enable, reset value: 0x0
    uint32_t ADC2EN : 1;  ///< ADC2 clock enable, reset value: 0x0
    uint32_t ADC3EN : 1;  ///< ADC3 clock enable, reset value: 0x0
    uint32_t SDIOEN : 1;  ///< SDIO clock enable, reset value: 0x0
    uint32_t SPI1EN : 1;  ///< SPI1 clock enable, reset value: 0x0
    uint32_t _RESERVED_351 : 1;
    uint32_t SYSCFGEN : 1;  ///< System configuration controller clock enable, reset value: 0x0
    uint32_t _RESERVED_352 : 1;
    uint32_t TIM9EN : 1;  ///< TIM9 clock enable, reset value: 0x0
    uint32_t TIM10EN : 1;  ///< TIM10 clock enable, reset value: 0x0
    uint32_t TIM11EN : 1;  ///< TIM11 clock enable, reset value: 0x0
  } APB2ENR;

  /** 
  * name: AHB1LPENR
  * description: AHB1 peripheral clock enable in low power mode register
  * address: 0x40023850
  * offset: 0x50
  * reset value: 0x7E6791FF
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB1LPENR_t {
    uint32_t GPIOALPEN : 1;  ///< IO port A clock enable during sleep mode, reset value: 0x1
    uint32_t GPIOBLPEN : 1;  ///< IO port B clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOCLPEN : 1;  ///< IO port C clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIODLPEN : 1;  ///< IO port D clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOELPEN : 1;  ///< IO port E clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOFLPEN : 1;  ///< IO port F clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOGLPEN : 1;  ///< IO port G clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOHLPEN : 1;  ///< IO port H clock enable during Sleep mode, reset value: 0x1
    uint32_t GPIOILPEN : 1;  ///< IO port I clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_353 : 3;
    uint32_t CRCLPEN : 1;  ///< CRC clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_354 : 2;
    uint32_t FLITFLPEN : 1;  ///< Flash interface clock enable during Sleep mode, reset value: 0x1
    uint32_t SRAM1LPEN : 1;  ///< SRAM 1interface clock enable during Sleep mode, reset value: 0x1
    uint32_t SRAM2LPEN : 1;  ///< SRAM 2 interface clock enable during Sleep mode, reset value: 0x1
    uint32_t BKPSRAMLPEN : 1;  ///< Backup SRAM interface clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_355 : 2;
    uint32_t DMA1LPEN : 1;  ///< DMA1 clock enable during Sleep mode, reset value: 0x1
    uint32_t DMA2LPEN : 1;  ///< DMA2 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_356 : 2;
    uint32_t ETHMACLPEN : 1;  ///< Ethernet MAC clock enable during Sleep mode, reset value: 0x1
    uint32_t ETHMACTXLPEN : 1;  ///< Ethernet transmission clock enable during Sleep mode, reset value: 0x1
    uint32_t ETHMACRXLPEN : 1;  ///< Ethernet reception clock enable during Sleep mode, reset value: 0x1
    uint32_t ETHMACPTPLPEN : 1;  ///< Ethernet PTP clock enable during Sleep mode, reset value: 0x1
    uint32_t OTGHSLPEN : 1;  ///< USB OTG HS clock enable during Sleep mode, reset value: 0x1
    uint32_t OTGHSULPILPEN : 1;  ///< USB OTG HS ULPI clock enable during Sleep mode, reset value: 0x1
  } AHB1LPENR;

  /** 
  * name: AHB2LPENR
  * description: AHB2 peripheral clock enable in low power mode register
  * address: 0x40023854
  * offset: 0x54
  * reset value: 0x000000F1
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB2LPENR_t {
    uint32_t DCMILPEN : 1;  ///< Camera interface enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_357 : 5;
    uint32_t RNGLPEN : 1;  ///< Random number generator clock enable during Sleep mode, reset value: 0x1
    uint32_t OTGFSLPEN : 1;  ///< USB OTG FS clock enable during Sleep mode, reset value: 0x1
  } AHB2LPENR;

  /** 
  * name: AHB3LPENR
  * description: AHB3 peripheral clock enable in low power mode register
  * address: 0x40023858
  * offset: 0x58
  * reset value: 0x00000001
  * size: 0x20
  * access: read-write
  */
  struct RCC_AHB3LPENR_t {
    uint32_t FSMCLPEN : 1;  ///< Flexible static memory controller module clock enable during Sleep mode, reset value: 0x1
  } AHB3LPENR;

  /** 
  * name: APB1LPENR
  * description: APB1 peripheral clock enable in low power mode register
  * address: 0x40023860
  * offset: 0x60
  * reset value: 0x36FEC9FF
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB1LPENR_t {
    uint32_t TIM2LPEN : 1;  ///< TIM2 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM3LPEN : 1;  ///< TIM3 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM4LPEN : 1;  ///< TIM4 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM5LPEN : 1;  ///< TIM5 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM6LPEN : 1;  ///< TIM6 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM7LPEN : 1;  ///< TIM7 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM12LPEN : 1;  ///< TIM12 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM13LPEN : 1;  ///< TIM13 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM14LPEN : 1;  ///< TIM14 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_358 : 2;
    uint32_t WWDGLPEN : 1;  ///< Window watchdog clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_359 : 2;
    uint32_t SPI2LPEN : 1;  ///< SPI2 clock enable during Sleep mode, reset value: 0x1
    uint32_t SPI3LPEN : 1;  ///< SPI3 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_360 : 1;
    uint32_t USART2LPEN : 1;  ///< USART2 clock enable during Sleep mode, reset value: 0x1
    uint32_t USART3LPEN : 1;  ///< USART3 clock enable during Sleep mode, reset value: 0x1
    uint32_t UART4LPEN : 1;  ///< UART4 clock enable during Sleep mode, reset value: 0x1
    uint32_t UART5LPEN : 1;  ///< UART5 clock enable during Sleep mode, reset value: 0x1
    uint32_t I2C1LPEN : 1;  ///< I2C1 clock enable during Sleep mode, reset value: 0x1
    uint32_t I2C2LPEN : 1;  ///< I2C2 clock enable during Sleep mode, reset value: 0x1
    uint32_t I2C3LPEN : 1;  ///< I2C3 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_361 : 1;
    uint32_t CAN1LPEN : 1;  ///< CAN 1 clock enable during Sleep mode, reset value: 0x1
    uint32_t CAN2LPEN : 1;  ///< CAN 2 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_362 : 1;
    uint32_t PWRLPEN : 1;  ///< Power interface clock enable during Sleep mode, reset value: 0x1
    uint32_t DACLPEN : 1;  ///< DAC interface clock enable during Sleep mode, reset value: 0x1
  } APB1LPENR;

  /** 
  * name: APB2LPENR
  * description: APB2 peripheral clock enabled in low power mode register
  * address: 0x40023864
  * offset: 0x64
  * reset value: 0x00075F33
  * size: 0x20
  * access: read-write
  */
  struct RCC_APB2LPENR_t {
    uint32_t TIM1LPEN : 1;  ///< TIM1 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM8LPEN : 1;  ///< TIM8 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_363 : 2;
    uint32_t USART1LPEN : 1;  ///< USART1 clock enable during Sleep mode, reset value: 0x1
    uint32_t USART6LPEN : 1;  ///< USART6 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_364 : 2;
    uint32_t ADC1LPEN : 1;  ///< ADC1 clock enable during Sleep mode, reset value: 0x1
    uint32_t ADC2LPEN : 1;  ///< ADC2 clock enable during Sleep mode, reset value: 0x1
    uint32_t ADC3LPEN : 1;  ///< ADC 3 clock enable during Sleep mode, reset value: 0x1
    uint32_t SDIOLPEN : 1;  ///< SDIO clock enable during Sleep mode, reset value: 0x1
    uint32_t SPI1LPEN : 1;  ///< SPI 1 clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_365 : 1;
    uint32_t SYSCFGLPEN : 1;  ///< System configuration controller clock enable during Sleep mode, reset value: 0x1
    uint32_t _RESERVED_366 : 1;
    uint32_t TIM9LPEN : 1;  ///< TIM9 clock enable during sleep mode, reset value: 0x1
    uint32_t TIM10LPEN : 1;  ///< TIM10 clock enable during Sleep mode, reset value: 0x1
    uint32_t TIM11LPEN : 1;  ///< TIM11 clock enable during Sleep mode, reset value: 0x1
  } APB2LPENR;

  /** 
  * name: BDCR
  * description: Backup domain control register
  * address: 0x40023870
  * offset: 0x70
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct RCC_BDCR_t {
    uint32_t LSEON : 1;  ///< External low-speed oscillator enable, reset value: 0x0
    uint32_t LSERDY : 1;  ///< External low-speed oscillator ready, reset value: 0x0
    uint32_t LSEBYP : 1;  ///< External low-speed oscillator bypass, reset value: 0x0
    uint32_t _RESERVED_367 : 5;
    uint32_t RTCSEL0 : 1;  ///< RTC clock source selection, reset value: 0x0
    uint32_t RTCSEL1 : 1;  ///< RTC clock source selection, reset value: 0x0
    uint32_t _RESERVED_368 : 5;
    uint32_t RTCEN : 1;  ///< RTC clock enable, reset value: 0x0
    uint32_t BDRST : 1;  ///< Backup domain software reset, reset value: 0x0
  } BDCR;

  /** 
  * name: CSR
  * description: clock control & status register
  * address: 0x40023874
  * offset: 0x74
  * reset value: 0x0E000000
  * size: 0x20
  * access: 
  */
  struct RCC_CSR_t {
    uint32_t LSION : 1;  ///< Internal low-speed oscillator enable, reset value: 0x0
    uint32_t LSIRDY : 1;  ///< Internal low-speed oscillator ready, reset value: 0x0
    uint32_t _RESERVED_369 : 22;
    uint32_t RMVF : 1;  ///< Remove reset flag, reset value: 0x0
    uint32_t BORRSTF : 1;  ///< BOR reset flag, reset value: 0x1
    uint32_t PADRSTF : 1;  ///< PIN reset flag, reset value: 0x1
    uint32_t PORRSTF : 1;  ///< POR/PDR reset flag, reset value: 0x1
    uint32_t SFTRSTF : 1;  ///< Software reset flag, reset value: 0x0
    uint32_t WDGRSTF : 1;  ///< Independent watchdog reset flag, reset value: 0x0
    uint32_t WWDGRSTF : 1;  ///< Window watchdog reset flag, reset value: 0x0
    uint32_t LPWRRSTF : 1;  ///< Low-power reset flag, reset value: 0x0
  } CSR;

  /** 
  * name: SSCGR
  * description: spread spectrum clock generation register
  * address: 0x40023880
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RCC_SSCGR_t {
    uint32_t MODPER : 13;  ///< Modulation period, reset value: 0x0
    uint32_t INCSTEP : 15;  ///< Incrementation step, reset value: 0x0
    uint32_t _RESERVED_370 : 2;
    uint32_t SPREADSEL : 1;  ///< Spread Select, reset value: 0x0
    uint32_t SSCGEN : 1;  ///< Spread spectrum modulation enable, reset value: 0x0
  } SSCGR;

  /** 
  * name: PLLI2SCFGR
  * description: PLLI2S configuration register
  * address: 0x40023884
  * offset: 0x84
  * reset value: 0x20003000
  * size: 0x20
  * access: read-write
  */
  struct RCC_PLLI2SCFGR_t {
    uint32_t _RESERVED_371 : 6;
    uint32_t PLLI2SNx : 9;  ///< PLLI2S multiplication factor for VCO, reset value: 0xC0
    uint32_t _RESERVED_372 : 13;
    uint32_t PLLI2SRx : 3;  ///< PLLI2S division factor for I2S clocks, reset value: 0x2
  } PLLI2SCFGR;

} RCC_t;


/** 
*  name: FLASH
*  description: FLASH
*  group: FLASH
*  address: 0x40023C00
*/
typedef struct{
  /** 
  * name: ACR
  * description: Flash access control register
  * address: 0x40023C00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct FLASH_ACR_t {
    uint32_t LATENCY : 3;  ///< Latency, reset value: 0x0
    uint32_t _RESERVED_373 : 5;
    uint32_t PRFTEN : 1;  ///< Prefetch enable, reset value: 0x0
    uint32_t ICEN : 1;  ///< Instruction cache enable, reset value: 0x0
    uint32_t DCEN : 1;  ///< Data cache enable, reset value: 0x0
    uint32_t ICRST : 1;  ///< Instruction cache reset, reset value: 0x0
    uint32_t DCRST : 1;  ///< Data cache reset, reset value: 0x0
  } ACR;

  /** 
  * name: KEYR
  * description: Flash key register
  * address: 0x40023C04
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct FLASH_KEYR_t {
    uint32_t KEY : 32;  ///< FPEC key, reset value: 0x0
  } KEYR;

  /** 
  * name: OPTKEYR
  * description: Flash option key register
  * address: 0x40023C08
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct FLASH_OPTKEYR_t {
    uint32_t OPTKEY : 32;  ///< Option byte key, reset value: 0x0
  } OPTKEYR;

  /** 
  * name: SR
  * description: Status register
  * address: 0x40023C0C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct FLASH_SR_t {
    uint32_t EOP : 1;  ///< End of operation, reset value: 0x0
    uint32_t OPERR : 1;  ///< Operation error, reset value: 0x0
    uint32_t _RESERVED_374 : 2;
    uint32_t WRPERR : 1;  ///< Write protection error, reset value: 0x0
    uint32_t PGAERR : 1;  ///< Programming alignment error, reset value: 0x0
    uint32_t PGPERR : 1;  ///< Programming parallelism error, reset value: 0x0
    uint32_t PGSERR : 1;  ///< Programming sequence error, reset value: 0x0
    uint32_t _RESERVED_375 : 8;
    uint32_t BSY : 1;  ///< Busy, reset value: 0x0
  } SR;

  /** 
  * name: CR
  * description: Control register
  * address: 0x40023C10
  * offset: 0x10
  * reset value: 0x80000000
  * size: 0x20
  * access: read-write
  */
  struct FLASH_CR_t {
    uint32_t PG : 1;  ///< Programming, reset value: 0x0
    uint32_t SER : 1;  ///< Sector Erase, reset value: 0x0
    uint32_t MER : 1;  ///< Mass Erase, reset value: 0x0
    uint32_t SNB : 4;  ///< Sector number, reset value: 0x0
    uint32_t _RESERVED_376 : 1;
    uint32_t PSIZE : 2;  ///< Program size, reset value: 0x0
    uint32_t _RESERVED_377 : 6;
    uint32_t STRT : 1;  ///< Start, reset value: 0x0
    uint32_t _RESERVED_378 : 7;
    uint32_t EOPIE : 1;  ///< End of operation interrupt enable, reset value: 0x0
    uint32_t ERRIE : 1;  ///< Error interrupt enable, reset value: 0x0
    uint32_t _RESERVED_379 : 5;
    uint32_t LOCK : 1;  ///< Lock, reset value: 0x1
  } CR;

  /** 
  * name: OPTCR
  * description: Flash option control register
  * address: 0x40023C14
  * offset: 0x14
  * reset value: 0x00000014
  * size: 0x20
  * access: read-write
  */
  struct FLASH_OPTCR_t {
    uint32_t OPTLOCK : 1;  ///< Option lock, reset value: 0x0
    uint32_t OPTSTRT : 1;  ///< Option start, reset value: 0x0
    uint32_t BOR_LEV : 2;  ///< BOR reset Level, reset value: 0x1
    uint32_t _RESERVED_380 : 1;
    uint32_t WDG_SW : 1;  ///< WDG_SW User option bytes, reset value: 0x0
    uint32_t nRST_STOP : 1;  ///< nRST_STOP User option bytes, reset value: 0x0
    uint32_t nRST_STDBY : 1;  ///< nRST_STDBY User option bytes, reset value: 0x0
    uint32_t RDP : 8;  ///< Read protect, reset value: 0x0
    uint32_t nWRP : 12;  ///< Not write protect, reset value: 0x0
  } OPTCR;

} FLASH_t;


/** 
*  name: DMA1
*  description: DMA controller
*  group: DMA
*  address: 0x40026000
*/
typedef struct{
  /** 
  * name: LISR
  * description: low interrupt status register
  * address: 0x40026000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DMA1_LISR_t {
    uint32_t FEIF0 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_381 : 1;
    uint32_t DMEIF0 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF0 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF0 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF0 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t FEIF1 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_382 : 1;
    uint32_t DMEIF1 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF1 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF1 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF1 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_383 : 4;
    uint32_t FEIF2 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_384 : 1;
    uint32_t DMEIF2 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF2 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF2 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF2 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t FEIF3 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_385 : 1;
    uint32_t DMEIF3 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF3 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF3 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF3 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
  } LISR;

  /** 
  * name: HISR
  * description: high interrupt status register
  * address: 0x40026004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DMA1_HISR_t {
    uint32_t FEIF4 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_386 : 1;
    uint32_t DMEIF4 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF4 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF4 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF4 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t FEIF5 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_387 : 1;
    uint32_t DMEIF5 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF5 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF5 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF5 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_388 : 4;
    uint32_t FEIF6 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_389 : 1;
    uint32_t DMEIF6 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF6 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF6 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF6 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t FEIF7 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_390 : 1;
    uint32_t DMEIF7 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF7 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF7 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF7 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
  } HISR;

  /** 
  * name: LIFCR
  * description: low interrupt flag clear register
  * address: 0x40026008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_LIFCR_t {
    uint32_t CFEIF0 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_391 : 1;
    uint32_t CDMEIF0 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF0 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF0 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF0 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CFEIF1 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_392 : 1;
    uint32_t CDMEIF1 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF1 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF1 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF1 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_393 : 4;
    uint32_t CFEIF2 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_394 : 1;
    uint32_t CDMEIF2 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF2 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF2 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF2 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CFEIF3 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_395 : 1;
    uint32_t CDMEIF3 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF3 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF3 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF3 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
  } LIFCR;

  /** 
  * name: HIFCR
  * description: high interrupt flag clear register
  * address: 0x4002600C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_HIFCR_t {
    uint32_t CFEIF4 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_396 : 1;
    uint32_t CDMEIF4 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF4 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF4 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF4 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CFEIF5 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_397 : 1;
    uint32_t CDMEIF5 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF5 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF5 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF5 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_398 : 4;
    uint32_t CFEIF6 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_399 : 1;
    uint32_t CDMEIF6 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF6 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF6 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF6 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CFEIF7 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_400 : 1;
    uint32_t CDMEIF7 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF7 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF7 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF7 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
  } HIFCR;

  /** 
  * name: S0CR
  * description: stream x configuration register
  * address: 0x40026010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S0CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t _RESERVED_401 : 1;
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S0CR;

  /** 
  * name: S0NDTR
  * description: stream x number of data register
  * address: 0x40026014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S0NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S0NDTR;

  /** 
  * name: S0PAR
  * description: stream x peripheral address register
  * address: 0x40026018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S0PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S0PAR;

  /** 
  * name: S0M0AR
  * description: stream x memory 0 address register
  * address: 0x4002601C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S0M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S0M0AR;

  /** 
  * name: S0M1AR
  * description: stream x memory 1 address register
  * address: 0x40026020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S0M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S0M1AR;

  /** 
  * name: S0FCR
  * description: stream x FIFO control register
  * address: 0x40026024
  * offset: 0x24
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S0FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_402 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S0FCR;

  /** 
  * name: S1CR
  * description: stream x configuration register
  * address: 0x40026028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S1CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S1CR;

  /** 
  * name: S1NDTR
  * description: stream x number of data register
  * address: 0x4002602C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S1NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S1NDTR;

  /** 
  * name: S1PAR
  * description: stream x peripheral address register
  * address: 0x40026030
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S1PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S1PAR;

  /** 
  * name: S1M0AR
  * description: stream x memory 0 address register
  * address: 0x40026034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S1M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S1M0AR;

  /** 
  * name: S1M1AR
  * description: stream x memory 1 address register
  * address: 0x40026038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S1M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S1M1AR;

  /** 
  * name: S1FCR
  * description: stream x FIFO control register
  * address: 0x4002603C
  * offset: 0x3C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S1FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_403 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S1FCR;

  /** 
  * name: S2CR
  * description: stream x configuration register
  * address: 0x40026040
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S2CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S2CR;

  /** 
  * name: S2NDTR
  * description: stream x number of data register
  * address: 0x40026044
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S2NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S2NDTR;

  /** 
  * name: S2PAR
  * description: stream x peripheral address register
  * address: 0x40026048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S2PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S2PAR;

  /** 
  * name: S2M0AR
  * description: stream x memory 0 address register
  * address: 0x4002604C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S2M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S2M0AR;

  /** 
  * name: S2M1AR
  * description: stream x memory 1 address register
  * address: 0x40026050
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S2M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S2M1AR;

  /** 
  * name: S2FCR
  * description: stream x FIFO control register
  * address: 0x40026054
  * offset: 0x54
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S2FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_404 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S2FCR;

  /** 
  * name: S3CR
  * description: stream x configuration register
  * address: 0x40026058
  * offset: 0x58
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S3CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S3CR;

  /** 
  * name: S3NDTR
  * description: stream x number of data register
  * address: 0x4002605C
  * offset: 0x5C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S3NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S3NDTR;

  /** 
  * name: S3PAR
  * description: stream x peripheral address register
  * address: 0x40026060
  * offset: 0x60
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S3PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S3PAR;

  /** 
  * name: S3M0AR
  * description: stream x memory 0 address register
  * address: 0x40026064
  * offset: 0x64
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S3M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S3M0AR;

  /** 
  * name: S3M1AR
  * description: stream x memory 1 address register
  * address: 0x40026068
  * offset: 0x68
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S3M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S3M1AR;

  /** 
  * name: S3FCR
  * description: stream x FIFO control register
  * address: 0x4002606C
  * offset: 0x6C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S3FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_405 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S3FCR;

  /** 
  * name: S4CR
  * description: stream x configuration register
  * address: 0x40026070
  * offset: 0x70
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S4CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S4CR;

  /** 
  * name: S4NDTR
  * description: stream x number of data register
  * address: 0x40026074
  * offset: 0x74
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S4NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S4NDTR;

  /** 
  * name: S4PAR
  * description: stream x peripheral address register
  * address: 0x40026078
  * offset: 0x78
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S4PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S4PAR;

  /** 
  * name: S4M0AR
  * description: stream x memory 0 address register
  * address: 0x4002607C
  * offset: 0x7C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S4M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S4M0AR;

  /** 
  * name: S4M1AR
  * description: stream x memory 1 address register
  * address: 0x40026080
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S4M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S4M1AR;

  /** 
  * name: S4FCR
  * description: stream x FIFO control register
  * address: 0x40026084
  * offset: 0x84
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S4FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_406 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S4FCR;

  /** 
  * name: S5CR
  * description: stream x configuration register
  * address: 0x40026088
  * offset: 0x88
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S5CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S5CR;

  /** 
  * name: S5NDTR
  * description: stream x number of data register
  * address: 0x4002608C
  * offset: 0x8C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S5NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S5NDTR;

  /** 
  * name: S5PAR
  * description: stream x peripheral address register
  * address: 0x40026090
  * offset: 0x90
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S5PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S5PAR;

  /** 
  * name: S5M0AR
  * description: stream x memory 0 address register
  * address: 0x40026094
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S5M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S5M0AR;

  /** 
  * name: S5M1AR
  * description: stream x memory 1 address register
  * address: 0x40026098
  * offset: 0x98
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S5M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S5M1AR;

  /** 
  * name: S5FCR
  * description: stream x FIFO control register
  * address: 0x4002609C
  * offset: 0x9C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S5FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_407 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S5FCR;

  /** 
  * name: S6CR
  * description: stream x configuration register
  * address: 0x400260A0
  * offset: 0xA0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S6CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S6CR;

  /** 
  * name: S6NDTR
  * description: stream x number of data register
  * address: 0x400260A4
  * offset: 0xA4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S6NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S6NDTR;

  /** 
  * name: S6PAR
  * description: stream x peripheral address register
  * address: 0x400260A8
  * offset: 0xA8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S6PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S6PAR;

  /** 
  * name: S6M0AR
  * description: stream x memory 0 address register
  * address: 0x400260AC
  * offset: 0xAC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S6M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S6M0AR;

  /** 
  * name: S6M1AR
  * description: stream x memory 1 address register
  * address: 0x400260B0
  * offset: 0xB0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S6M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S6M1AR;

  /** 
  * name: S6FCR
  * description: stream x FIFO control register
  * address: 0x400260B4
  * offset: 0xB4
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S6FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_408 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S6FCR;

  /** 
  * name: S7CR
  * description: stream x configuration register
  * address: 0x400260B8
  * offset: 0xB8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S7CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S7CR;

  /** 
  * name: S7NDTR
  * description: stream x number of data register
  * address: 0x400260BC
  * offset: 0xBC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S7NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S7NDTR;

  /** 
  * name: S7PAR
  * description: stream x peripheral address register
  * address: 0x400260C0
  * offset: 0xC0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S7PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S7PAR;

  /** 
  * name: S7M0AR
  * description: stream x memory 0 address register
  * address: 0x400260C4
  * offset: 0xC4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S7M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S7M0AR;

  /** 
  * name: S7M1AR
  * description: stream x memory 1 address register
  * address: 0x400260C8
  * offset: 0xC8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA1_S7M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S7M1AR;

  /** 
  * name: S7FCR
  * description: stream x FIFO control register
  * address: 0x400260CC
  * offset: 0xCC
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA1_S7FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_409 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S7FCR;

} DMA1_t;


/** 
*  name: DMA2
*  description: DMA controller
*  group: DMA
*  address: 0x40026400
*/
typedef struct{
  /** 
  * name: LISR
  * description: low interrupt status register
  * address: 0x40026400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DMA2_LISR_t {
    uint32_t FEIF0 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_410 : 1;
    uint32_t DMEIF0 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF0 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF0 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF0 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t FEIF1 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_411 : 1;
    uint32_t DMEIF1 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF1 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF1 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF1 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_412 : 4;
    uint32_t FEIF2 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_413 : 1;
    uint32_t DMEIF2 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF2 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF2 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF2 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t FEIF3 : 1;  ///< Stream x FIFO error interrupt flag (x=3..0), reset value: 0x0
    uint32_t _RESERVED_414 : 1;
    uint32_t DMEIF3 : 1;  ///< Stream x direct mode error interrupt flag (x=3..0), reset value: 0x0
    uint32_t TEIF3 : 1;  ///< Stream x transfer error interrupt flag (x=3..0), reset value: 0x0
    uint32_t HTIF3 : 1;  ///< Stream x half transfer interrupt flag (x=3..0), reset value: 0x0
    uint32_t TCIF3 : 1;  ///< Stream x transfer complete interrupt flag (x = 3..0), reset value: 0x0
  } LISR;

  /** 
  * name: HISR
  * description: high interrupt status register
  * address: 0x40026404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DMA2_HISR_t {
    uint32_t FEIF4 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_415 : 1;
    uint32_t DMEIF4 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF4 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF4 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF4 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t FEIF5 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_416 : 1;
    uint32_t DMEIF5 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF5 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF5 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF5 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_417 : 4;
    uint32_t FEIF6 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_418 : 1;
    uint32_t DMEIF6 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF6 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF6 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF6 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
    uint32_t FEIF7 : 1;  ///< Stream x FIFO error interrupt flag (x=7..4), reset value: 0x0
    uint32_t _RESERVED_419 : 1;
    uint32_t DMEIF7 : 1;  ///< Stream x direct mode error interrupt flag (x=7..4), reset value: 0x0
    uint32_t TEIF7 : 1;  ///< Stream x transfer error interrupt flag (x=7..4), reset value: 0x0
    uint32_t HTIF7 : 1;  ///< Stream x half transfer interrupt flag (x=7..4), reset value: 0x0
    uint32_t TCIF7 : 1;  ///< Stream x transfer complete interrupt flag (x=7..4), reset value: 0x0
  } HISR;

  /** 
  * name: LIFCR
  * description: low interrupt flag clear register
  * address: 0x40026408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_LIFCR_t {
    uint32_t CFEIF0 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_420 : 1;
    uint32_t CDMEIF0 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF0 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF0 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF0 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CFEIF1 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_421 : 1;
    uint32_t CDMEIF1 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF1 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF1 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF1 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_422 : 4;
    uint32_t CFEIF2 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_423 : 1;
    uint32_t CDMEIF2 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF2 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF2 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF2 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CFEIF3 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t _RESERVED_424 : 1;
    uint32_t CDMEIF3 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTEIF3 : 1;  ///< Stream x clear transfer error interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CHTIF3 : 1;  ///< Stream x clear half transfer interrupt flag (x = 3..0), reset value: 0x0
    uint32_t CTCIF3 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 3..0), reset value: 0x0
  } LIFCR;

  /** 
  * name: HIFCR
  * description: high interrupt flag clear register
  * address: 0x4002640C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_HIFCR_t {
    uint32_t CFEIF4 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_425 : 1;
    uint32_t CDMEIF4 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF4 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF4 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF4 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CFEIF5 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_426 : 1;
    uint32_t CDMEIF5 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF5 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF5 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF5 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_427 : 4;
    uint32_t CFEIF6 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_428 : 1;
    uint32_t CDMEIF6 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF6 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF6 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF6 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CFEIF7 : 1;  ///< Stream x clear FIFO error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t _RESERVED_429 : 1;
    uint32_t CDMEIF7 : 1;  ///< Stream x clear direct mode error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTEIF7 : 1;  ///< Stream x clear transfer error interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CHTIF7 : 1;  ///< Stream x clear half transfer interrupt flag (x = 7..4), reset value: 0x0
    uint32_t CTCIF7 : 1;  ///< Stream x clear transfer complete interrupt flag (x = 7..4), reset value: 0x0
  } HIFCR;

  /** 
  * name: S0CR
  * description: stream x configuration register
  * address: 0x40026410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S0CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t _RESERVED_430 : 1;
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S0CR;

  /** 
  * name: S0NDTR
  * description: stream x number of data register
  * address: 0x40026414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S0NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S0NDTR;

  /** 
  * name: S0PAR
  * description: stream x peripheral address register
  * address: 0x40026418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S0PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S0PAR;

  /** 
  * name: S0M0AR
  * description: stream x memory 0 address register
  * address: 0x4002641C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S0M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S0M0AR;

  /** 
  * name: S0M1AR
  * description: stream x memory 1 address register
  * address: 0x40026420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S0M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S0M1AR;

  /** 
  * name: S0FCR
  * description: stream x FIFO control register
  * address: 0x40026424
  * offset: 0x24
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S0FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_431 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S0FCR;

  /** 
  * name: S1CR
  * description: stream x configuration register
  * address: 0x40026428
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S1CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S1CR;

  /** 
  * name: S1NDTR
  * description: stream x number of data register
  * address: 0x4002642C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S1NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S1NDTR;

  /** 
  * name: S1PAR
  * description: stream x peripheral address register
  * address: 0x40026430
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S1PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S1PAR;

  /** 
  * name: S1M0AR
  * description: stream x memory 0 address register
  * address: 0x40026434
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S1M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S1M0AR;

  /** 
  * name: S1M1AR
  * description: stream x memory 1 address register
  * address: 0x40026438
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S1M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S1M1AR;

  /** 
  * name: S1FCR
  * description: stream x FIFO control register
  * address: 0x4002643C
  * offset: 0x3C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S1FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_432 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S1FCR;

  /** 
  * name: S2CR
  * description: stream x configuration register
  * address: 0x40026440
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S2CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S2CR;

  /** 
  * name: S2NDTR
  * description: stream x number of data register
  * address: 0x40026444
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S2NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S2NDTR;

  /** 
  * name: S2PAR
  * description: stream x peripheral address register
  * address: 0x40026448
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S2PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S2PAR;

  /** 
  * name: S2M0AR
  * description: stream x memory 0 address register
  * address: 0x4002644C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S2M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S2M0AR;

  /** 
  * name: S2M1AR
  * description: stream x memory 1 address register
  * address: 0x40026450
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S2M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S2M1AR;

  /** 
  * name: S2FCR
  * description: stream x FIFO control register
  * address: 0x40026454
  * offset: 0x54
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S2FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_433 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S2FCR;

  /** 
  * name: S3CR
  * description: stream x configuration register
  * address: 0x40026458
  * offset: 0x58
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S3CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S3CR;

  /** 
  * name: S3NDTR
  * description: stream x number of data register
  * address: 0x4002645C
  * offset: 0x5C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S3NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S3NDTR;

  /** 
  * name: S3PAR
  * description: stream x peripheral address register
  * address: 0x40026460
  * offset: 0x60
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S3PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S3PAR;

  /** 
  * name: S3M0AR
  * description: stream x memory 0 address register
  * address: 0x40026464
  * offset: 0x64
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S3M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S3M0AR;

  /** 
  * name: S3M1AR
  * description: stream x memory 1 address register
  * address: 0x40026468
  * offset: 0x68
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S3M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S3M1AR;

  /** 
  * name: S3FCR
  * description: stream x FIFO control register
  * address: 0x4002646C
  * offset: 0x6C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S3FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_434 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S3FCR;

  /** 
  * name: S4CR
  * description: stream x configuration register
  * address: 0x40026470
  * offset: 0x70
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S4CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S4CR;

  /** 
  * name: S4NDTR
  * description: stream x number of data register
  * address: 0x40026474
  * offset: 0x74
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S4NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S4NDTR;

  /** 
  * name: S4PAR
  * description: stream x peripheral address register
  * address: 0x40026478
  * offset: 0x78
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S4PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S4PAR;

  /** 
  * name: S4M0AR
  * description: stream x memory 0 address register
  * address: 0x4002647C
  * offset: 0x7C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S4M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S4M0AR;

  /** 
  * name: S4M1AR
  * description: stream x memory 1 address register
  * address: 0x40026480
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S4M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S4M1AR;

  /** 
  * name: S4FCR
  * description: stream x FIFO control register
  * address: 0x40026484
  * offset: 0x84
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S4FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_435 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S4FCR;

  /** 
  * name: S5CR
  * description: stream x configuration register
  * address: 0x40026488
  * offset: 0x88
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S5CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S5CR;

  /** 
  * name: S5NDTR
  * description: stream x number of data register
  * address: 0x4002648C
  * offset: 0x8C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S5NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S5NDTR;

  /** 
  * name: S5PAR
  * description: stream x peripheral address register
  * address: 0x40026490
  * offset: 0x90
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S5PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S5PAR;

  /** 
  * name: S5M0AR
  * description: stream x memory 0 address register
  * address: 0x40026494
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S5M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S5M0AR;

  /** 
  * name: S5M1AR
  * description: stream x memory 1 address register
  * address: 0x40026498
  * offset: 0x98
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S5M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S5M1AR;

  /** 
  * name: S5FCR
  * description: stream x FIFO control register
  * address: 0x4002649C
  * offset: 0x9C
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S5FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_436 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S5FCR;

  /** 
  * name: S6CR
  * description: stream x configuration register
  * address: 0x400264A0
  * offset: 0xA0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S6CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S6CR;

  /** 
  * name: S6NDTR
  * description: stream x number of data register
  * address: 0x400264A4
  * offset: 0xA4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S6NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S6NDTR;

  /** 
  * name: S6PAR
  * description: stream x peripheral address register
  * address: 0x400264A8
  * offset: 0xA8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S6PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S6PAR;

  /** 
  * name: S6M0AR
  * description: stream x memory 0 address register
  * address: 0x400264AC
  * offset: 0xAC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S6M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S6M0AR;

  /** 
  * name: S6M1AR
  * description: stream x memory 1 address register
  * address: 0x400264B0
  * offset: 0xB0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S6M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S6M1AR;

  /** 
  * name: S6FCR
  * description: stream x FIFO control register
  * address: 0x400264B4
  * offset: 0xB4
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S6FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_437 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S6FCR;

  /** 
  * name: S7CR
  * description: stream x configuration register
  * address: 0x400264B8
  * offset: 0xB8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S7CR_t {
    uint32_t EN : 1;  ///< Stream enable / flag stream ready when read low, reset value: 0x0
    uint32_t DMEIE : 1;  ///< Direct mode error interrupt enable, reset value: 0x0
    uint32_t TEIE : 1;  ///< Transfer error interrupt enable, reset value: 0x0
    uint32_t HTIE : 1;  ///< Half transfer interrupt enable, reset value: 0x0
    uint32_t TCIE : 1;  ///< Transfer complete interrupt enable, reset value: 0x0
    uint32_t PFCTRL : 1;  ///< Peripheral flow controller, reset value: 0x0
    uint32_t DIR : 2;  ///< Data transfer direction, reset value: 0x0
    uint32_t CIRC : 1;  ///< Circular mode, reset value: 0x0
    uint32_t PINC : 1;  ///< Peripheral increment mode, reset value: 0x0
    uint32_t MINC : 1;  ///< Memory increment mode, reset value: 0x0
    uint32_t PSIZE : 2;  ///< Peripheral data size, reset value: 0x0
    uint32_t MSIZE : 2;  ///< Memory data size, reset value: 0x0
    uint32_t PINCOS : 1;  ///< Peripheral increment offset size, reset value: 0x0
    uint32_t PL : 2;  ///< Priority level, reset value: 0x0
    uint32_t DBM : 1;  ///< Double buffer mode, reset value: 0x0
    uint32_t CT : 1;  ///< Current target (only in double buffer mode), reset value: 0x0
    uint32_t ACK : 1;  ///< ACK, reset value: 0x0
    uint32_t PBURST : 2;  ///< Peripheral burst transfer configuration, reset value: 0x0
    uint32_t MBURST : 2;  ///< Memory burst transfer configuration, reset value: 0x0
    uint32_t CHSEL : 3;  ///< Channel selection, reset value: 0x0
  } S7CR;

  /** 
  * name: S7NDTR
  * description: stream x number of data register
  * address: 0x400264BC
  * offset: 0xBC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S7NDTR_t {
    uint32_t NDT : 16;  ///< Number of data items to transfer, reset value: 0x0
  } S7NDTR;

  /** 
  * name: S7PAR
  * description: stream x peripheral address register
  * address: 0x400264C0
  * offset: 0xC0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S7PAR_t {
    uint32_t PA : 32;  ///< Peripheral address, reset value: 0x0
  } S7PAR;

  /** 
  * name: S7M0AR
  * description: stream x memory 0 address register
  * address: 0x400264C4
  * offset: 0xC4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S7M0AR_t {
    uint32_t M0A : 32;  ///< Memory 0 address, reset value: 0x0
  } S7M0AR;

  /** 
  * name: S7M1AR
  * description: stream x memory 1 address register
  * address: 0x400264C8
  * offset: 0xC8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DMA2_S7M1AR_t {
    uint32_t M1A : 32;  ///< Memory 1 address (used in case of Double buffer mode), reset value: 0x0
  } S7M1AR;

  /** 
  * name: S7FCR
  * description: stream x FIFO control register
  * address: 0x400264CC
  * offset: 0xCC
  * reset value: 0x00000021
  * size: 0x20
  * access: 
  */
  struct DMA2_S7FCR_t {
    uint32_t FTH : 2;  ///< FIFO threshold selection, reset value: 0x1
    uint32_t DMDIS : 1;  ///< Direct mode disable, reset value: 0x0
    uint32_t FS : 3;  ///< FIFO status, reset value: 0x4
    uint32_t _RESERVED_438 : 1;
    uint32_t FEIE : 1;  ///< FIFO error interrupt enable, reset value: 0x0
  } S7FCR;

} DMA2_t;


/** 
*  name: Ethernet_MAC
*  description: Ethernet: media access control (MAC)
*  group: Ethernet
*  address: 0x40028000
*/
typedef struct{
  /** 
  * name: MACCR
  * description: Ethernet MAC configuration register
  * address: 0x40028000
  * offset: 0x0
  * reset value: 0x00008000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACCR_t {
    uint32_t _RESERVED_439 : 2;
    uint32_t RE : 1;  ///< RE, reset value: 0x0
    uint32_t TE : 1;  ///< TE, reset value: 0x0
    uint32_t DC : 1;  ///< DC, reset value: 0x0
    uint32_t BL : 2;  ///< BL, reset value: 0x0
    uint32_t APCS : 1;  ///< APCS, reset value: 0x0
    uint32_t _RESERVED_440 : 1;
    uint32_t RD : 1;  ///< RD, reset value: 0x0
    uint32_t IPCO : 1;  ///< IPCO, reset value: 0x0
    uint32_t DM : 1;  ///< DM, reset value: 0x0
    uint32_t LM : 1;  ///< LM, reset value: 0x0
    uint32_t ROD : 1;  ///< ROD, reset value: 0x0
    uint32_t FES : 1;  ///< FES, reset value: 0x0
    uint32_t _RESERVED_441 : 1;
    uint32_t CSD : 1;  ///< CSD, reset value: 0x0
    uint32_t IFG : 3;  ///< IFG, reset value: 0x0
    uint32_t _RESERVED_442 : 2;
    uint32_t JD : 1;  ///< JD, reset value: 0x0
    uint32_t WD : 1;  ///< WD, reset value: 0x0
    uint32_t _RESERVED_443 : 1;
    uint32_t CSTF : 1;  ///< CSTF, reset value: 0x0
  } MACCR;

  /** 
  * name: MACFFR
  * description: Ethernet MAC frame filter register
  * address: 0x40028004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACFFR_t {
    uint32_t PM : 1;  ///< no description available, reset value: 0x0
    uint32_t HU : 1;  ///< no description available, reset value: 0x0
    uint32_t HM : 1;  ///< no description available, reset value: 0x0
    uint32_t DAIF : 1;  ///< no description available, reset value: 0x0
    uint32_t RAM : 1;  ///< no description available, reset value: 0x0
    uint32_t BFD : 1;  ///< no description available, reset value: 0x0
    uint32_t PCF : 1;  ///< no description available, reset value: 0x0
    uint32_t SAIF : 1;  ///< no description available, reset value: 0x0
    uint32_t SAF : 1;  ///< no description available, reset value: 0x0
    uint32_t HPF : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_444 : 21;
    uint32_t RA : 1;  ///< no description available, reset value: 0x0
  } MACFFR;

  /** 
  * name: MACHTHR
  * description: Ethernet MAC hash table high register
  * address: 0x40028008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACHTHR_t {
    uint32_t HTH : 32;  ///< no description available, reset value: 0x0
  } MACHTHR;

  /** 
  * name: MACHTLR
  * description: Ethernet MAC hash table low register
  * address: 0x4002800C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACHTLR_t {
    uint32_t HTL : 32;  ///< no description available, reset value: 0x0
  } MACHTLR;

  /** 
  * name: MACMIIAR
  * description: Ethernet MAC MII address register
  * address: 0x40028010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACMIIAR_t {
    uint32_t MB : 1;  ///< no description available, reset value: 0x0
    uint32_t MW : 1;  ///< no description available, reset value: 0x0
    uint32_t CR : 3;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_445 : 1;
    uint32_t MR : 5;  ///< no description available, reset value: 0x0
    uint32_t PA : 5;  ///< no description available, reset value: 0x0
  } MACMIIAR;

  /** 
  * name: MACMIIDR
  * description: Ethernet MAC MII data register
  * address: 0x40028014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACMIIDR_t {
    uint32_t TD : 16;  ///< no description available, reset value: 0x0
  } MACMIIDR;

  /** 
  * name: MACFCR
  * description: Ethernet MAC flow control register
  * address: 0x40028018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACFCR_t {
    uint32_t FCB : 1;  ///< no description available, reset value: 0x0
    uint32_t TFCE : 1;  ///< no description available, reset value: 0x0
    uint32_t RFCE : 1;  ///< no description available, reset value: 0x0
    uint32_t UPFD : 1;  ///< no description available, reset value: 0x0
    uint32_t PLT : 2;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_446 : 1;
    uint32_t ZQPD : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_447 : 8;
    uint32_t PT : 16;  ///< no description available, reset value: 0x0
  } MACFCR;

  /** 
  * name: MACVLANTR
  * description: Ethernet MAC VLAN tag register
  * address: 0x4002801C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACVLANTR_t {
    uint32_t VLANTI : 16;  ///< no description available, reset value: 0x0
    uint32_t VLANTC : 1;  ///< no description available, reset value: 0x0
  } MACVLANTR;

  /** 
  * name: MACPMTCSR
  * description: Ethernet MAC PMT control and status register
  * address: 0x4002802C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACPMTCSR_t {
    uint32_t PD : 1;  ///< no description available, reset value: 0x0
    uint32_t MPE : 1;  ///< no description available, reset value: 0x0
    uint32_t WFE : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_448 : 2;
    uint32_t MPR : 1;  ///< no description available, reset value: 0x0
    uint32_t WFR : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_449 : 2;
    uint32_t GU : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_450 : 21;
    uint32_t WFFRPR : 1;  ///< no description available, reset value: 0x0
  } MACPMTCSR;

  /** 
  * name: MACDBGR
  * description: Ethernet MAC debug register
  * address: 0x40028034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MAC_MACDBGR_t {
    uint32_t CR : 1;  ///< CR, reset value: 0x0
    uint32_t CSR : 1;  ///< CSR, reset value: 0x0
    uint32_t ROR : 1;  ///< ROR, reset value: 0x0
    uint32_t MCF : 1;  ///< MCF, reset value: 0x0
    uint32_t MCP : 1;  ///< MCP, reset value: 0x0
    uint32_t MCFHP : 1;  ///< MCFHP, reset value: 0x0
  } MACDBGR;

  /** 
  * name: MACSR
  * description: Ethernet MAC interrupt status register
  * address: 0x40028038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct Ethernet_MAC_MACSR_t {
    uint32_t _RESERVED_451 : 3;
    uint32_t PMTS : 1;  ///< no description available, reset value: 0x0
    uint32_t MMCS : 1;  ///< no description available, reset value: 0x0
    uint32_t MMCRS : 1;  ///< no description available, reset value: 0x0
    uint32_t MMCTS : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_452 : 2;
    uint32_t TSTS : 1;  ///< no description available, reset value: 0x0
  } MACSR;

  /** 
  * name: MACIMR
  * description: Ethernet MAC interrupt mask register
  * address: 0x4002803C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACIMR_t {
    uint32_t _RESERVED_453 : 3;
    uint32_t PMTIM : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_454 : 5;
    uint32_t TSTIM : 1;  ///< no description available, reset value: 0x0
  } MACIMR;

  /** 
  * name: MACA0HR
  * description: Ethernet MAC address 0 high register
  * address: 0x40028040
  * offset: 0x40
  * reset value: 0x0010FFFF
  * size: 0x20
  * access: 
  */
  struct Ethernet_MAC_MACA0HR_t {
    uint32_t MACA0H : 16;  ///< MAC address0 high, reset value: 0xFFFF
    uint32_t _RESERVED_455 : 15;
    uint32_t MO : 1;  ///< Always 1, reset value: 0x0
  } MACA0HR;

  /** 
  * name: MACA0LR
  * description: Ethernet MAC address 0 low register
  * address: 0x40028044
  * offset: 0x44
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA0LR_t {
    uint32_t MACA0L : 32;  ///< 0, reset value: 0xFFFFFFFF
  } MACA0LR;

  /** 
  * name: MACA1HR
  * description: Ethernet MAC address 1 high register
  * address: 0x40028048
  * offset: 0x48
  * reset value: 0x0000FFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA1HR_t {
    uint32_t MACA1H : 16;  ///< no description available, reset value: 0xFFFF
    uint32_t _RESERVED_456 : 8;
    uint32_t MBC : 6;  ///< no description available, reset value: 0x0
    uint32_t SA : 1;  ///< no description available, reset value: 0x0
    uint32_t AE : 1;  ///< no description available, reset value: 0x0
  } MACA1HR;

  /** 
  * name: MACA1LR
  * description: Ethernet MAC address1 low register
  * address: 0x4002804C
  * offset: 0x4C
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA1LR_t {
    uint32_t MACA1LR : 32;  ///< no description available, reset value: 0xFFFFFFFF
  } MACA1LR;

  /** 
  * name: MACA2HR
  * description: Ethernet MAC address 2 high register
  * address: 0x40028050
  * offset: 0x50
  * reset value: 0x0000FFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA2HR_t {
    uint32_t MAC2AH : 16;  ///< no description available, reset value: 0xFFFF
    uint32_t _RESERVED_457 : 8;
    uint32_t MBC : 6;  ///< no description available, reset value: 0x0
    uint32_t SA : 1;  ///< no description available, reset value: 0x0
    uint32_t AE : 1;  ///< no description available, reset value: 0x0
  } MACA2HR;

  /** 
  * name: MACA2LR
  * description: Ethernet MAC address 2 low register
  * address: 0x40028054
  * offset: 0x54
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA2LR_t {
    uint32_t MACA2L : 31;  ///< no description available, reset value: 0x7FFFFFFF
  } MACA2LR;

  /** 
  * name: MACA3HR
  * description: Ethernet MAC address 3 high register
  * address: 0x40028058
  * offset: 0x58
  * reset value: 0x0000FFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA3HR_t {
    uint32_t MACA3H : 16;  ///< no description available, reset value: 0xFFFF
    uint32_t _RESERVED_458 : 8;
    uint32_t MBC : 6;  ///< no description available, reset value: 0x0
    uint32_t SA : 1;  ///< no description available, reset value: 0x0
    uint32_t AE : 1;  ///< no description available, reset value: 0x0
  } MACA3HR;

  /** 
  * name: MACA3LR
  * description: Ethernet MAC address 3 low register
  * address: 0x4002805C
  * offset: 0x5C
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MAC_MACA3LR_t {
    uint32_t MBCA3L : 32;  ///< no description available, reset value: 0xFFFFFFFF
  } MACA3LR;

} Ethernet_MAC_t;


/** 
*  name: Ethernet_MMC
*  description: Ethernet: MAC management counters
*  group: Ethernet
*  address: 0x40028100
*/
typedef struct{
  /** 
  * name: MMCCR
  * description: Ethernet MMC control register
  * address: 0x40028100
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MMC_MMCCR_t {
    uint32_t CR : 1;  ///< no description available, reset value: 0x0
    uint32_t CSR : 1;  ///< no description available, reset value: 0x0
    uint32_t ROR : 1;  ///< no description available, reset value: 0x0
    uint32_t MCF : 1;  ///< no description available, reset value: 0x0
    uint32_t MCP : 1;  ///< no description available, reset value: 0x0
    uint32_t MCFHP : 1;  ///< no description available, reset value: 0x0
  } MMCCR;

  /** 
  * name: MMCRIR
  * description: Ethernet MMC receive interrupt register
  * address: 0x40028104
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MMC_MMCRIR_t {
    uint32_t _RESERVED_459 : 5;
    uint32_t RFCES : 1;  ///< no description available, reset value: 0x0
    uint32_t RFAES : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_460 : 10;
    uint32_t RGUFS : 1;  ///< no description available, reset value: 0x0
  } MMCRIR;

  /** 
  * name: MMCTIR
  * description: Ethernet MMC transmit interrupt register
  * address: 0x40028108
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCTIR_t {
    uint32_t _RESERVED_461 : 14;
    uint32_t TGFSCS : 1;  ///< no description available, reset value: 0x0
    uint32_t TGFMSCS : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_462 : 5;
    uint32_t TGFS : 1;  ///< no description available, reset value: 0x0
  } MMCTIR;

  /** 
  * name: MMCRIMR
  * description: Ethernet MMC receive interrupt mask register
  * address: 0x4002810C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MMC_MMCRIMR_t {
    uint32_t _RESERVED_463 : 5;
    uint32_t RFCEM : 1;  ///< no description available, reset value: 0x0
    uint32_t RFAEM : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_464 : 10;
    uint32_t RGUFM : 1;  ///< no description available, reset value: 0x0
  } MMCRIMR;

  /** 
  * name: MMCTIMR
  * description: Ethernet MMC transmit interrupt mask register
  * address: 0x40028110
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_MMC_MMCTIMR_t {
    uint32_t _RESERVED_465 : 14;
    uint32_t TGFSCM : 1;  ///< no description available, reset value: 0x0
    uint32_t TGFMSCM : 1;  ///< no description available, reset value: 0x0
    uint32_t TGFM : 1;  ///< no description available, reset value: 0x0
  } MMCTIMR;

  const uint8_t _RESERVED_466[28];

  /** 
  * name: MMCTGFSCCR
  * description: Ethernet MMC transmitted good frames after a single collision counter
  * address: 0x4002814C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCTGFSCCR_t {
    uint32_t TGFSCC : 32;  ///< no description available, reset value: 0x0
  } MMCTGFSCCR;

  /** 
  * name: MMCTGFMSCCR
  * description: Ethernet MMC transmitted good frames after more than a single collision
  * address: 0x40028150
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCTGFMSCCR_t {
    uint32_t TGFMSCC : 32;  ///< no description available, reset value: 0x0
  } MMCTGFMSCCR;

  /** 
  * name: MMCTGFCR
  * description: Ethernet MMC transmitted good frames counter register
  * address: 0x40028168
  * offset: 0x68
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCTGFCR_t {
    uint32_t TGFC : 32;  ///< HTL, reset value: 0x0
  } MMCTGFCR;

  const uint8_t _RESERVED_467[12];

  /** 
  * name: MMCRFCECR
  * description: Ethernet MMC received frames with CRC error counter register
  * address: 0x40028194
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCRFCECR_t {
    uint32_t RFCFC : 32;  ///< no description available, reset value: 0x0
  } MMCRFCECR;

  /** 
  * name: MMCRFAECR
  * description: Ethernet MMC received frames with alignment error counter register
  * address: 0x40028198
  * offset: 0x98
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCRFAECR_t {
    uint32_t RFAEC : 32;  ///< no description available, reset value: 0x0
  } MMCRFAECR;

  const uint8_t _RESERVED_468[12];

  /** 
  * name: MMCRGUFCR
  * description: MMC received good unicast frames counter register
  * address: 0x400281C4
  * offset: 0xC4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_MMC_MMCRGUFCR_t {
    uint32_t RGUFC : 32;  ///< no description available, reset value: 0x0
  } MMCRGUFCR;

} Ethernet_MMC_t;


/** 
*  name: Ethernet_PTP
*  description: Ethernet: Precision time protocol
*  group: Ethernet
*  address: 0x40028700
*/
typedef struct{
  /** 
  * name: PTPTSCR
  * description: Ethernet PTP time stamp control register
  * address: 0x40028700
  * offset: 0x0
  * reset value: 0x00002000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTSCR_t {
    uint32_t TSE : 1;  ///< no description available, reset value: 0x0
    uint32_t TSFCU : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSTI : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSTU : 1;  ///< no description available, reset value: 0x0
    uint32_t TSITE : 1;  ///< no description available, reset value: 0x0
    uint32_t TTSARU : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_469 : 2;
    uint32_t TSSARFE : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSSR : 1;  ///< no description available, reset value: 0x0
    uint32_t TSPTPPSV2E : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSPTPOEFE : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSIPV6FE : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSIPV4FE : 1;  ///< no description available, reset value: 0x1
    uint32_t TSSEME : 1;  ///< no description available, reset value: 0x0
    uint32_t TSSMRME : 1;  ///< no description available, reset value: 0x0
    uint32_t TSCNT : 2;  ///< no description available, reset value: 0x0
    uint32_t TSPFFMAE : 1;  ///< no description available, reset value: 0x0
  } PTPTSCR;

  /** 
  * name: PTPSSIR
  * description: Ethernet PTP subsecond increment register
  * address: 0x40028704
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPSSIR_t {
    uint32_t STSSI : 8;  ///< no description available, reset value: 0x0
  } PTPSSIR;

  /** 
  * name: PTPTSHR
  * description: Ethernet PTP time stamp high register
  * address: 0x40028708
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_PTP_PTPTSHR_t {
    uint32_t STS : 32;  ///< no description available, reset value: 0x0
  } PTPTSHR;

  /** 
  * name: PTPTSLR
  * description: Ethernet PTP time stamp low register
  * address: 0x4002870C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_PTP_PTPTSLR_t {
    uint32_t STSS : 31;  ///< no description available, reset value: 0x0
    uint32_t STPNS : 1;  ///< no description available, reset value: 0x0
  } PTPTSLR;

  /** 
  * name: PTPTSHUR
  * description: Ethernet PTP time stamp high update register
  * address: 0x40028710
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTSHUR_t {
    uint32_t TSUS : 32;  ///< no description available, reset value: 0x0
  } PTPTSHUR;

  /** 
  * name: PTPTSLUR
  * description: Ethernet PTP time stamp low update register
  * address: 0x40028714
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTSLUR_t {
    uint32_t TSUSS : 31;  ///< no description available, reset value: 0x0
    uint32_t TSUPNS : 1;  ///< no description available, reset value: 0x0
  } PTPTSLUR;

  /** 
  * name: PTPTSAR
  * description: Ethernet PTP time stamp addend register
  * address: 0x40028718
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTSAR_t {
    uint32_t TSA : 32;  ///< no description available, reset value: 0x0
  } PTPTSAR;

  /** 
  * name: PTPTTHR
  * description: Ethernet PTP target time high register
  * address: 0x4002871C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTTHR_t {
    uint32_t TTSH : 32;  ///< 0, reset value: 0x0
  } PTPTTHR;

  /** 
  * name: PTPTTLR
  * description: Ethernet PTP target time low register
  * address: 0x40028720
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_PTP_PTPTTLR_t {
    uint32_t TTSL : 32;  ///< no description available, reset value: 0x0
  } PTPTTLR;

  /** 
  * name: PTPTSSR
  * description: Ethernet PTP time stamp status register
  * address: 0x40028728
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_PTP_PTPTSSR_t {
    uint32_t TSSO : 1;  ///< no description available, reset value: 0x0
    uint32_t TSTTR : 1;  ///< no description available, reset value: 0x0
  } PTPTSSR;

  /** 
  * name: PTPPPSCR
  * description: Ethernet PTP PPS control register
  * address: 0x4002872C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_PTP_PTPPPSCR_t {
    uint32_t TSSO : 1;  ///< TSSO, reset value: 0x0
    uint32_t TSTTR : 1;  ///< TSTTR, reset value: 0x0
  } PTPPPSCR;

} Ethernet_PTP_t;


/** 
*  name: Ethernet_DMA
*  description: Ethernet: DMA controller operation
*  group: Ethernet
*  address: 0x40029000
*/
typedef struct{
  /** 
  * name: DMABMR
  * description: Ethernet DMA bus mode register
  * address: 0x40029000
  * offset: 0x0
  * reset value: 0x00002101
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMABMR_t {
    uint32_t SR : 1;  ///< no description available, reset value: 0x1
    uint32_t DA : 1;  ///< no description available, reset value: 0x0
    uint32_t DSL : 5;  ///< no description available, reset value: 0x0
    uint32_t EDFE : 1;  ///< no description available, reset value: 0x0
    uint32_t PBL : 6;  ///< no description available, reset value: 0x21
    uint32_t RTPR : 2;  ///< no description available, reset value: 0x0
    uint32_t FB : 1;  ///< no description available, reset value: 0x0
    uint32_t RDP : 6;  ///< no description available, reset value: 0x0
    uint32_t USP : 1;  ///< no description available, reset value: 0x0
    uint32_t FPM : 1;  ///< no description available, reset value: 0x0
    uint32_t AAB : 1;  ///< no description available, reset value: 0x0
    uint32_t MB : 1;  ///< no description available, reset value: 0x0
  } DMABMR;

  /** 
  * name: DMATPDR
  * description: Ethernet DMA transmit poll demand register
  * address: 0x40029004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMATPDR_t {
    uint32_t TPD : 32;  ///< no description available, reset value: 0x0
  } DMATPDR;

  /** 
  * name: DMARPDR
  * description: EHERNET DMA receive poll demand register
  * address: 0x40029008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMARPDR_t {
    uint32_t RPD : 32;  ///< RPD, reset value: 0x0
  } DMARPDR;

  /** 
  * name: DMARDLAR
  * description: Ethernet DMA receive descriptor list address register
  * address: 0x4002900C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMARDLAR_t {
    uint32_t SRL : 32;  ///< no description available, reset value: 0x0
  } DMARDLAR;

  /** 
  * name: DMATDLAR
  * description: Ethernet DMA transmit descriptor list address register
  * address: 0x40029010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMATDLAR_t {
    uint32_t STL : 32;  ///< no description available, reset value: 0x0
  } DMATDLAR;

  /** 
  * name: DMASR
  * description: Ethernet DMA status register
  * address: 0x40029014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct Ethernet_DMA_DMASR_t {
    uint32_t TS : 1;  ///< no description available, reset value: 0x0
    uint32_t TPSS : 1;  ///< no description available, reset value: 0x0
    uint32_t TBUS : 1;  ///< no description available, reset value: 0x0
    uint32_t TJTS : 1;  ///< no description available, reset value: 0x0
    uint32_t ROS : 1;  ///< no description available, reset value: 0x0
    uint32_t TUS : 1;  ///< no description available, reset value: 0x0
    uint32_t RS : 1;  ///< no description available, reset value: 0x0
    uint32_t RBUS : 1;  ///< no description available, reset value: 0x0
    uint32_t RPSS : 1;  ///< no description available, reset value: 0x0
    uint32_t PWTS : 1;  ///< no description available, reset value: 0x0
    uint32_t ETS : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_470 : 2;
    uint32_t FBES : 1;  ///< no description available, reset value: 0x0
    uint32_t ERS : 1;  ///< no description available, reset value: 0x0
    uint32_t AIS : 1;  ///< no description available, reset value: 0x0
    uint32_t NIS : 1;  ///< no description available, reset value: 0x0
    uint32_t RPS : 3;  ///< no description available, reset value: 0x0
    uint32_t TPS : 3;  ///< no description available, reset value: 0x0
    uint32_t EBS : 3;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_471 : 1;
    uint32_t MMCS : 1;  ///< no description available, reset value: 0x0
    uint32_t PMTS : 1;  ///< no description available, reset value: 0x0
    uint32_t TSTS : 1;  ///< no description available, reset value: 0x0
  } DMASR;

  /** 
  * name: DMAOMR
  * description: Ethernet DMA operation mode register
  * address: 0x40029018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMAOMR_t {
    uint32_t _RESERVED_472 : 1;
    uint32_t SR : 1;  ///< SR, reset value: 0x0
    uint32_t OSF : 1;  ///< OSF, reset value: 0x0
    uint32_t RTC : 2;  ///< RTC, reset value: 0x0
    uint32_t _RESERVED_473 : 1;
    uint32_t FUGF : 1;  ///< FUGF, reset value: 0x0
    uint32_t FEF : 1;  ///< FEF, reset value: 0x0
    uint32_t _RESERVED_474 : 5;
    uint32_t ST : 1;  ///< ST, reset value: 0x0
    uint32_t TTC : 3;  ///< TTC, reset value: 0x0
    uint32_t _RESERVED_475 : 3;
    uint32_t FTF : 1;  ///< FTF, reset value: 0x0
    uint32_t TSF : 1;  ///< TSF, reset value: 0x0
    uint32_t _RESERVED_476 : 2;
    uint32_t DFRF : 1;  ///< DFRF, reset value: 0x0
    uint32_t RSF : 1;  ///< RSF, reset value: 0x0
    uint32_t DTCEFD : 1;  ///< DTCEFD, reset value: 0x0
  } DMAOMR;

  /** 
  * name: DMAIER
  * description: Ethernet DMA interrupt enable register
  * address: 0x4002901C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMAIER_t {
    uint32_t TIE : 1;  ///< no description available, reset value: 0x0
    uint32_t TPSIE : 1;  ///< no description available, reset value: 0x0
    uint32_t TBUIE : 1;  ///< no description available, reset value: 0x0
    uint32_t TJTIE : 1;  ///< no description available, reset value: 0x0
    uint32_t ROIE : 1;  ///< no description available, reset value: 0x0
    uint32_t TUIE : 1;  ///< no description available, reset value: 0x0
    uint32_t RIE : 1;  ///< no description available, reset value: 0x0
    uint32_t RBUIE : 1;  ///< no description available, reset value: 0x0
    uint32_t RPSIE : 1;  ///< no description available, reset value: 0x0
    uint32_t RWTIE : 1;  ///< no description available, reset value: 0x0
    uint32_t ETIE : 1;  ///< no description available, reset value: 0x0
    uint32_t _RESERVED_477 : 2;
    uint32_t FBEIE : 1;  ///< no description available, reset value: 0x0
    uint32_t ERIE : 1;  ///< no description available, reset value: 0x0
    uint32_t AISE : 1;  ///< no description available, reset value: 0x0
    uint32_t NISE : 1;  ///< no description available, reset value: 0x0
  } DMAIER;

  /** 
  * name: DMAMFBOCR
  * description: Ethernet DMA missed frame and buffer overflow counter register
  * address: 0x40029020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMAMFBOCR_t {
    uint32_t MFC : 16;  ///< no description available, reset value: 0x0
    uint32_t OMFC : 1;  ///< no description available, reset value: 0x0
    uint32_t MFA : 11;  ///< no description available, reset value: 0x0
    uint32_t OFOC : 1;  ///< no description available, reset value: 0x0
  } DMAMFBOCR;

  /** 
  * name: DMARSWTR
  * description: Ethernet DMA receive status watchdog timer register
  * address: 0x40029024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct Ethernet_DMA_DMARSWTR_t {
    uint32_t RSWTC : 8;  ///< RSWTC, reset value: 0x0
  } DMARSWTR;

  const uint8_t _RESERVED_478[4];

  /** 
  * name: DMACHTDR
  * description: Ethernet DMA current host transmit descriptor register
  * address: 0x40029048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_DMA_DMACHTDR_t {
    uint32_t HTDAP : 32;  ///< HTDAP, reset value: 0x0
  } DMACHTDR;

  /** 
  * name: DMACHRDR
  * description: Ethernet DMA current host receive descriptor register
  * address: 0x4002904C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_DMA_DMACHRDR_t {
    uint32_t HRDAP : 32;  ///< HRDAP, reset value: 0x0
  } DMACHRDR;

  /** 
  * name: DMACHTBAR
  * description: Ethernet DMA current host transmit buffer address register
  * address: 0x40029050
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_DMA_DMACHTBAR_t {
    uint32_t HTBAP : 32;  ///< no description available, reset value: 0x0
  } DMACHTBAR;

  /** 
  * name: DMACHRBAR
  * description: Ethernet DMA current host receive buffer address register
  * address: 0x40029054
  * offset: 0x54
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct Ethernet_DMA_DMACHRBAR_t {
    uint32_t HRBAP : 32;  ///< no description available, reset value: 0x0
  } DMACHRBAR;

} Ethernet_DMA_t;


/** 
*  name: OTG_HS_GLOBAL
*  description: USB on the go high speed
*  group: USB_OTG_HS
*  address: 0x40040000
*/
typedef struct{
  /** 
  * name: OTG_HS_GOTGCTL
  * description: OTG_HS control and status register
  * address: 0x40040000
  * offset: 0x0
  * reset value: 0x00000800
  * size: 0x20
  * access: 
  */
  struct OTG_HS_GLOBAL_OTG_HS_GOTGCTL_t {
    uint32_t SRQSCS : 1;  ///< Session request success, reset value: 0x0
    uint32_t SRQ : 1;  ///< Session request, reset value: 0x0
    uint32_t _RESERVED_479 : 6;
    uint32_t HNGSCS : 1;  ///< Host negotiation success, reset value: 0x0
    uint32_t HNPRQ : 1;  ///< HNP request, reset value: 0x0
    uint32_t HSHNPEN : 1;  ///< Host set HNP enable, reset value: 0x0
    uint32_t DHNPEN : 1;  ///< Device HNP enabled, reset value: 0x1
    uint32_t _RESERVED_480 : 4;
    uint32_t CIDSTS : 1;  ///< Connector ID status, reset value: 0x0
    uint32_t DBCT : 1;  ///< Long/short debounce time, reset value: 0x0
    uint32_t ASVLD : 1;  ///< A-session valid, reset value: 0x0
    uint32_t BSVLD : 1;  ///< B-session valid, reset value: 0x0
  } OTG_HS_GOTGCTL;

  /** 
  * name: OTG_HS_GOTGINT
  * description: OTG_HS interrupt register
  * address: 0x40040004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_GOTGINT_t {
    uint32_t _RESERVED_481 : 2;
    uint32_t SEDET : 1;  ///< Session end detected, reset value: 0x0
    uint32_t _RESERVED_482 : 5;
    uint32_t SRSSCHG : 1;  ///< Session request success status change, reset value: 0x0
    uint32_t HNSSCHG : 1;  ///< Host negotiation success status change, reset value: 0x0
    uint32_t _RESERVED_483 : 7;
    uint32_t HNGDET : 1;  ///< Host negotiation detected, reset value: 0x0
    uint32_t ADTOCHG : 1;  ///< A-device timeout change, reset value: 0x0
    uint32_t DBCDNE : 1;  ///< Debounce done, reset value: 0x0
  } OTG_HS_GOTGINT;

  /** 
  * name: OTG_HS_GAHBCFG
  * description: OTG_HS AHB configuration register
  * address: 0x40040008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_GAHBCFG_t {
    uint32_t GINT : 1;  ///< Global interrupt mask, reset value: 0x0
    uint32_t HBSTLEN : 4;  ///< Burst length/type, reset value: 0x0
    uint32_t DMAEN : 1;  ///< DMA enable, reset value: 0x0
    uint32_t _RESERVED_484 : 1;
    uint32_t TXFELVL : 1;  ///< TxFIFO empty level, reset value: 0x0
    uint32_t PTXFELVL : 1;  ///< Periodic TxFIFO empty level, reset value: 0x0
  } OTG_HS_GAHBCFG;

  /** 
  * name: OTG_HS_GUSBCFG
  * description: OTG_HS USB configuration register
  * address: 0x4004000C
  * offset: 0xC
  * reset value: 0x00000A00
  * size: 0x20
  * access: 
  */
  struct OTG_HS_GLOBAL_OTG_HS_GUSBCFG_t {
    uint32_t TOCAL : 3;  ///< FS timeout calibration, reset value: 0x0
    uint32_t _RESERVED_485 : 3;
    uint32_t PHYSEL : 1;  ///< USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select, reset value: 0x0
    uint32_t _RESERVED_486 : 1;
    uint32_t SRPCAP : 1;  ///< SRP-capable, reset value: 0x0
    uint32_t HNPCAP : 1;  ///< HNP-capable, reset value: 0x1
    uint32_t TRDT : 4;  ///< USB turnaround time, reset value: 0x2
    uint32_t _RESERVED_487 : 1;
    uint32_t PHYLPCS : 1;  ///< PHY Low-power clock select, reset value: 0x0
    uint32_t _RESERVED_488 : 1;
    uint32_t ULPIFSLS : 1;  ///< ULPI FS/LS select, reset value: 0x0
    uint32_t ULPIAR : 1;  ///< ULPI Auto-resume, reset value: 0x0
    uint32_t ULPICSM : 1;  ///< ULPI Clock SuspendM, reset value: 0x0
    uint32_t ULPIEVBUSD : 1;  ///< ULPI External VBUS Drive, reset value: 0x0
    uint32_t ULPIEVBUSI : 1;  ///< ULPI external VBUS indicator, reset value: 0x0
    uint32_t TSDPS : 1;  ///< TermSel DLine pulsing selection, reset value: 0x0
    uint32_t PCCI : 1;  ///< Indicator complement, reset value: 0x0
    uint32_t PTCI : 1;  ///< Indicator pass through, reset value: 0x0
    uint32_t ULPIIPD : 1;  ///< ULPI interface protect disable, reset value: 0x0
    uint32_t _RESERVED_489 : 3;
    uint32_t FHMOD : 1;  ///< Forced host mode, reset value: 0x0
    uint32_t FDMOD : 1;  ///< Forced peripheral mode, reset value: 0x0
    uint32_t CTXPKT : 1;  ///< Corrupt Tx packet, reset value: 0x0
  } OTG_HS_GUSBCFG;

  /** 
  * name: OTG_HS_GRSTCTL
  * description: OTG_HS reset register
  * address: 0x40040010
  * offset: 0x10
  * reset value: 0x20000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_GLOBAL_OTG_HS_GRSTCTL_t {
    uint32_t CSRST : 1;  ///< Core soft reset, reset value: 0x0
    uint32_t HSRST : 1;  ///< HCLK soft reset, reset value: 0x0
    uint32_t FCRST : 1;  ///< Host frame counter reset, reset value: 0x0
    uint32_t _RESERVED_490 : 1;
    uint32_t RXFFLSH : 1;  ///< RxFIFO flush, reset value: 0x0
    uint32_t TXFFLSH : 1;  ///< TxFIFO flush, reset value: 0x0
    uint32_t TXFNUM : 5;  ///< TxFIFO number, reset value: 0x0
    uint32_t _RESERVED_491 : 19;
    uint32_t DMAREQ : 1;  ///< DMA request signal, reset value: 0x0
    uint32_t AHBIDL : 1;  ///< AHB master idle, reset value: 0x0
  } OTG_HS_GRSTCTL;

  /** 
  * name: OTG_HS_GINTSTS
  * description: OTG_HS core interrupt register
  * address: 0x40040014
  * offset: 0x14
  * reset value: 0x04000020
  * size: 0x20
  * access: 
  */
  struct OTG_HS_GLOBAL_OTG_HS_GINTSTS_t {
    uint32_t CMOD : 1;  ///< Current mode of operation, reset value: 0x0
    uint32_t MMIS : 1;  ///< Mode mismatch interrupt, reset value: 0x0
    uint32_t OTGINT : 1;  ///< OTG interrupt, reset value: 0x0
    uint32_t SOF : 1;  ///< Start of frame, reset value: 0x0
    uint32_t RXFLVL : 1;  ///< RxFIFO nonempty, reset value: 0x0
    uint32_t NPTXFE : 1;  ///< Nonperiodic TxFIFO empty, reset value: 0x1
    uint32_t GINAKEFF : 1;  ///< Global IN nonperiodic NAK effective, reset value: 0x0
    uint32_t BOUTNAKEFF : 1;  ///< Global OUT NAK effective, reset value: 0x0
    uint32_t _RESERVED_492 : 2;
    uint32_t ESUSP : 1;  ///< Early suspend, reset value: 0x0
    uint32_t USBSUSP : 1;  ///< USB suspend, reset value: 0x0
    uint32_t USBRST : 1;  ///< USB reset, reset value: 0x0
    uint32_t ENUMDNE : 1;  ///< Enumeration done, reset value: 0x0
    uint32_t ISOODRP : 1;  ///< Isochronous OUT packet dropped interrupt, reset value: 0x0
    uint32_t EOPF : 1;  ///< End of periodic frame interrupt, reset value: 0x0
    uint32_t _RESERVED_493 : 2;
    uint32_t IEPINT : 1;  ///< IN endpoint interrupt, reset value: 0x0
    uint32_t OEPINT : 1;  ///< OUT endpoint interrupt, reset value: 0x0
    uint32_t IISOIXFR : 1;  ///< Incomplete isochronous IN transfer, reset value: 0x0
    uint32_t PXFR_INCOMPISOOUT : 1;  ///< Incomplete periodic transfer, reset value: 0x0
    uint32_t DATAFSUSP : 1;  ///< Data fetch suspended, reset value: 0x0
    uint32_t _RESERVED_494 : 1;
    uint32_t HPRTINT : 1;  ///< Host port interrupt, reset value: 0x0
    uint32_t HCINT : 1;  ///< Host channels interrupt, reset value: 0x0
    uint32_t PTXFE : 1;  ///< Periodic TxFIFO empty, reset value: 0x1
    uint32_t _RESERVED_495 : 1;
    uint32_t CIDSCHG : 1;  ///< Connector ID status change, reset value: 0x0
    uint32_t DISCINT : 1;  ///< Disconnect detected interrupt, reset value: 0x0
    uint32_t SRQINT : 1;  ///< Session request/new session detected interrupt, reset value: 0x0
    uint32_t WKUINT : 1;  ///< Resume/remote wakeup detected interrupt, reset value: 0x0
  } OTG_HS_GINTSTS;

  /** 
  * name: OTG_HS_GINTMSK
  * description: OTG_HS interrupt mask register
  * address: 0x40040018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_GLOBAL_OTG_HS_GINTMSK_t {
    uint32_t _RESERVED_496 : 1;
    uint32_t MMISM : 1;  ///< Mode mismatch interrupt mask, reset value: 0x0
    uint32_t OTGINT : 1;  ///< OTG interrupt mask, reset value: 0x0
    uint32_t SOFM : 1;  ///< Start of frame mask, reset value: 0x0
    uint32_t RXFLVLM : 1;  ///< Receive FIFO nonempty mask, reset value: 0x0
    uint32_t NPTXFEM : 1;  ///< Nonperiodic TxFIFO empty mask, reset value: 0x0
    uint32_t GINAKEFFM : 1;  ///< Global nonperiodic IN NAK effective mask, reset value: 0x0
    uint32_t GONAKEFFM : 1;  ///< Global OUT NAK effective mask, reset value: 0x0
    uint32_t _RESERVED_497 : 2;
    uint32_t ESUSPM : 1;  ///< Early suspend mask, reset value: 0x0
    uint32_t USBSUSPM : 1;  ///< USB suspend mask, reset value: 0x0
    uint32_t USBRST : 1;  ///< USB reset mask, reset value: 0x0
    uint32_t ENUMDNEM : 1;  ///< Enumeration done mask, reset value: 0x0
    uint32_t ISOODRPM : 1;  ///< Isochronous OUT packet dropped interrupt mask, reset value: 0x0
    uint32_t EOPFM : 1;  ///< End of periodic frame interrupt mask, reset value: 0x0
    uint32_t _RESERVED_498 : 1;
    uint32_t EPMISM : 1;  ///< Endpoint mismatch interrupt mask, reset value: 0x0
    uint32_t IEPINT : 1;  ///< IN endpoints interrupt mask, reset value: 0x0
    uint32_t OEPINT : 1;  ///< OUT endpoints interrupt mask, reset value: 0x0
    uint32_t IISOIXFRM : 1;  ///< Incomplete isochronous IN transfer mask, reset value: 0x0
    uint32_t PXFRM_IISOOXFRM : 1;  ///< Incomplete periodic transfer mask, reset value: 0x0
    uint32_t FSUSPM : 1;  ///< Data fetch suspended mask, reset value: 0x0
    uint32_t _RESERVED_499 : 1;
    uint32_t PRTIM : 1;  ///< Host port interrupt mask, reset value: 0x0
    uint32_t HCIM : 1;  ///< Host channels interrupt mask, reset value: 0x0
    uint32_t PTXFEM : 1;  ///< Periodic TxFIFO empty mask, reset value: 0x0
    uint32_t _RESERVED_500 : 1;
    uint32_t CIDSCHGM : 1;  ///< Connector ID status change mask, reset value: 0x0
    uint32_t DISCINT : 1;  ///< Disconnect detected interrupt mask, reset value: 0x0
    uint32_t SRQIM : 1;  ///< Session request/new session detected interrupt mask, reset value: 0x0
    uint32_t WUIM : 1;  ///< Resume/remote wakeup detected interrupt mask, reset value: 0x0
  } OTG_HS_GINTMSK;

  /** 
  * name: OTG_HS_GRXSTSR_Host
  * description: OTG_HS Receive status debug read register (host mode)
  * address: 0x4004001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_t {
    uint32_t CHNUM : 4;  ///< Channel number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
  } OTG_HS_GRXSTSR_Host;

  /** 
  * name: OTG_HS_GRXSTSR_Peripheral
  * description: OTG_HS Receive status debug read register (peripheral mode mode)
  * address: 0x4004001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_t {
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
    uint32_t FRMNUM : 4;  ///< Frame number, reset value: 0x0
  } OTG_HS_GRXSTSR_Peripheral;

  /** 
  * name: OTG_HS_GRXSTSP_Host
  * description: OTG_HS status read and pop register (host mode)
  * address: 0x40040020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_t {
    uint32_t CHNUM : 4;  ///< Channel number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
  } OTG_HS_GRXSTSP_Host;

  /** 
  * name: OTG_HS_GRXSTSP_Peripheral
  * description: OTG_HS status read and pop register (peripheral mode)
  * address: 0x40040020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_t {
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
    uint32_t FRMNUM : 4;  ///< Frame number, reset value: 0x0
  } OTG_HS_GRXSTSP_Peripheral;

  /** 
  * name: OTG_HS_GRXFSIZ
  * description: OTG_HS Receive FIFO size register
  * address: 0x40040024
  * offset: 0x24
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_t {
    uint32_t RXFD : 16;  ///< RxFIFO depth, reset value: 0x200
  } OTG_HS_GRXFSIZ;

  /** 
  * name: OTG_HS_GNPTXFSIZ_Host
  * description: OTG_HS nonperiodic transmit FIFO size register (host mode)
  * address: 0x40040028
  * offset: 0x28
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_t {
    uint32_t NPTXFSA : 16;  ///< Nonperiodic transmit RAM start address, reset value: 0x200
    uint32_t NPTXFD : 16;  ///< Nonperiodic TxFIFO depth, reset value: 0x0
  } OTG_HS_GNPTXFSIZ_Host;

  /** 
  * name: OTG_HS_TX0FSIZ_Peripheral
  * description: Endpoint 0 transmit FIFO size (peripheral mode)
  * address: 0x40040028
  * offset: 0x28
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_t {
    uint32_t TX0FSA : 16;  ///< Endpoint 0 transmit RAM start address, reset value: 0x200
    uint32_t TX0FD : 16;  ///< Endpoint 0 TxFIFO depth, reset value: 0x0
  } OTG_HS_TX0FSIZ_Peripheral;

  /** 
  * name: OTG_HS_GNPTXSTS
  * description: OTG_HS nonperiodic transmit FIFO/queue status register
  * address: 0x4004002C
  * offset: 0x2C
  * reset value: 0x00080200
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_t {
    uint32_t NPTXFSAV : 16;  ///< Nonperiodic TxFIFO space available, reset value: 0x200
    uint32_t NPTQXSAV : 8;  ///< Nonperiodic transmit request queue space available, reset value: 0x8
    uint32_t NPTXQTOP : 7;  ///< Top of the nonperiodic transmit request queue, reset value: 0x0
  } OTG_HS_GNPTXSTS;

  /** 
  * name: OTG_HS_GCCFG
  * description: OTG_HS general core configuration register
  * address: 0x40040038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_GCCFG_t {
    uint32_t _RESERVED_501 : 16;
    uint32_t PWRDWN : 1;  ///< Power down, reset value: 0x0
    uint32_t I2CPADEN : 1;  ///< Enable I2C bus connection for the external I2C PHY interface, reset value: 0x0
    uint32_t VBUSASEN : 1;  ///< Enable the VBUS sensing device, reset value: 0x0
    uint32_t VBUSBSEN : 1;  ///< Enable the VBUS sensing device, reset value: 0x0
    uint32_t SOFOUTEN : 1;  ///< SOF output enable, reset value: 0x0
    uint32_t NOVBUSSENS : 1;  ///< VBUS sensing disable option, reset value: 0x0
  } OTG_HS_GCCFG;

  /** 
  * name: OTG_HS_CID
  * description: OTG_HS core ID register
  * address: 0x4004003C
  * offset: 0x3C
  * reset value: 0x00001200
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_CID_t {
    uint32_t PRODUCT_ID : 32;  ///< Product ID field, reset value: 0x1200
  } OTG_HS_CID;

  const uint8_t _RESERVED_502[164];

  /** 
  * name: OTG_HS_HPTXFSIZ
  * description: OTG_HS Host periodic transmit FIFO size register
  * address: 0x40040100
  * offset: 0x100
  * reset value: 0x02000600
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_t {
    uint32_t PTXSA : 16;  ///< Host periodic TxFIFO start address, reset value: 0x600
    uint32_t PTXFD : 16;  ///< Host periodic TxFIFO depth, reset value: 0x200
  } OTG_HS_HPTXFSIZ;

  /** 
  * name: OTG_HS_DIEPTXF1
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x40040104
  * offset: 0x104
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF1;

  /** 
  * name: OTG_HS_DIEPTXF2
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x40040108
  * offset: 0x108
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF2;

  /** 
  * name: OTG_HS_DIEPTXF3
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x4004011C
  * offset: 0x11C
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF3;

  /** 
  * name: OTG_HS_DIEPTXF4
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x40040120
  * offset: 0x120
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF4;

  /** 
  * name: OTG_HS_DIEPTXF5
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x40040124
  * offset: 0x124
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF5;

  /** 
  * name: OTG_HS_DIEPTXF6
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x40040128
  * offset: 0x128
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF6;

  /** 
  * name: OTG_HS_DIEPTXF7
  * description: OTG_HS device IN endpoint transmit FIFO size register
  * address: 0x4004012C
  * offset: 0x12C
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFOx transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } OTG_HS_DIEPTXF7;

} OTG_HS_GLOBAL_t;


/** 
*  name: OTG_HS_HOST
*  description: USB on the go high speed
*  group: USB_OTG_HS
*  address: 0x40040400
*/
typedef struct{
  /** 
  * name: OTG_HS_HCFG
  * description: OTG_HS host configuration register
  * address: 0x40040400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_HOST_OTG_HS_HCFG_t {
    uint32_t FSLSPCS : 2;  ///< FS/LS PHY clock select, reset value: 0x0
    uint32_t FSLSS : 1;  ///< FS- and LS-only support, reset value: 0x0
  } OTG_HS_HCFG;

  /** 
  * name: OTG_HS_HFIR
  * description: OTG_HS Host frame interval register
  * address: 0x40040404
  * offset: 0x4
  * reset value: 0x0000EA60
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HFIR_t {
    uint32_t FRIVL : 16;  ///< Frame interval, reset value: 0xEA60
  } OTG_HS_HFIR;

  /** 
  * name: OTG_HS_HFNUM
  * description: OTG_HS host frame number/frame time remaining register
  * address: 0x40040408
  * offset: 0x8
  * reset value: 0x00003FFF
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_HOST_OTG_HS_HFNUM_t {
    uint32_t FRNUM : 16;  ///< Frame number, reset value: 0x3FFF
    uint32_t FTREM : 16;  ///< Frame time remaining, reset value: 0x0
  } OTG_HS_HFNUM;

  /** 
  * name: OTG_HS_HPTXSTS
  * description: OTG_HS_Host periodic transmit FIFO/queue status register
  * address: 0x40040410
  * offset: 0x10
  * reset value: 0x00080100
  * size: 0x20
  * access: 
  */
  struct OTG_HS_HOST_OTG_HS_HPTXSTS_t {
    uint32_t PTXFSAVL : 16;  ///< Periodic transmit data FIFO space available, reset value: 0x100
    uint32_t PTXQSAV : 8;  ///< Periodic transmit request queue space available, reset value: 0x8
    uint32_t PTXQTOP : 8;  ///< Top of the periodic transmit request queue, reset value: 0x0
  } OTG_HS_HPTXSTS;

  /** 
  * name: OTG_HS_HAINT
  * description: OTG_HS Host all channels interrupt register
  * address: 0x40040414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_HOST_OTG_HS_HAINT_t {
    uint32_t HAINT : 16;  ///< Channel interrupts, reset value: 0x0
  } OTG_HS_HAINT;

  /** 
  * name: OTG_HS_HAINTMSK
  * description: OTG_HS host all channels interrupt mask register
  * address: 0x40040418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HAINTMSK_t {
    uint32_t HAINTM : 16;  ///< Channel interrupt mask, reset value: 0x0
  } OTG_HS_HAINTMSK;

  const uint8_t _RESERVED_503[8];

  /** 
  * name: OTG_HS_HPRT
  * description: OTG_HS host port control and status register
  * address: 0x40040440
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_HOST_OTG_HS_HPRT_t {
    uint32_t PCSTS : 1;  ///< Port connect status, reset value: 0x0
    uint32_t PCDET : 1;  ///< Port connect detected, reset value: 0x0
    uint32_t PENA : 1;  ///< Port enable, reset value: 0x0
    uint32_t PENCHNG : 1;  ///< Port enable/disable change, reset value: 0x0
    uint32_t POCA : 1;  ///< Port overcurrent active, reset value: 0x0
    uint32_t POCCHNG : 1;  ///< Port overcurrent change, reset value: 0x0
    uint32_t PRES : 1;  ///< Port resume, reset value: 0x0
    uint32_t PSUSP : 1;  ///< Port suspend, reset value: 0x0
    uint32_t PRST : 1;  ///< Port reset, reset value: 0x0
    uint32_t _RESERVED_504 : 1;
    uint32_t PLSTS : 2;  ///< Port line status, reset value: 0x0
    uint32_t PPWR : 1;  ///< Port power, reset value: 0x0
    uint32_t PTCTL : 4;  ///< Port test control, reset value: 0x0
    uint32_t PSPD : 2;  ///< Port speed, reset value: 0x0
  } OTG_HS_HPRT;

  const uint8_t _RESERVED_505[160];

  /** 
  * name: OTG_HS_HCCHAR0
  * description: OTG_HS host channel-0 characteristics register
  * address: 0x40040500
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR0_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_506 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR0;

  /** 
  * name: OTG_HS_HCSPLT0
  * description: OTG_HS host channel-0 split control register
  * address: 0x40040504
  * offset: 0x104
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT0_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_507 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT0;

  /** 
  * name: OTG_HS_HCINT0
  * description: OTG_HS host channel-11 interrupt register
  * address: 0x40040508
  * offset: 0x108
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT0_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT0;

  /** 
  * name: OTG_HS_HCINTMSK0
  * description: OTG_HS host channel-11 interrupt mask register
  * address: 0x4004050C
  * offset: 0x10C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK0_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK0;

  /** 
  * name: OTG_HS_HCTSIZ0
  * description: OTG_HS host channel-11 transfer size register
  * address: 0x40040510
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ0_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ0;

  /** 
  * name: OTG_HS_HCDMA0
  * description: OTG_HS host channel-0 DMA address register
  * address: 0x40040514
  * offset: 0x114
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA0_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA0;

  /** 
  * name: OTG_HS_HCCHAR1
  * description: OTG_HS host channel-1 characteristics register
  * address: 0x40040520
  * offset: 0x120
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR1_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_508 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR1;

  /** 
  * name: OTG_HS_HCSPLT1
  * description: OTG_HS host channel-1 split control register
  * address: 0x40040524
  * offset: 0x124
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT1_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_509 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT1;

  /** 
  * name: OTG_HS_HCINT1
  * description: OTG_HS host channel-1 interrupt register
  * address: 0x40040528
  * offset: 0x128
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT1_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT1;

  /** 
  * name: OTG_HS_HCINTMSK1
  * description: OTG_HS host channel-1 interrupt mask register
  * address: 0x4004052C
  * offset: 0x12C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK1_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK1;

  /** 
  * name: OTG_HS_HCTSIZ1
  * description: OTG_HS host channel-1 transfer size register
  * address: 0x40040530
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ1;

  /** 
  * name: OTG_HS_HCDMA1
  * description: OTG_HS host channel-1 DMA address register
  * address: 0x40040534
  * offset: 0x134
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA1_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA1;

  /** 
  * name: OTG_HS_HCCHAR2
  * description: OTG_HS host channel-2 characteristics register
  * address: 0x40040540
  * offset: 0x140
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR2_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_510 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR2;

  /** 
  * name: OTG_HS_HCSPLT2
  * description: OTG_HS host channel-2 split control register
  * address: 0x40040544
  * offset: 0x144
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT2_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_511 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT2;

  /** 
  * name: OTG_HS_HCINT2
  * description: OTG_HS host channel-2 interrupt register
  * address: 0x40040548
  * offset: 0x148
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT2_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT2;

  /** 
  * name: OTG_HS_HCINTMSK2
  * description: OTG_HS host channel-2 interrupt mask register
  * address: 0x4004054C
  * offset: 0x14C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK2_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK2;

  /** 
  * name: OTG_HS_HCTSIZ2
  * description: OTG_HS host channel-2 transfer size register
  * address: 0x40040550
  * offset: 0x150
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ2;

  /** 
  * name: OTG_HS_HCDMA2
  * description: OTG_HS host channel-2 DMA address register
  * address: 0x40040554
  * offset: 0x154
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA2_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA2;

  /** 
  * name: OTG_HS_HCCHAR3
  * description: OTG_HS host channel-3 characteristics register
  * address: 0x40040560
  * offset: 0x160
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR3_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_512 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR3;

  /** 
  * name: OTG_HS_HCSPLT3
  * description: OTG_HS host channel-3 split control register
  * address: 0x40040564
  * offset: 0x164
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT3_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_513 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT3;

  /** 
  * name: OTG_HS_HCINT3
  * description: OTG_HS host channel-3 interrupt register
  * address: 0x40040568
  * offset: 0x168
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT3_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT3;

  /** 
  * name: OTG_HS_HCINTMSK3
  * description: OTG_HS host channel-3 interrupt mask register
  * address: 0x4004056C
  * offset: 0x16C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK3_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK3;

  /** 
  * name: OTG_HS_HCTSIZ3
  * description: OTG_HS host channel-3 transfer size register
  * address: 0x40040570
  * offset: 0x170
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ3;

  /** 
  * name: OTG_HS_HCDMA3
  * description: OTG_HS host channel-3 DMA address register
  * address: 0x40040574
  * offset: 0x174
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA3_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA3;

  /** 
  * name: OTG_HS_HCCHAR4
  * description: OTG_HS host channel-4 characteristics register
  * address: 0x40040580
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR4_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_514 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR4;

  /** 
  * name: OTG_HS_HCSPLT4
  * description: OTG_HS host channel-4 split control register
  * address: 0x40040584
  * offset: 0x184
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT4_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_515 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT4;

  /** 
  * name: OTG_HS_HCINT4
  * description: OTG_HS host channel-4 interrupt register
  * address: 0x40040588
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT4_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT4;

  /** 
  * name: OTG_HS_HCINTMSK4
  * description: OTG_HS host channel-4 interrupt mask register
  * address: 0x4004058C
  * offset: 0x18C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK4_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK4;

  /** 
  * name: OTG_HS_HCTSIZ4
  * description: OTG_HS host channel-4 transfer size register
  * address: 0x40040590
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ4_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ4;

  /** 
  * name: OTG_HS_HCDMA4
  * description: OTG_HS host channel-4 DMA address register
  * address: 0x40040594
  * offset: 0x194
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA4_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA4;

  /** 
  * name: OTG_HS_HCCHAR5
  * description: OTG_HS host channel-5 characteristics register
  * address: 0x400405A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR5_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_516 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR5;

  /** 
  * name: OTG_HS_HCSPLT5
  * description: OTG_HS host channel-5 split control register
  * address: 0x400405A4
  * offset: 0x1A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT5_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_517 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT5;

  /** 
  * name: OTG_HS_HCINT5
  * description: OTG_HS host channel-5 interrupt register
  * address: 0x400405A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT5_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT5;

  /** 
  * name: OTG_HS_HCINTMSK5
  * description: OTG_HS host channel-5 interrupt mask register
  * address: 0x400405AC
  * offset: 0x1AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK5_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK5;

  /** 
  * name: OTG_HS_HCTSIZ5
  * description: OTG_HS host channel-5 transfer size register
  * address: 0x400405B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ5_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ5;

  /** 
  * name: OTG_HS_HCDMA5
  * description: OTG_HS host channel-5 DMA address register
  * address: 0x400405B4
  * offset: 0x1B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA5_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA5;

  /** 
  * name: OTG_HS_HCCHAR6
  * description: OTG_HS host channel-6 characteristics register
  * address: 0x400405C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR6_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_518 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR6;

  /** 
  * name: OTG_HS_HCSPLT6
  * description: OTG_HS host channel-6 split control register
  * address: 0x400405C4
  * offset: 0x1C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT6_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_519 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT6;

  /** 
  * name: OTG_HS_HCINT6
  * description: OTG_HS host channel-6 interrupt register
  * address: 0x400405C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT6_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT6;

  /** 
  * name: OTG_HS_HCINTMSK6
  * description: OTG_HS host channel-6 interrupt mask register
  * address: 0x400405CC
  * offset: 0x1CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK6_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK6;

  /** 
  * name: OTG_HS_HCTSIZ6
  * description: OTG_HS host channel-6 transfer size register
  * address: 0x400405D0
  * offset: 0x1D0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ6_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ6;

  /** 
  * name: OTG_HS_HCDMA6
  * description: OTG_HS host channel-6 DMA address register
  * address: 0x400405D4
  * offset: 0x1D4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA6_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA6;

  /** 
  * name: OTG_HS_HCCHAR7
  * description: OTG_HS host channel-7 characteristics register
  * address: 0x400405E0
  * offset: 0x1E0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR7_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_520 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR7;

  /** 
  * name: OTG_HS_HCSPLT7
  * description: OTG_HS host channel-7 split control register
  * address: 0x400405E4
  * offset: 0x1E4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT7_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_521 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT7;

  /** 
  * name: OTG_HS_HCINT7
  * description: OTG_HS host channel-7 interrupt register
  * address: 0x400405E8
  * offset: 0x1E8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT7_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT7;

  /** 
  * name: OTG_HS_HCINTMSK7
  * description: OTG_HS host channel-7 interrupt mask register
  * address: 0x400405EC
  * offset: 0x1EC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK7_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK7;

  /** 
  * name: OTG_HS_HCTSIZ7
  * description: OTG_HS host channel-7 transfer size register
  * address: 0x400405F0
  * offset: 0x1F0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ7_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ7;

  /** 
  * name: OTG_HS_HCDMA7
  * description: OTG_HS host channel-7 DMA address register
  * address: 0x400405F4
  * offset: 0x1F4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA7_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA7;

  /** 
  * name: OTG_HS_HCCHAR8
  * description: OTG_HS host channel-8 characteristics register
  * address: 0x40040600
  * offset: 0x200
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR8_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_522 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR8;

  /** 
  * name: OTG_HS_HCSPLT8
  * description: OTG_HS host channel-8 split control register
  * address: 0x40040604
  * offset: 0x204
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT8_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_523 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT8;

  /** 
  * name: OTG_HS_HCINT8
  * description: OTG_HS host channel-8 interrupt register
  * address: 0x40040608
  * offset: 0x208
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT8_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT8;

  /** 
  * name: OTG_HS_HCINTMSK8
  * description: OTG_HS host channel-8 interrupt mask register
  * address: 0x4004060C
  * offset: 0x20C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK8_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK8;

  /** 
  * name: OTG_HS_HCTSIZ8
  * description: OTG_HS host channel-8 transfer size register
  * address: 0x40040610
  * offset: 0x210
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ8_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ8;

  /** 
  * name: OTG_HS_HCDMA8
  * description: OTG_HS host channel-8 DMA address register
  * address: 0x40040614
  * offset: 0x214
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA8_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA8;

  /** 
  * name: OTG_HS_HCCHAR9
  * description: OTG_HS host channel-9 characteristics register
  * address: 0x40040620
  * offset: 0x220
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR9_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_524 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR9;

  /** 
  * name: OTG_HS_HCSPLT9
  * description: OTG_HS host channel-9 split control register
  * address: 0x40040624
  * offset: 0x224
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT9_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_525 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT9;

  /** 
  * name: OTG_HS_HCINT9
  * description: OTG_HS host channel-9 interrupt register
  * address: 0x40040628
  * offset: 0x228
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT9_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT9;

  /** 
  * name: OTG_HS_HCINTMSK9
  * description: OTG_HS host channel-9 interrupt mask register
  * address: 0x4004062C
  * offset: 0x22C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK9_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK9;

  /** 
  * name: OTG_HS_HCTSIZ9
  * description: OTG_HS host channel-9 transfer size register
  * address: 0x40040630
  * offset: 0x230
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ9_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ9;

  /** 
  * name: OTG_HS_HCDMA9
  * description: OTG_HS host channel-9 DMA address register
  * address: 0x40040634
  * offset: 0x234
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA9_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA9;

  /** 
  * name: OTG_HS_HCCHAR10
  * description: OTG_HS host channel-10 characteristics register
  * address: 0x40040640
  * offset: 0x240
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR10_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_526 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR10;

  /** 
  * name: OTG_HS_HCSPLT10
  * description: OTG_HS host channel-10 split control register
  * address: 0x40040644
  * offset: 0x244
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT10_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_527 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT10;

  /** 
  * name: OTG_HS_HCINT10
  * description: OTG_HS host channel-10 interrupt register
  * address: 0x40040648
  * offset: 0x248
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT10_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT10;

  /** 
  * name: OTG_HS_HCINTMSK10
  * description: OTG_HS host channel-10 interrupt mask register
  * address: 0x4004064C
  * offset: 0x24C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK10_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK10;

  /** 
  * name: OTG_HS_HCTSIZ10
  * description: OTG_HS host channel-10 transfer size register
  * address: 0x40040650
  * offset: 0x250
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ10_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ10;

  /** 
  * name: OTG_HS_HCDMA10
  * description: OTG_HS host channel-10 DMA address register
  * address: 0x40040654
  * offset: 0x254
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA10_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA10;

  /** 
  * name: OTG_HS_HCCHAR11
  * description: OTG_HS host channel-11 characteristics register
  * address: 0x40040660
  * offset: 0x260
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCCHAR11_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_528 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MC : 2;  ///< Multi Count (MC) / Error Count (EC), reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } OTG_HS_HCCHAR11;

  /** 
  * name: OTG_HS_HCSPLT11
  * description: OTG_HS host channel-11 split control register
  * address: 0x40040664
  * offset: 0x264
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCSPLT11_t {
    uint32_t PRTADDR : 7;  ///< Port address, reset value: 0x0
    uint32_t HUBADDR : 7;  ///< Hub address, reset value: 0x0
    uint32_t XACTPOS : 2;  ///< XACTPOS, reset value: 0x0
    uint32_t COMPLSPLT : 1;  ///< Do complete split, reset value: 0x0
    uint32_t _RESERVED_529 : 14;
    uint32_t SPLITEN : 1;  ///< Split enable, reset value: 0x0
  } OTG_HS_HCSPLT11;

  /** 
  * name: OTG_HS_HCINT11
  * description: OTG_HS host channel-11 interrupt register
  * address: 0x40040668
  * offset: 0x268
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINT11_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t NYET : 1;  ///< Response received interrupt, reset value: 0x0
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } OTG_HS_HCINT11;

  /** 
  * name: OTG_HS_HCINTMSK11
  * description: OTG_HS host channel-11 interrupt mask register
  * address: 0x4004066C
  * offset: 0x26C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCINTMSK11_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t AHBERR : 1;  ///< AHB error, reset value: 0x0
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } OTG_HS_HCINTMSK11;

  /** 
  * name: OTG_HS_HCTSIZ11
  * description: OTG_HS host channel-11 transfer size register
  * address: 0x40040670
  * offset: 0x270
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCTSIZ11_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } OTG_HS_HCTSIZ11;

  /** 
  * name: OTG_HS_HCDMA11
  * description: OTG_HS host channel-11 DMA address register
  * address: 0x40040674
  * offset: 0x274
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_HOST_OTG_HS_HCDMA11_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_HCDMA11;

} OTG_HS_HOST_t;


/** 
*  name: OTG_HS_DEVICE
*  description: USB on the go high speed
*  group: USB_OTG_HS
*  address: 0x40040800
*/
typedef struct{
  /** 
  * name: OTG_HS_DCFG
  * description: OTG_HS device configuration register
  * address: 0x40040800
  * offset: 0x0
  * reset value: 0x02200000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DCFG_t {
    uint32_t DSPD : 2;  ///< Device speed, reset value: 0x0
    uint32_t NZLSOHSK : 1;  ///< Nonzero-length status OUT handshake, reset value: 0x0
    uint32_t _RESERVED_530 : 1;
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t PFIVL : 2;  ///< Periodic (micro)frame interval, reset value: 0x0
    uint32_t _RESERVED_531 : 11;
    uint32_t PERSCHIVL : 2;  ///< Periodic scheduling interval, reset value: 0x2
  } OTG_HS_DCFG;

  /** 
  * name: OTG_HS_DCTL
  * description: OTG_HS device control register
  * address: 0x40040804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DCTL_t {
    uint32_t RWUSIG : 1;  ///< Remote wakeup signaling, reset value: 0x0
    uint32_t SDIS : 1;  ///< Soft disconnect, reset value: 0x0
    uint32_t GINSTS : 1;  ///< Global IN NAK status, reset value: 0x0
    uint32_t GONSTS : 1;  ///< Global OUT NAK status, reset value: 0x0
    uint32_t TCTL : 3;  ///< Test control, reset value: 0x0
    uint32_t SGINAK : 1;  ///< Set global IN NAK, reset value: 0x0
    uint32_t CGINAK : 1;  ///< Clear global IN NAK, reset value: 0x0
    uint32_t SGONAK : 1;  ///< Set global OUT NAK, reset value: 0x0
    uint32_t CGONAK : 1;  ///< Clear global OUT NAK, reset value: 0x0
    uint32_t POPRGDNE : 1;  ///< Power-on programming done, reset value: 0x0
  } OTG_HS_DCTL;

  /** 
  * name: OTG_HS_DSTS
  * description: OTG_HS device status register
  * address: 0x40040808
  * offset: 0x8
  * reset value: 0x00000010
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DSTS_t {
    uint32_t SUSPSTS : 1;  ///< Suspend status, reset value: 0x0
    uint32_t ENUMSPD : 2;  ///< Enumerated speed, reset value: 0x0
    uint32_t EERR : 1;  ///< Erratic error, reset value: 0x0
    uint32_t _RESERVED_532 : 4;
    uint32_t FNSOF : 14;  ///< Frame number of the received SOF, reset value: 0x0
  } OTG_HS_DSTS;

  /** 
  * name: OTG_HS_DIEPMSK
  * description: OTG_HS device IN endpoint common interrupt mask register
  * address: 0x40040810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPMSK_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_533 : 1;
    uint32_t TOM : 1;  ///< Timeout condition mask (nonisochronous endpoints), reset value: 0x0
    uint32_t ITTXFEMSK : 1;  ///< IN token received when TxFIFO empty mask, reset value: 0x0
    uint32_t INEPNMM : 1;  ///< IN token received with EP mismatch mask, reset value: 0x0
    uint32_t INEPNEM : 1;  ///< IN endpoint NAK effective mask, reset value: 0x0
    uint32_t _RESERVED_534 : 1;
    uint32_t TXFURM : 1;  ///< FIFO underrun mask, reset value: 0x0
    uint32_t BIM : 1;  ///< BNA interrupt mask, reset value: 0x0
  } OTG_HS_DIEPMSK;

  /** 
  * name: OTG_HS_DOEPMSK
  * description: OTG_HS device OUT endpoint common interrupt mask register
  * address: 0x40040814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPMSK_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_535 : 1;
    uint32_t STUPM : 1;  ///< SETUP phase done mask, reset value: 0x0
    uint32_t OTEPDM : 1;  ///< OUT token received when endpoint disabled mask, reset value: 0x0
    uint32_t _RESERVED_536 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received mask, reset value: 0x0
    uint32_t _RESERVED_537 : 1;
    uint32_t OPEM : 1;  ///< OUT packet error mask, reset value: 0x0
    uint32_t BOIM : 1;  ///< BNA interrupt mask, reset value: 0x0
  } OTG_HS_DOEPMSK;

  /** 
  * name: OTG_HS_DAINT
  * description: OTG_HS device all endpoints interrupt register
  * address: 0x40040818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DAINT_t {
    uint32_t IEPINT : 16;  ///< IN endpoint interrupt bits, reset value: 0x0
    uint32_t OEPINT : 16;  ///< OUT endpoint interrupt bits, reset value: 0x0
  } OTG_HS_DAINT;

  /** 
  * name: OTG_HS_DAINTMSK
  * description: OTG_HS all endpoints interrupt mask register
  * address: 0x4004081C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DAINTMSK_t {
    uint32_t IEPM : 16;  ///< IN EP interrupt mask bits, reset value: 0x0
    uint32_t OEPM : 16;  ///< OUT EP interrupt mask bits, reset value: 0x0
  } OTG_HS_DAINTMSK;

  /** 
  * name: OTG_HS_DVBUSDIS
  * description: OTG_HS device VBUS discharge time register
  * address: 0x40040828
  * offset: 0x28
  * reset value: 0x000017D7
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DVBUSDIS_t {
    uint32_t VBUSDT : 16;  ///< Device VBUS discharge time, reset value: 0x17D7
  } OTG_HS_DVBUSDIS;

  /** 
  * name: OTG_HS_DVBUSPULSE
  * description: OTG_HS device VBUS pulsing time register
  * address: 0x4004082C
  * offset: 0x2C
  * reset value: 0x000005B8
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_t {
    uint32_t DVBUSP : 12;  ///< Device VBUS pulsing time, reset value: 0x5B8
  } OTG_HS_DVBUSPULSE;

  /** 
  * name: OTG_HS_DTHRCTL
  * description: OTG_HS Device threshold control register
  * address: 0x40040830
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DTHRCTL_t {
    uint32_t NONISOTHREN : 1;  ///< Nonisochronous IN endpoints threshold enable, reset value: 0x0
    uint32_t ISOTHREN : 1;  ///< ISO IN endpoint threshold enable, reset value: 0x0
    uint32_t TXTHRLEN : 9;  ///< Transmit threshold length, reset value: 0x0
    uint32_t _RESERVED_538 : 5;
    uint32_t RXTHREN : 1;  ///< Receive threshold enable, reset value: 0x0
    uint32_t RXTHRLEN : 9;  ///< Receive threshold length, reset value: 0x0
    uint32_t _RESERVED_539 : 1;
    uint32_t ARPEN : 1;  ///< Arbiter parking enable, reset value: 0x0
  } OTG_HS_DTHRCTL;

  /** 
  * name: OTG_HS_DIEPEMPMSK
  * description: OTG_HS device IN endpoint FIFO empty interrupt mask register
  * address: 0x40040834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_t {
    uint32_t INEPTXFEM : 16;  ///< IN EP Tx FIFO empty interrupt mask bits, reset value: 0x0
  } OTG_HS_DIEPEMPMSK;

  /** 
  * name: OTG_HS_DEACHINT
  * description: OTG_HS device each endpoint interrupt register
  * address: 0x40040838
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DEACHINT_t {
    uint32_t _RESERVED_540 : 1;
    uint32_t IEP1INT : 1;  ///< IN endpoint 1interrupt bit, reset value: 0x0
    uint32_t _RESERVED_541 : 15;
    uint32_t OEP1INT : 1;  ///< OUT endpoint 1 interrupt bit, reset value: 0x0
  } OTG_HS_DEACHINT;

  /** 
  * name: OTG_HS_DEACHINTMSK
  * description: OTG_HS device each endpoint interrupt register mask
  * address: 0x4004083C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_t {
    uint32_t _RESERVED_542 : 1;
    uint32_t IEP1INTM : 1;  ///< IN Endpoint 1 interrupt mask bit, reset value: 0x0
    uint32_t _RESERVED_543 : 15;
    uint32_t OEP1INTM : 1;  ///< OUT Endpoint 1 interrupt mask bit, reset value: 0x0
  } OTG_HS_DEACHINTMSK;

  /** 
  * name: OTG_HS_DIEPEACHMSK1
  * description: OTG_HS device each in endpoint-1 interrupt register
  * address: 0x40040840
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_544 : 1;
    uint32_t TOM : 1;  ///< Timeout condition mask (nonisochronous endpoints), reset value: 0x0
    uint32_t ITTXFEMSK : 1;  ///< IN token received when TxFIFO empty mask, reset value: 0x0
    uint32_t INEPNMM : 1;  ///< IN token received with EP mismatch mask, reset value: 0x0
    uint32_t INEPNEM : 1;  ///< IN endpoint NAK effective mask, reset value: 0x0
    uint32_t _RESERVED_545 : 1;
    uint32_t TXFURM : 1;  ///< FIFO underrun mask, reset value: 0x0
    uint32_t BIM : 1;  ///< BNA interrupt mask, reset value: 0x0
    uint32_t _RESERVED_546 : 3;
    uint32_t NAKM : 1;  ///< NAK interrupt mask, reset value: 0x0
  } OTG_HS_DIEPEACHMSK1;

  const uint8_t _RESERVED_547[32];

  /** 
  * name: OTG_HS_DOEPEACHMSK1
  * description: OTG_HS device each OUT endpoint-1 interrupt register
  * address: 0x40040880
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_548 : 1;
    uint32_t TOM : 1;  ///< Timeout condition mask, reset value: 0x0
    uint32_t ITTXFEMSK : 1;  ///< IN token received when TxFIFO empty mask, reset value: 0x0
    uint32_t INEPNMM : 1;  ///< IN token received with EP mismatch mask, reset value: 0x0
    uint32_t INEPNEM : 1;  ///< IN endpoint NAK effective mask, reset value: 0x0
    uint32_t _RESERVED_549 : 1;
    uint32_t TXFURM : 1;  ///< OUT packet error mask, reset value: 0x0
    uint32_t BIM : 1;  ///< BNA interrupt mask, reset value: 0x0
    uint32_t _RESERVED_550 : 2;
    uint32_t BERRM : 1;  ///< Bubble error interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK interrupt mask, reset value: 0x0
    uint32_t NYETM : 1;  ///< NYET interrupt mask, reset value: 0x0
  } OTG_HS_DOEPEACHMSK1;

  const uint8_t _RESERVED_551[96];

  /** 
  * name: OTG_HS_DIEPCTL0
  * description: OTG device endpoint-0 control register
  * address: 0x40040900
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL0_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_552 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_553 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL0;

  /** 
  * name: OTG_HS_DIEPINT0
  * description: OTG device endpoint-0 interrupt register
  * address: 0x40040908
  * offset: 0x108
  * reset value: 0x00000080
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT0_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_554 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_555 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x1
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_556 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT0;

  /** 
  * name: OTG_HS_DIEPTSIZ0
  * description: OTG_HS device IN endpoint 0 transfer size register
  * address: 0x40040910
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_t {
    uint32_t XFRSIZ : 7;  ///< Transfer size, reset value: 0x0
    uint32_t _RESERVED_557 : 12;
    uint32_t PKTCNT : 2;  ///< Packet count, reset value: 0x0
  } OTG_HS_DIEPTSIZ0;

  /** 
  * name: OTG_HS_DIEPDMA1
  * description: OTG_HS device endpoint-1 DMA address register
  * address: 0x40040914
  * offset: 0x114
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPDMA1_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_DIEPDMA1;

  /** 
  * name: OTG_HS_DTXFSTS0
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x40040918
  * offset: 0x118
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS0_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS0;

  /** 
  * name: OTG_HS_DIEPCTL1
  * description: OTG device endpoint-1 control register
  * address: 0x40040920
  * offset: 0x120
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL1_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_558 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_559 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL1;

  /** 
  * name: OTG_HS_DIEPINT1
  * description: OTG device endpoint-1 interrupt register
  * address: 0x40040928
  * offset: 0x128
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT1_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_560 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_561 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_562 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT1;

  /** 
  * name: OTG_HS_DIEPTSIZ1
  * description: OTG_HS device endpoint transfer size register
  * address: 0x40040930
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } OTG_HS_DIEPTSIZ1;

  /** 
  * name: OTG_HS_DIEPDMA2
  * description: OTG_HS device endpoint-2 DMA address register
  * address: 0x40040934
  * offset: 0x134
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPDMA2_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_DIEPDMA2;

  /** 
  * name: OTG_HS_DTXFSTS1
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x40040938
  * offset: 0x138
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS1_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS1;

  /** 
  * name: OTG_HS_DIEPCTL2
  * description: OTG device endpoint-2 control register
  * address: 0x40040940
  * offset: 0x140
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL2_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_563 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_564 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL2;

  /** 
  * name: OTG_HS_DIEPINT2
  * description: OTG device endpoint-2 interrupt register
  * address: 0x40040948
  * offset: 0x148
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT2_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_565 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_566 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_567 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT2;

  /** 
  * name: OTG_HS_DIEPTSIZ2
  * description: OTG_HS device endpoint transfer size register
  * address: 0x40040950
  * offset: 0x150
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } OTG_HS_DIEPTSIZ2;

  /** 
  * name: OTG_HS_DIEPDMA3
  * description: OTG_HS device endpoint-3 DMA address register
  * address: 0x40040954
  * offset: 0x154
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPDMA3_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_DIEPDMA3;

  /** 
  * name: OTG_HS_DTXFSTS2
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x40040958
  * offset: 0x158
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS2_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS2;

  /** 
  * name: OTG_HS_DIEPCTL3
  * description: OTG device endpoint-3 control register
  * address: 0x40040960
  * offset: 0x160
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL3_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_568 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_569 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL3;

  /** 
  * name: OTG_HS_DIEPINT3
  * description: OTG device endpoint-3 interrupt register
  * address: 0x40040968
  * offset: 0x168
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT3_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_570 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_571 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_572 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT3;

  /** 
  * name: OTG_HS_DIEPTSIZ3
  * description: OTG_HS device endpoint transfer size register
  * address: 0x40040970
  * offset: 0x170
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } OTG_HS_DIEPTSIZ3;

  /** 
  * name: OTG_HS_DIEPDMA4
  * description: OTG_HS device endpoint-4 DMA address register
  * address: 0x40040974
  * offset: 0x174
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPDMA4_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_DIEPDMA4;

  /** 
  * name: OTG_HS_DTXFSTS3
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x40040978
  * offset: 0x178
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS3_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS3;

  /** 
  * name: OTG_HS_DIEPCTL4
  * description: OTG device endpoint-4 control register
  * address: 0x40040980
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL4_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_573 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_574 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL4;

  /** 
  * name: OTG_HS_DIEPINT4
  * description: OTG device endpoint-4 interrupt register
  * address: 0x40040988
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT4_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_575 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_576 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_577 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT4;

  /** 
  * name: OTG_HS_DIEPTSIZ4
  * description: OTG_HS device endpoint transfer size register
  * address: 0x40040990
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } OTG_HS_DIEPTSIZ4;

  /** 
  * name: OTG_HS_DIEPDMA5
  * description: OTG_HS device endpoint-5 DMA address register
  * address: 0x40040994
  * offset: 0x194
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPDMA5_t {
    uint32_t DMAADDR : 32;  ///< DMA address, reset value: 0x0
  } OTG_HS_DIEPDMA5;

  /** 
  * name: OTG_HS_DTXFSTS4
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x40040998
  * offset: 0x198
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS4_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS4;

  /** 
  * name: OTG_HS_DIEPCTL5
  * description: OTG device endpoint-5 control register
  * address: 0x400409A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL5_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_578 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_579 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL5;

  /** 
  * name: OTG_HS_DIEPINT5
  * description: OTG device endpoint-5 interrupt register
  * address: 0x400409A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT5_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_580 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_581 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_582 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT5;

  /** 
  * name: OTG_HS_DIEPTSIZ5
  * description: OTG_HS device endpoint transfer size register
  * address: 0x400409B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } OTG_HS_DIEPTSIZ5;

  /** 
  * name: OTG_HS_DTXFSTS5
  * description: OTG_HS device IN endpoint transmit FIFO status register
  * address: 0x400409B8
  * offset: 0x1B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_HS_DEVICE_OTG_HS_DTXFSTS5_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space avail, reset value: 0x0
  } OTG_HS_DTXFSTS5;

  /** 
  * name: OTG_HS_DIEPCTL6
  * description: OTG device endpoint-6 control register
  * address: 0x400409C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL6_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_583 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_584 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL6;

  /** 
  * name: OTG_HS_DIEPINT6
  * description: OTG device endpoint-6 interrupt register
  * address: 0x400409C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT6_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_585 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_586 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_587 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT6;

  /** 
  * name: OTG_HS_DIEPCTL7
  * description: OTG device endpoint-7 control register
  * address: 0x400409E0
  * offset: 0x1E0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPCTL7_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_588 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even/odd frame, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_589 : 1;
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DIEPCTL7;

  /** 
  * name: OTG_HS_DIEPINT7
  * description: OTG device endpoint-7 interrupt register
  * address: 0x400409E8
  * offset: 0x1E8
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DIEPINT7_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_590 : 1;
    uint32_t TOC : 1;  ///< Timeout condition, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< IN token received when TxFIFO is empty, reset value: 0x0
    uint32_t _RESERVED_591 : 1;
    uint32_t INEPNE : 1;  ///< IN endpoint NAK effective, reset value: 0x0
    uint32_t TXFE : 1;  ///< Transmit FIFO empty, reset value: 0x0
    uint32_t TXFIFOUDRN : 1;  ///< Transmit Fifo Underrun, reset value: 0x0
    uint32_t BNA : 1;  ///< Buffer not available interrupt, reset value: 0x0
    uint32_t _RESERVED_592 : 1;
    uint32_t PKTDRPSTS : 1;  ///< Packet dropped status, reset value: 0x0
    uint32_t BERR : 1;  ///< Babble error interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK interrupt, reset value: 0x0
  } OTG_HS_DIEPINT7;

  const uint8_t _RESERVED_593[248];

  /** 
  * name: OTG_HS_DOEPCTL0
  * description: OTG_HS device control OUT endpoint 0 control register
  * address: 0x40040B00
  * offset: 0x300
  * reset value: 0x00008000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPCTL0_t {
    uint32_t MPSIZ : 2;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_594 : 13;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x1
    uint32_t _RESERVED_595 : 1;
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t SNPM : 1;  ///< Snoop mode, reset value: 0x0
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t _RESERVED_596 : 4;
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t _RESERVED_597 : 2;
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DOEPCTL0;

  /** 
  * name: OTG_HS_DOEPINT0
  * description: OTG_HS device endpoint-0 interrupt register
  * address: 0x40040B08
  * offset: 0x308
  * reset value: 0x00000080
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT0_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_598 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_599 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_600 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT0;

  /** 
  * name: OTG_HS_DOEPTSIZ0
  * description: OTG_HS device endpoint-1 transfer size register
  * address: 0x40040B10
  * offset: 0x310
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_t {
    uint32_t XFRSIZ : 7;  ///< Transfer size, reset value: 0x0
    uint32_t _RESERVED_601 : 12;
    uint32_t PKTCNT : 1;  ///< Packet count, reset value: 0x0
    uint32_t _RESERVED_602 : 9;
    uint32_t STUPCNT : 2;  ///< SETUP packet count, reset value: 0x0
  } OTG_HS_DOEPTSIZ0;

  /** 
  * name: OTG_HS_DOEPCTL1
  * description: OTG device endpoint-1 control register
  * address: 0x40040B20
  * offset: 0x320
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPCTL1_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_603 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even odd frame/Endpoint data PID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t SNPM : 1;  ///< Snoop mode, reset value: 0x0
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t _RESERVED_604 : 4;
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID/Set even frame, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DOEPCTL1;

  /** 
  * name: OTG_HS_DOEPINT1
  * description: OTG_HS device endpoint-1 interrupt register
  * address: 0x40040B28
  * offset: 0x328
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT1_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_605 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_606 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_607 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT1;

  /** 
  * name: OTG_HS_DOEPTSIZ1
  * description: OTG_HS device endpoint-2 transfer size register
  * address: 0x40040B30
  * offset: 0x330
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } OTG_HS_DOEPTSIZ1;

  /** 
  * name: OTG_HS_DOEPCTL2
  * description: OTG device endpoint-2 control register
  * address: 0x40040B40
  * offset: 0x340
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPCTL2_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_608 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even odd frame/Endpoint data PID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t SNPM : 1;  ///< Snoop mode, reset value: 0x0
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t _RESERVED_609 : 4;
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID/Set even frame, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DOEPCTL2;

  /** 
  * name: OTG_HS_DOEPINT2
  * description: OTG_HS device endpoint-2 interrupt register
  * address: 0x40040B48
  * offset: 0x348
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT2_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_610 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_611 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_612 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT2;

  /** 
  * name: OTG_HS_DOEPTSIZ2
  * description: OTG_HS device endpoint-3 transfer size register
  * address: 0x40040B50
  * offset: 0x350
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } OTG_HS_DOEPTSIZ2;

  /** 
  * name: OTG_HS_DOEPCTL3
  * description: OTG device endpoint-3 control register
  * address: 0x40040B60
  * offset: 0x360
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPCTL3_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_613 : 4;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< Even odd frame/Endpoint data PID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t SNPM : 1;  ///< Snoop mode, reset value: 0x0
    uint32_t Stall : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t _RESERVED_614 : 4;
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< Set DATA0 PID/Set even frame, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< Set odd frame, reset value: 0x0
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } OTG_HS_DOEPCTL3;

  /** 
  * name: OTG_HS_DOEPINT3
  * description: OTG_HS device endpoint-3 interrupt register
  * address: 0x40040B68
  * offset: 0x368
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT3_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_615 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_616 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_617 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT3;

  /** 
  * name: OTG_HS_DOEPTSIZ3
  * description: OTG_HS device endpoint-4 transfer size register
  * address: 0x40040B70
  * offset: 0x370
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } OTG_HS_DOEPTSIZ3;

  /** 
  * name: OTG_HS_DOEPINT4
  * description: OTG_HS device endpoint-4 interrupt register
  * address: 0x40040B88
  * offset: 0x388
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT4_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_618 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_619 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_620 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT4;

  /** 
  * name: OTG_HS_DOEPTSIZ4
  * description: OTG_HS device endpoint-5 transfer size register
  * address: 0x40040B90
  * offset: 0x390
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } OTG_HS_DOEPTSIZ4;

  /** 
  * name: OTG_HS_DOEPINT5
  * description: OTG_HS device endpoint-5 interrupt register
  * address: 0x40040BA8
  * offset: 0x3A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT5_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_621 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_622 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_623 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT5;

  /** 
  * name: OTG_HS_DOEPINT6
  * description: OTG_HS device endpoint-6 interrupt register
  * address: 0x40040BC8
  * offset: 0x3C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT6_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_624 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_625 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_626 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT6;

  /** 
  * name: OTG_HS_DOEPINT7
  * description: OTG_HS device endpoint-7 interrupt register
  * address: 0x40040BE8
  * offset: 0x3E8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_DEVICE_OTG_HS_DOEPINT7_t {
    uint32_t XFRC : 1;  ///< Transfer completed interrupt, reset value: 0x0
    uint32_t EPDISD : 1;  ///< Endpoint disabled interrupt, reset value: 0x0
    uint32_t _RESERVED_627 : 1;
    uint32_t STUP : 1;  ///< SETUP phase done, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OUT token received when endpoint disabled, reset value: 0x0
    uint32_t _RESERVED_628 : 1;
    uint32_t B2BSTUP : 1;  ///< Back-to-back SETUP packets received, reset value: 0x0
    uint32_t _RESERVED_629 : 7;
    uint32_t NYET : 1;  ///< NYET interrupt, reset value: 0x0
  } OTG_HS_DOEPINT7;

} OTG_HS_DEVICE_t;


/** 
*  name: OTG_HS_PWRCLK
*  description: USB on the go high speed
*  group: USB_OTG_HS
*  address: 0x40040E00
*/
typedef struct{
  /** 
  * name: OTG_HS_PCGCR
  * description: Power and clock gating control register
  * address: 0x40040E00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_HS_PWRCLK_OTG_HS_PCGCR_t {
    uint32_t STPPCLK : 1;  ///< Stop PHY clock, reset value: 0x0
    uint32_t GATEHCLK : 1;  ///< Gate HCLK, reset value: 0x0
    uint32_t _RESERVED_630 : 2;
    uint32_t PHYSUSP : 1;  ///< PHY suspended, reset value: 0x0
  } OTG_HS_PCGCR;

} OTG_HS_PWRCLK_t;


/** 
*  name: OTG_FS_GLOBAL
*  description: USB on the go full speed
*  group: USB_OTG_FS
*  address: 0x50000000
*/
typedef struct{
  /** 
  * name: FS_GOTGCTL
  * description: OTG_FS control and status register (OTG_FS_GOTGCTL)
  * address: 0x50000000
  * offset: 0x0
  * reset value: 0x00000800
  * size: 0x20
  * access: 
  */
  struct OTG_FS_GLOBAL_FS_GOTGCTL_t {
    uint32_t SRQSCS : 1;  ///< Session request success, reset value: 0x0
    uint32_t SRQ : 1;  ///< Session request, reset value: 0x0
    uint32_t _RESERVED_631 : 6;
    uint32_t HNGSCS : 1;  ///< Host negotiation success, reset value: 0x0
    uint32_t HNPRQ : 1;  ///< HNP request, reset value: 0x0
    uint32_t HSHNPEN : 1;  ///< Host set HNP enable, reset value: 0x0
    uint32_t DHNPEN : 1;  ///< Device HNP enabled, reset value: 0x1
    uint32_t _RESERVED_632 : 4;
    uint32_t CIDSTS : 1;  ///< Connector ID status, reset value: 0x0
    uint32_t DBCT : 1;  ///< Long/short debounce time, reset value: 0x0
    uint32_t ASVLD : 1;  ///< A-session valid, reset value: 0x0
    uint32_t BSVLD : 1;  ///< B-session valid, reset value: 0x0
  } FS_GOTGCTL;

  /** 
  * name: FS_GOTGINT
  * description: OTG_FS interrupt register (OTG_FS_GOTGINT)
  * address: 0x50000004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GOTGINT_t {
    uint32_t _RESERVED_633 : 2;
    uint32_t SEDET : 1;  ///< Session end detected, reset value: 0x0
    uint32_t _RESERVED_634 : 5;
    uint32_t SRSSCHG : 1;  ///< Session request success status change, reset value: 0x0
    uint32_t HNSSCHG : 1;  ///< Host negotiation success status change, reset value: 0x0
    uint32_t _RESERVED_635 : 7;
    uint32_t HNGDET : 1;  ///< Host negotiation detected, reset value: 0x0
    uint32_t ADTOCHG : 1;  ///< A-device timeout change, reset value: 0x0
    uint32_t DBCDNE : 1;  ///< Debounce done, reset value: 0x0
  } FS_GOTGINT;

  /** 
  * name: FS_GAHBCFG
  * description: OTG_FS AHB configuration register (OTG_FS_GAHBCFG)
  * address: 0x50000008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GAHBCFG_t {
    uint32_t GINT : 1;  ///< Global interrupt mask, reset value: 0x0
    uint32_t _RESERVED_636 : 6;
    uint32_t TXFELVL : 1;  ///< TxFIFO empty level, reset value: 0x0
    uint32_t PTXFELVL : 1;  ///< Periodic TxFIFO empty level, reset value: 0x0
  } FS_GAHBCFG;

  /** 
  * name: FS_GUSBCFG
  * description: OTG_FS USB configuration register (OTG_FS_GUSBCFG)
  * address: 0x5000000C
  * offset: 0xC
  * reset value: 0x00000A00
  * size: 0x20
  * access: 
  */
  struct OTG_FS_GLOBAL_FS_GUSBCFG_t {
    uint32_t TOCAL : 3;  ///< FS timeout calibration, reset value: 0x0
    uint32_t _RESERVED_637 : 3;
    uint32_t PHYSEL : 1;  ///< Full Speed serial transceiver select, reset value: 0x0
    uint32_t _RESERVED_638 : 1;
    uint32_t SRPCAP : 1;  ///< SRP-capable, reset value: 0x0
    uint32_t HNPCAP : 1;  ///< HNP-capable, reset value: 0x1
    uint32_t TRDT : 4;  ///< USB turnaround time, reset value: 0x2
    uint32_t _RESERVED_639 : 15;
    uint32_t FHMOD : 1;  ///< Force host mode, reset value: 0x0
    uint32_t FDMOD : 1;  ///< Force device mode, reset value: 0x0
    uint32_t CTXPKT : 1;  ///< Corrupt Tx packet, reset value: 0x0
  } FS_GUSBCFG;

  /** 
  * name: FS_GRSTCTL
  * description: OTG_FS reset register (OTG_FS_GRSTCTL)
  * address: 0x50000010
  * offset: 0x10
  * reset value: 0x20000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_GLOBAL_FS_GRSTCTL_t {
    uint32_t CSRST : 1;  ///< Core soft reset, reset value: 0x0
    uint32_t HSRST : 1;  ///< HCLK soft reset, reset value: 0x0
    uint32_t FCRST : 1;  ///< Host frame counter reset, reset value: 0x0
    uint32_t _RESERVED_640 : 1;
    uint32_t RXFFLSH : 1;  ///< RxFIFO flush, reset value: 0x0
    uint32_t TXFFLSH : 1;  ///< TxFIFO flush, reset value: 0x0
    uint32_t TXFNUM : 5;  ///< TxFIFO number, reset value: 0x0
    uint32_t _RESERVED_641 : 20;
    uint32_t AHBIDL : 1;  ///< AHB master idle, reset value: 0x0
  } FS_GRSTCTL;

  /** 
  * name: FS_GINTSTS
  * description: OTG_FS core interrupt register (OTG_FS_GINTSTS)
  * address: 0x50000014
  * offset: 0x14
  * reset value: 0x04000020
  * size: 0x20
  * access: 
  */
  struct OTG_FS_GLOBAL_FS_GINTSTS_t {
    uint32_t CMOD : 1;  ///< Current mode of operation, reset value: 0x0
    uint32_t MMIS : 1;  ///< Mode mismatch interrupt, reset value: 0x0
    uint32_t OTGINT : 1;  ///< OTG interrupt, reset value: 0x0
    uint32_t SOF : 1;  ///< Start of frame, reset value: 0x0
    uint32_t RXFLVL : 1;  ///< RxFIFO non-empty, reset value: 0x0
    uint32_t NPTXFE : 1;  ///< Non-periodic TxFIFO empty, reset value: 0x1
    uint32_t GINAKEFF : 1;  ///< Global IN non-periodic NAK effective, reset value: 0x0
    uint32_t GOUTNAKEFF : 1;  ///< Global OUT NAK effective, reset value: 0x0
    uint32_t _RESERVED_642 : 2;
    uint32_t ESUSP : 1;  ///< Early suspend, reset value: 0x0
    uint32_t USBSUSP : 1;  ///< USB suspend, reset value: 0x0
    uint32_t USBRST : 1;  ///< USB reset, reset value: 0x0
    uint32_t ENUMDNE : 1;  ///< Enumeration done, reset value: 0x0
    uint32_t ISOODRP : 1;  ///< Isochronous OUT packet dropped interrupt, reset value: 0x0
    uint32_t EOPF : 1;  ///< End of periodic frame interrupt, reset value: 0x0
    uint32_t _RESERVED_643 : 2;
    uint32_t IEPINT : 1;  ///< IN endpoint interrupt, reset value: 0x0
    uint32_t OEPINT : 1;  ///< OUT endpoint interrupt, reset value: 0x0
    uint32_t IISOIXFR : 1;  ///< Incomplete isochronous IN transfer, reset value: 0x0
    uint32_t IPXFR_INCOMPISOOUT : 1;  ///< Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode), reset value: 0x0
    uint32_t _RESERVED_644 : 2;
    uint32_t HPRTINT : 1;  ///< Host port interrupt, reset value: 0x0
    uint32_t HCINT : 1;  ///< Host channels interrupt, reset value: 0x0
    uint32_t PTXFE : 1;  ///< Periodic TxFIFO empty, reset value: 0x1
    uint32_t _RESERVED_645 : 1;
    uint32_t CIDSCHG : 1;  ///< Connector ID status change, reset value: 0x0
    uint32_t DISCINT : 1;  ///< Disconnect detected interrupt, reset value: 0x0
    uint32_t SRQINT : 1;  ///< Session request/new session detected interrupt, reset value: 0x0
    uint32_t WKUPINT : 1;  ///< Resume/remote wakeup detected interrupt, reset value: 0x0
  } FS_GINTSTS;

  /** 
  * name: FS_GINTMSK
  * description: OTG_FS interrupt mask register (OTG_FS_GINTMSK)
  * address: 0x50000018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_GLOBAL_FS_GINTMSK_t {
    uint32_t _RESERVED_646 : 1;
    uint32_t MMISM : 1;  ///< Mode mismatch interrupt mask, reset value: 0x0
    uint32_t OTGINT : 1;  ///< OTG interrupt mask, reset value: 0x0
    uint32_t SOFM : 1;  ///< Start of frame mask, reset value: 0x0
    uint32_t RXFLVLM : 1;  ///< Receive FIFO non-empty mask, reset value: 0x0
    uint32_t NPTXFEM : 1;  ///< Non-periodic TxFIFO empty mask, reset value: 0x0
    uint32_t GINAKEFFM : 1;  ///< Global non-periodic IN NAK effective mask, reset value: 0x0
    uint32_t GONAKEFFM : 1;  ///< Global OUT NAK effective mask, reset value: 0x0
    uint32_t _RESERVED_647 : 2;
    uint32_t ESUSPM : 1;  ///< Early suspend mask, reset value: 0x0
    uint32_t USBSUSPM : 1;  ///< USB suspend mask, reset value: 0x0
    uint32_t USBRST : 1;  ///< USB reset mask, reset value: 0x0
    uint32_t ENUMDNEM : 1;  ///< Enumeration done mask, reset value: 0x0
    uint32_t ISOODRPM : 1;  ///< Isochronous OUT packet dropped interrupt mask, reset value: 0x0
    uint32_t EOPFM : 1;  ///< End of periodic frame interrupt mask, reset value: 0x0
    uint32_t _RESERVED_648 : 1;
    uint32_t EPMISM : 1;  ///< Endpoint mismatch interrupt mask, reset value: 0x0
    uint32_t IEPINT : 1;  ///< IN endpoints interrupt mask, reset value: 0x0
    uint32_t OEPINT : 1;  ///< OUT endpoints interrupt mask, reset value: 0x0
    uint32_t IISOIXFRM : 1;  ///< Incomplete isochronous IN transfer mask, reset value: 0x0
    uint32_t IPXFRM_IISOOXFRM : 1;  ///< Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode), reset value: 0x0
    uint32_t _RESERVED_649 : 2;
    uint32_t PRTIM : 1;  ///< Host port interrupt mask, reset value: 0x0
    uint32_t HCIM : 1;  ///< Host channels interrupt mask, reset value: 0x0
    uint32_t PTXFEM : 1;  ///< Periodic TxFIFO empty mask, reset value: 0x0
    uint32_t _RESERVED_650 : 1;
    uint32_t CIDSCHGM : 1;  ///< Connector ID status change mask, reset value: 0x0
    uint32_t DISCINT : 1;  ///< Disconnect detected interrupt mask, reset value: 0x0
    uint32_t SRQIM : 1;  ///< Session request/new session detected interrupt mask, reset value: 0x0
    uint32_t WUIM : 1;  ///< Resume/remote wakeup detected interrupt mask, reset value: 0x0
  } FS_GINTMSK;

  /** 
  * name: FS_GRXSTSR_Device
  * description: OTG_FS Receive status debug read(Device mode)
  * address: 0x5000001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_GLOBAL_FS_GRXSTSR_Device_t {
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
    uint32_t FRMNUM : 4;  ///< Frame number, reset value: 0x0
  } FS_GRXSTSR_Device;

  /** 
  * name: FS_GRXSTSR_Host
  * description: OTG_FS Receive status debug read(Host mode)
  * address: 0x5000001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_GLOBAL_FS_GRXSTSR_Host_t {
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t BCNT : 11;  ///< Byte count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
    uint32_t PKTSTS : 4;  ///< Packet status, reset value: 0x0
    uint32_t FRMNUM : 4;  ///< Frame number, reset value: 0x0
  } FS_GRXSTSR_Host;

  /** 
  * name: FS_GRXFSIZ
  * description: OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)
  * address: 0x50000024
  * offset: 0x24
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GRXFSIZ_t {
    uint32_t RXFD : 16;  ///< RxFIFO depth, reset value: 0x200
  } FS_GRXFSIZ;

  /** 
  * name: FS_GNPTXFSIZ_Device
  * description: OTG_FS non-periodic transmit FIFO size register (Device mode)
  * address: 0x50000028
  * offset: 0x28
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_t {
    uint32_t TX0FSA : 16;  ///< Endpoint 0 transmit RAM start address, reset value: 0x200
    uint32_t TX0FD : 16;  ///< Endpoint 0 TxFIFO depth, reset value: 0x0
  } FS_GNPTXFSIZ_Device;

  /** 
  * name: FS_GNPTXFSIZ_Host
  * description: OTG_FS non-periodic transmit FIFO size register (Host mode)
  * address: 0x50000028
  * offset: 0x28
  * reset value: 0x00000200
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_t {
    uint32_t NPTXFSA : 16;  ///< Non-periodic transmit RAM start address, reset value: 0x200
    uint32_t NPTXFD : 16;  ///< Non-periodic TxFIFO depth, reset value: 0x0
  } FS_GNPTXFSIZ_Host;

  /** 
  * name: FS_GNPTXSTS
  * description: OTG_FS non-periodic transmit FIFO/queue status register (OTG_FS_GNPTXSTS)
  * address: 0x5000002C
  * offset: 0x2C
  * reset value: 0x00080200
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_GLOBAL_FS_GNPTXSTS_t {
    uint32_t NPTXFSAV : 16;  ///< Non-periodic TxFIFO space available, reset value: 0x200
    uint32_t NPTQXSAV : 8;  ///< Non-periodic transmit request queue space available, reset value: 0x8
    uint32_t NPTXQTOP : 7;  ///< Top of the non-periodic transmit request queue, reset value: 0x0
  } FS_GNPTXSTS;

  /** 
  * name: FS_GCCFG
  * description: OTG_FS general core configuration register (OTG_FS_GCCFG)
  * address: 0x50000038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_GCCFG_t {
    uint32_t _RESERVED_651 : 16;
    uint32_t PWRDWN : 1;  ///< Power down, reset value: 0x0
    uint32_t _RESERVED_652 : 1;
    uint32_t VBUSASEN : 1;  ///< Enable the VBUS sensing device, reset value: 0x0
    uint32_t VBUSBSEN : 1;  ///< Enable the VBUS sensing device, reset value: 0x0
    uint32_t SOFOUTEN : 1;  ///< SOF output enable, reset value: 0x0
  } FS_GCCFG;

  /** 
  * name: FS_CID
  * description: core ID register
  * address: 0x5000003C
  * offset: 0x3C
  * reset value: 0x00001000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_CID_t {
    uint32_t PRODUCT_ID : 32;  ///< Product ID field, reset value: 0x1000
  } FS_CID;

  const uint8_t _RESERVED_653[164];

  /** 
  * name: FS_HPTXFSIZ
  * description: OTG_FS Host periodic transmit FIFO size register (OTG_FS_HPTXFSIZ)
  * address: 0x50000100
  * offset: 0x100
  * reset value: 0x02000600
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_HPTXFSIZ_t {
    uint32_t PTXSA : 16;  ///< Host periodic TxFIFO start address, reset value: 0x600
    uint32_t PTXFSIZ : 16;  ///< Host periodic TxFIFO depth, reset value: 0x200
  } FS_HPTXFSIZ;

  /** 
  * name: FS_DIEPTXF1
  * description: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF2)
  * address: 0x50000104
  * offset: 0x104
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_DIEPTXF1_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFO2 transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } FS_DIEPTXF1;

  /** 
  * name: FS_DIEPTXF2
  * description: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF3)
  * address: 0x50000108
  * offset: 0x108
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_DIEPTXF2_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFO3 transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } FS_DIEPTXF2;

  /** 
  * name: FS_DIEPTXF3
  * description: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF4)
  * address: 0x5000010C
  * offset: 0x10C
  * reset value: 0x02000400
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_GLOBAL_FS_DIEPTXF3_t {
    uint32_t INEPTXSA : 16;  ///< IN endpoint FIFO4 transmit RAM start address, reset value: 0x400
    uint32_t INEPTXFD : 16;  ///< IN endpoint TxFIFO depth, reset value: 0x200
  } FS_DIEPTXF3;

} OTG_FS_GLOBAL_t;


/** 
*  name: OTG_FS_HOST
*  description: USB on the go full speed
*  group: USB_OTG_FS
*  address: 0x50000400
*/
typedef struct{
  /** 
  * name: FS_HCFG
  * description: OTG_FS host configuration register (OTG_FS_HCFG)
  * address: 0x50000400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_HOST_FS_HCFG_t {
    uint32_t FSLSPCS : 2;  ///< FS/LS PHY clock select, reset value: 0x0
    uint32_t FSLSS : 1;  ///< FS- and LS-only support, reset value: 0x0
  } FS_HCFG;

  /** 
  * name: HFIR
  * description: OTG_FS Host frame interval register
  * address: 0x50000404
  * offset: 0x4
  * reset value: 0x0000EA60
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_HFIR_t {
    uint32_t FRIVL : 16;  ///< Frame interval, reset value: 0xEA60
  } HFIR;

  /** 
  * name: FS_HFNUM
  * description: OTG_FS host frame number/frame time remaining register (OTG_FS_HFNUM)
  * address: 0x50000408
  * offset: 0x8
  * reset value: 0x00003FFF
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_HOST_FS_HFNUM_t {
    uint32_t FRNUM : 16;  ///< Frame number, reset value: 0x3FFF
    uint32_t FTREM : 16;  ///< Frame time remaining, reset value: 0x0
  } FS_HFNUM;

  /** 
  * name: FS_HPTXSTS
  * description: OTG_FS_Host periodic transmit FIFO/queue status register (OTG_FS_HPTXSTS)
  * address: 0x50000410
  * offset: 0x10
  * reset value: 0x00080100
  * size: 0x20
  * access: 
  */
  struct OTG_FS_HOST_FS_HPTXSTS_t {
    uint32_t PTXFSAVL : 16;  ///< Periodic transmit data FIFO space available, reset value: 0x100
    uint32_t PTXQSAV : 8;  ///< Periodic transmit request queue space available, reset value: 0x8
    uint32_t PTXQTOP : 8;  ///< Top of the periodic transmit request queue, reset value: 0x0
  } FS_HPTXSTS;

  /** 
  * name: HAINT
  * description: OTG_FS Host all channels interrupt register
  * address: 0x50000414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_HOST_HAINT_t {
    uint32_t HAINT : 16;  ///< Channel interrupts, reset value: 0x0
  } HAINT;

  /** 
  * name: HAINTMSK
  * description: OTG_FS host all channels interrupt mask register
  * address: 0x50000418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_HAINTMSK_t {
    uint32_t HAINTM : 16;  ///< Channel interrupt mask, reset value: 0x0
  } HAINTMSK;

  const uint8_t _RESERVED_654[8];

  /** 
  * name: FS_HPRT
  * description: OTG_FS host port control and status register (OTG_FS_HPRT)
  * address: 0x50000440
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_HOST_FS_HPRT_t {
    uint32_t PCSTS : 1;  ///< Port connect status, reset value: 0x0
    uint32_t PCDET : 1;  ///< Port connect detected, reset value: 0x0
    uint32_t PENA : 1;  ///< Port enable, reset value: 0x0
    uint32_t PENCHNG : 1;  ///< Port enable/disable change, reset value: 0x0
    uint32_t POCA : 1;  ///< Port overcurrent active, reset value: 0x0
    uint32_t POCCHNG : 1;  ///< Port overcurrent change, reset value: 0x0
    uint32_t PRES : 1;  ///< Port resume, reset value: 0x0
    uint32_t PSUSP : 1;  ///< Port suspend, reset value: 0x0
    uint32_t PRST : 1;  ///< Port reset, reset value: 0x0
    uint32_t _RESERVED_655 : 1;
    uint32_t PLSTS : 2;  ///< Port line status, reset value: 0x0
    uint32_t PPWR : 1;  ///< Port power, reset value: 0x0
    uint32_t PTCTL : 4;  ///< Port test control, reset value: 0x0
    uint32_t PSPD : 2;  ///< Port speed, reset value: 0x0
  } FS_HPRT;

  const uint8_t _RESERVED_656[160];

  /** 
  * name: FS_HCCHAR0
  * description: OTG_FS host channel-0 characteristics register (OTG_FS_HCCHAR0)
  * address: 0x50000500
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR0_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_657 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR0;

  /** 
  * name: FS_HCINT0
  * description: OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)
  * address: 0x50000508
  * offset: 0x108
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT0_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_658 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_659 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT0;

  /** 
  * name: FS_HCINTMSK0
  * description: OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)
  * address: 0x5000050C
  * offset: 0x10C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK0_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_660 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK0;

  /** 
  * name: FS_HCTSIZ0
  * description: OTG_FS host channel-0 transfer size register
  * address: 0x50000510
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ0_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ0;

  /** 
  * name: FS_HCCHAR1
  * description: OTG_FS host channel-1 characteristics register (OTG_FS_HCCHAR1)
  * address: 0x50000520
  * offset: 0x120
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR1_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_661 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR1;

  /** 
  * name: FS_HCINT1
  * description: OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)
  * address: 0x50000528
  * offset: 0x128
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT1_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_662 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_663 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT1;

  /** 
  * name: FS_HCINTMSK1
  * description: OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)
  * address: 0x5000052C
  * offset: 0x12C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK1_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_664 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK1;

  /** 
  * name: FS_HCTSIZ1
  * description: OTG_FS host channel-1 transfer size register
  * address: 0x50000530
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ1;

  /** 
  * name: FS_HCCHAR2
  * description: OTG_FS host channel-2 characteristics register (OTG_FS_HCCHAR2)
  * address: 0x50000540
  * offset: 0x140
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR2_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_665 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR2;

  /** 
  * name: FS_HCINT2
  * description: OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)
  * address: 0x50000548
  * offset: 0x148
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT2_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_666 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_667 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT2;

  /** 
  * name: FS_HCINTMSK2
  * description: OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)
  * address: 0x5000054C
  * offset: 0x14C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK2_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_668 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK2;

  /** 
  * name: FS_HCTSIZ2
  * description: OTG_FS host channel-2 transfer size register
  * address: 0x50000550
  * offset: 0x150
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ2;

  /** 
  * name: FS_HCCHAR3
  * description: OTG_FS host channel-3 characteristics register (OTG_FS_HCCHAR3)
  * address: 0x50000560
  * offset: 0x160
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR3_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_669 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR3;

  /** 
  * name: FS_HCINT3
  * description: OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)
  * address: 0x50000568
  * offset: 0x168
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT3_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_670 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_671 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT3;

  /** 
  * name: FS_HCINTMSK3
  * description: OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)
  * address: 0x5000056C
  * offset: 0x16C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK3_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_672 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK3;

  /** 
  * name: FS_HCTSIZ3
  * description: OTG_FS host channel-3 transfer size register
  * address: 0x50000570
  * offset: 0x170
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ3;

  /** 
  * name: FS_HCCHAR4
  * description: OTG_FS host channel-4 characteristics register (OTG_FS_HCCHAR4)
  * address: 0x50000580
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR4_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_673 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR4;

  /** 
  * name: FS_HCINT4
  * description: OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)
  * address: 0x50000588
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT4_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_674 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_675 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT4;

  /** 
  * name: FS_HCINTMSK4
  * description: OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)
  * address: 0x5000058C
  * offset: 0x18C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK4_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_676 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK4;

  /** 
  * name: FS_HCTSIZ4
  * description: OTG_FS host channel-x transfer size register
  * address: 0x50000590
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ4_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ4;

  /** 
  * name: FS_HCCHAR5
  * description: OTG_FS host channel-5 characteristics register (OTG_FS_HCCHAR5)
  * address: 0x500005A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR5_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_677 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR5;

  /** 
  * name: FS_HCINT5
  * description: OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)
  * address: 0x500005A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT5_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_678 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_679 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT5;

  /** 
  * name: FS_HCINTMSK5
  * description: OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)
  * address: 0x500005AC
  * offset: 0x1AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK5_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_680 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK5;

  /** 
  * name: FS_HCTSIZ5
  * description: OTG_FS host channel-5 transfer size register
  * address: 0x500005B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ5_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ5;

  /** 
  * name: FS_HCCHAR6
  * description: OTG_FS host channel-6 characteristics register (OTG_FS_HCCHAR6)
  * address: 0x500005C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR6_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_681 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR6;

  /** 
  * name: FS_HCINT6
  * description: OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)
  * address: 0x500005C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT6_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_682 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_683 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT6;

  /** 
  * name: FS_HCINTMSK6
  * description: OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)
  * address: 0x500005CC
  * offset: 0x1CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK6_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_684 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK6;

  /** 
  * name: FS_HCTSIZ6
  * description: OTG_FS host channel-6 transfer size register
  * address: 0x500005D0
  * offset: 0x1D0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ6_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ6;

  /** 
  * name: FS_HCCHAR7
  * description: OTG_FS host channel-7 characteristics register (OTG_FS_HCCHAR7)
  * address: 0x500005E0
  * offset: 0x1E0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCCHAR7_t {
    uint32_t MPSIZ : 11;  ///< Maximum packet size, reset value: 0x0
    uint32_t EPNUM : 4;  ///< Endpoint number, reset value: 0x0
    uint32_t EPDIR : 1;  ///< Endpoint direction, reset value: 0x0
    uint32_t _RESERVED_685 : 1;
    uint32_t LSDEV : 1;  ///< Low-speed device, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multicount, reset value: 0x0
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t ODDFRM : 1;  ///< Odd frame, reset value: 0x0
    uint32_t CHDIS : 1;  ///< Channel disable, reset value: 0x0
    uint32_t CHENA : 1;  ///< Channel enable, reset value: 0x0
  } FS_HCCHAR7;

  /** 
  * name: FS_HCINT7
  * description: OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)
  * address: 0x500005E8
  * offset: 0x1E8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINT7_t {
    uint32_t XFRC : 1;  ///< Transfer completed, reset value: 0x0
    uint32_t CHH : 1;  ///< Channel halted, reset value: 0x0
    uint32_t _RESERVED_686 : 1;
    uint32_t STALL : 1;  ///< STALL response received interrupt, reset value: 0x0
    uint32_t NAK : 1;  ///< NAK response received interrupt, reset value: 0x0
    uint32_t ACK : 1;  ///< ACK response received/transmitted interrupt, reset value: 0x0
    uint32_t _RESERVED_687 : 1;
    uint32_t TXERR : 1;  ///< Transaction error, reset value: 0x0
    uint32_t BBERR : 1;  ///< Babble error, reset value: 0x0
    uint32_t FRMOR : 1;  ///< Frame overrun, reset value: 0x0
    uint32_t DTERR : 1;  ///< Data toggle error, reset value: 0x0
  } FS_HCINT7;

  /** 
  * name: FS_HCINTMSK7
  * description: OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)
  * address: 0x500005EC
  * offset: 0x1EC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCINTMSK7_t {
    uint32_t XFRCM : 1;  ///< Transfer completed mask, reset value: 0x0
    uint32_t CHHM : 1;  ///< Channel halted mask, reset value: 0x0
    uint32_t _RESERVED_688 : 1;
    uint32_t STALLM : 1;  ///< STALL response received interrupt mask, reset value: 0x0
    uint32_t NAKM : 1;  ///< NAK response received interrupt mask, reset value: 0x0
    uint32_t ACKM : 1;  ///< ACK response received/transmitted interrupt mask, reset value: 0x0
    uint32_t NYET : 1;  ///< response received interrupt mask, reset value: 0x0
    uint32_t TXERRM : 1;  ///< Transaction error mask, reset value: 0x0
    uint32_t BBERRM : 1;  ///< Babble error mask, reset value: 0x0
    uint32_t FRMORM : 1;  ///< Frame overrun mask, reset value: 0x0
    uint32_t DTERRM : 1;  ///< Data toggle error mask, reset value: 0x0
  } FS_HCINTMSK7;

  /** 
  * name: FS_HCTSIZ7
  * description: OTG_FS host channel-7 transfer size register
  * address: 0x500005F0
  * offset: 0x1F0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_HOST_FS_HCTSIZ7_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t DPID : 2;  ///< Data PID, reset value: 0x0
  } FS_HCTSIZ7;

} OTG_FS_HOST_t;


/** 
*  name: OTG_FS_DEVICE
*  description: USB on the go full speed
*  group: USB_OTG_FS
*  address: 0x50000800
*/
typedef struct{
  /** 
  * name: FS_DCFG
  * description: OTG_FS device configuration register (OTG_FS_DCFG)
  * address: 0x50000800
  * offset: 0x0
  * reset value: 0x02200000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_FS_DCFG_t {
    uint32_t DSPD : 2;  ///< Device speed, reset value: 0x0
    uint32_t NZLSOHSK : 1;  ///< Non-zero-length status OUT handshake, reset value: 0x0
    uint32_t _RESERVED_689 : 1;
    uint32_t DAD : 7;  ///< Device address, reset value: 0x0
    uint32_t PFIVL : 2;  ///< Periodic frame interval, reset value: 0x0
  } FS_DCFG;

  /** 
  * name: FS_DCTL
  * description: OTG_FS device control register (OTG_FS_DCTL)
  * address: 0x50000804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_FS_DCTL_t {
    uint32_t RWUSIG : 1;  ///< Remote wakeup signaling, reset value: 0x0
    uint32_t SDIS : 1;  ///< Soft disconnect, reset value: 0x0
    uint32_t GINSTS : 1;  ///< Global IN NAK status, reset value: 0x0
    uint32_t GONSTS : 1;  ///< Global OUT NAK status, reset value: 0x0
    uint32_t TCTL : 3;  ///< Test control, reset value: 0x0
    uint32_t SGINAK : 1;  ///< Set global IN NAK, reset value: 0x0
    uint32_t CGINAK : 1;  ///< Clear global IN NAK, reset value: 0x0
    uint32_t SGONAK : 1;  ///< Set global OUT NAK, reset value: 0x0
    uint32_t CGONAK : 1;  ///< Clear global OUT NAK, reset value: 0x0
    uint32_t POPRGDNE : 1;  ///< Power-on programming done, reset value: 0x0
  } FS_DCTL;

  /** 
  * name: FS_DSTS
  * description: OTG_FS device status register (OTG_FS_DSTS)
  * address: 0x50000808
  * offset: 0x8
  * reset value: 0x00000010
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_FS_DSTS_t {
    uint32_t SUSPSTS : 1;  ///< Suspend status, reset value: 0x0
    uint32_t ENUMSPD : 2;  ///< Enumerated speed, reset value: 0x0
    uint32_t EERR : 1;  ///< Erratic error, reset value: 0x0
    uint32_t _RESERVED_690 : 4;
    uint32_t FNSOF : 14;  ///< Frame number of the received SOF, reset value: 0x0
  } FS_DSTS;

  /** 
  * name: FS_DIEPMSK
  * description: OTG_FS device IN endpoint common interrupt mask register (OTG_FS_DIEPMSK)
  * address: 0x50000810
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_FS_DIEPMSK_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_691 : 1;
    uint32_t TOM : 1;  ///< Timeout condition mask (Non-isochronous endpoints), reset value: 0x0
    uint32_t ITTXFEMSK : 1;  ///< IN token received when TxFIFO empty mask, reset value: 0x0
    uint32_t INEPNMM : 1;  ///< IN token received with EP mismatch mask, reset value: 0x0
    uint32_t INEPNEM : 1;  ///< IN endpoint NAK effective mask, reset value: 0x0
  } FS_DIEPMSK;

  /** 
  * name: FS_DOEPMSK
  * description: OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)
  * address: 0x50000814
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_FS_DOEPMSK_t {
    uint32_t XFRCM : 1;  ///< Transfer completed interrupt mask, reset value: 0x0
    uint32_t EPDM : 1;  ///< Endpoint disabled interrupt mask, reset value: 0x0
    uint32_t _RESERVED_692 : 1;
    uint32_t STUPM : 1;  ///< SETUP phase done mask, reset value: 0x0
    uint32_t OTEPDM : 1;  ///< OUT token received when endpoint disabled mask, reset value: 0x0
  } FS_DOEPMSK;

  /** 
  * name: FS_DAINT
  * description: OTG_FS device all endpoints interrupt register (OTG_FS_DAINT)
  * address: 0x50000818
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_FS_DAINT_t {
    uint32_t IEPINT : 16;  ///< IN endpoint interrupt bits, reset value: 0x0
    uint32_t OEPINT : 16;  ///< OUT endpoint interrupt bits, reset value: 0x0
  } FS_DAINT;

  /** 
  * name: FS_DAINTMSK
  * description: OTG_FS all endpoints interrupt mask register (OTG_FS_DAINTMSK)
  * address: 0x5000081C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_FS_DAINTMSK_t {
    uint32_t IEPM : 16;  ///< IN EP interrupt mask bits, reset value: 0x0
    uint32_t OEPINT : 16;  ///< OUT endpoint interrupt bits, reset value: 0x0
  } FS_DAINTMSK;

  /** 
  * name: DVBUSDIS
  * description: OTG_FS device VBUS discharge time register
  * address: 0x50000828
  * offset: 0x28
  * reset value: 0x000017D7
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DVBUSDIS_t {
    uint32_t VBUSDT : 16;  ///< Device VBUS discharge time, reset value: 0x17D7
  } DVBUSDIS;

  /** 
  * name: DVBUSPULSE
  * description: OTG_FS device VBUS pulsing time register
  * address: 0x5000082C
  * offset: 0x2C
  * reset value: 0x000005B8
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DVBUSPULSE_t {
    uint32_t DVBUSP : 12;  ///< Device VBUS pulsing time, reset value: 0x5B8
  } DVBUSPULSE;

  /** 
  * name: DIEPEMPMSK
  * description: OTG_FS device IN endpoint FIFO empty interrupt mask register
  * address: 0x50000834
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DIEPEMPMSK_t {
    uint32_t INEPTXFEM : 16;  ///< IN EP Tx FIFO empty interrupt mask bits, reset value: 0x0
  } DIEPEMPMSK;

  const uint8_t _RESERVED_693[172];

  /** 
  * name: FS_DIEPCTL0
  * description: OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)
  * address: 0x50000900
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_FS_DIEPCTL0_t {
    uint32_t MPSIZ : 2;  ///< Maximum packet size, reset value: 0x0
    uint32_t _RESERVED_694 : 13;
    uint32_t USBAEP : 1;  ///< USB active endpoint, reset value: 0x0
    uint32_t _RESERVED_695 : 1;
    uint32_t NAKSTS : 1;  ///< NAK status, reset value: 0x0
    uint32_t EPTYP : 2;  ///< Endpoint type, reset value: 0x0
    uint32_t _RESERVED_696 : 1;
    uint32_t STALL : 1;  ///< STALL handshake, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TxFIFO number, reset value: 0x0
    uint32_t CNAK : 1;  ///< Clear NAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< Set NAK, reset value: 0x0
    uint32_t _RESERVED_697 : 2;
    uint32_t EPDIS : 1;  ///< Endpoint disable, reset value: 0x0
    uint32_t EPENA : 1;  ///< Endpoint enable, reset value: 0x0
  } FS_DIEPCTL0;

  /** 
  * name: DIEPINT0
  * description: device endpoint-x interrupt register
  * address: 0x50000908
  * offset: 0x108
  * reset value: 0x00000080
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPINT0_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_698 : 1;
    uint32_t TOC : 1;  ///< TOC, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< ITTXFE, reset value: 0x0
    uint32_t _RESERVED_699 : 1;
    uint32_t INEPNE : 1;  ///< INEPNE, reset value: 0x0
    uint32_t TXFE : 1;  ///< TXFE, reset value: 0x1
  } DIEPINT0;

  /** 
  * name: DIEPTSIZ0
  * description: device endpoint-0 transfer size register
  * address: 0x50000910
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DIEPTSIZ0_t {
    uint32_t XFRSIZ : 7;  ///< Transfer size, reset value: 0x0
    uint32_t _RESERVED_700 : 12;
    uint32_t PKTCNT : 2;  ///< Packet count, reset value: 0x0
  } DIEPTSIZ0;

  /** 
  * name: DTXFSTS0
  * description: OTG_FS device IN endpoint transmit FIFO status register
  * address: 0x50000918
  * offset: 0x118
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_DTXFSTS0_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space available, reset value: 0x0
  } DTXFSTS0;

  /** 
  * name: DIEPCTL1
  * description: OTG device endpoint-1 control register
  * address: 0x50000920
  * offset: 0x120
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPCTL1_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_701 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t _RESERVED_702 : 1;
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TXFNUM, reset value: 0x0
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM_SD1PID : 1;  ///< SODDFRM/SD1PID, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DIEPCTL1;

  /** 
  * name: DIEPINT1
  * description: device endpoint-1 interrupt register
  * address: 0x50000928
  * offset: 0x128
  * reset value: 0x00000080
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPINT1_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_703 : 1;
    uint32_t TOC : 1;  ///< TOC, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< ITTXFE, reset value: 0x0
    uint32_t _RESERVED_704 : 1;
    uint32_t INEPNE : 1;  ///< INEPNE, reset value: 0x0
    uint32_t TXFE : 1;  ///< TXFE, reset value: 0x1
  } DIEPINT1;

  /** 
  * name: DIEPTSIZ1
  * description: device endpoint-1 transfer size register
  * address: 0x50000930
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DIEPTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } DIEPTSIZ1;

  /** 
  * name: DTXFSTS1
  * description: OTG_FS device IN endpoint transmit FIFO status register
  * address: 0x50000938
  * offset: 0x138
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_DTXFSTS1_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space available, reset value: 0x0
  } DTXFSTS1;

  /** 
  * name: DIEPCTL2
  * description: OTG device endpoint-2 control register
  * address: 0x50000940
  * offset: 0x140
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPCTL2_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_705 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t _RESERVED_706 : 1;
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TXFNUM, reset value: 0x0
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< SODDFRM, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DIEPCTL2;

  /** 
  * name: DIEPINT2
  * description: device endpoint-2 interrupt register
  * address: 0x50000948
  * offset: 0x148
  * reset value: 0x00000080
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPINT2_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_707 : 1;
    uint32_t TOC : 1;  ///< TOC, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< ITTXFE, reset value: 0x0
    uint32_t _RESERVED_708 : 1;
    uint32_t INEPNE : 1;  ///< INEPNE, reset value: 0x0
    uint32_t TXFE : 1;  ///< TXFE, reset value: 0x1
  } DIEPINT2;

  /** 
  * name: DIEPTSIZ2
  * description: device endpoint-2 transfer size register
  * address: 0x50000950
  * offset: 0x150
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DIEPTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } DIEPTSIZ2;

  /** 
  * name: DTXFSTS2
  * description: OTG_FS device IN endpoint transmit FIFO status register
  * address: 0x50000958
  * offset: 0x158
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_DTXFSTS2_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space available, reset value: 0x0
  } DTXFSTS2;

  /** 
  * name: DIEPCTL3
  * description: OTG device endpoint-3 control register
  * address: 0x50000960
  * offset: 0x160
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPCTL3_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_709 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t _RESERVED_710 : 1;
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t TXFNUM : 4;  ///< TXFNUM, reset value: 0x0
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< SODDFRM, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DIEPCTL3;

  /** 
  * name: DIEPINT3
  * description: device endpoint-3 interrupt register
  * address: 0x50000968
  * offset: 0x168
  * reset value: 0x00000080
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DIEPINT3_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_711 : 1;
    uint32_t TOC : 1;  ///< TOC, reset value: 0x0
    uint32_t ITTXFE : 1;  ///< ITTXFE, reset value: 0x0
    uint32_t _RESERVED_712 : 1;
    uint32_t INEPNE : 1;  ///< INEPNE, reset value: 0x0
    uint32_t TXFE : 1;  ///< TXFE, reset value: 0x1
  } DIEPINT3;

  /** 
  * name: DIEPTSIZ3
  * description: device endpoint-3 transfer size register
  * address: 0x50000970
  * offset: 0x170
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DIEPTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t MCNT : 2;  ///< Multi count, reset value: 0x0
  } DIEPTSIZ3;

  /** 
  * name: DTXFSTS3
  * description: OTG_FS device IN endpoint transmit FIFO status register
  * address: 0x50000978
  * offset: 0x178
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct OTG_FS_DEVICE_DTXFSTS3_t {
    uint32_t INEPTFSAV : 16;  ///< IN endpoint TxFIFO space available, reset value: 0x0
  } DTXFSTS3;

  const uint8_t _RESERVED_713[360];

  /** 
  * name: DOEPCTL0
  * description: device endpoint-0 control register
  * address: 0x50000B00
  * offset: 0x300
  * reset value: 0x00008000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DOEPCTL0_t {
    uint32_t MPSIZ : 2;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_714 : 13;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x1
    uint32_t _RESERVED_715 : 1;
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t SNPM : 1;  ///< SNPM, reset value: 0x0
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t _RESERVED_716 : 4;
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t _RESERVED_717 : 2;
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DOEPCTL0;

  /** 
  * name: DOEPINT0
  * description: device endpoint-0 interrupt register
  * address: 0x50000B08
  * offset: 0x308
  * reset value: 0x00000080
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPINT0_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_718 : 1;
    uint32_t STUP : 1;  ///< STUP, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OTEPDIS, reset value: 0x0
    uint32_t _RESERVED_719 : 1;
    uint32_t B2BSTUP : 1;  ///< B2BSTUP, reset value: 0x0
  } DOEPINT0;

  /** 
  * name: DOEPTSIZ0
  * description: device OUT endpoint-0 transfer size register
  * address: 0x50000B10
  * offset: 0x310
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPTSIZ0_t {
    uint32_t XFRSIZ : 7;  ///< Transfer size, reset value: 0x0
    uint32_t _RESERVED_720 : 12;
    uint32_t PKTCNT : 1;  ///< Packet count, reset value: 0x0
    uint32_t _RESERVED_721 : 9;
    uint32_t STUPCNT : 2;  ///< SETUP packet count, reset value: 0x0
  } DOEPTSIZ0;

  /** 
  * name: DOEPCTL1
  * description: device endpoint-1 control register
  * address: 0x50000B20
  * offset: 0x320
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DOEPCTL1_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_722 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t SNPM : 1;  ///< SNPM, reset value: 0x0
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t _RESERVED_723 : 4;
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< SODDFRM, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DOEPCTL1;

  /** 
  * name: DOEPINT1
  * description: device endpoint-1 interrupt register
  * address: 0x50000B28
  * offset: 0x328
  * reset value: 0x00000080
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPINT1_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_724 : 1;
    uint32_t STUP : 1;  ///< STUP, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OTEPDIS, reset value: 0x0
    uint32_t _RESERVED_725 : 1;
    uint32_t B2BSTUP : 1;  ///< B2BSTUP, reset value: 0x0
  } DOEPINT1;

  /** 
  * name: DOEPTSIZ1
  * description: device OUT endpoint-1 transfer size register
  * address: 0x50000B30
  * offset: 0x330
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPTSIZ1_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } DOEPTSIZ1;

  /** 
  * name: DOEPCTL2
  * description: device endpoint-2 control register
  * address: 0x50000B40
  * offset: 0x340
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DOEPCTL2_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_726 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t SNPM : 1;  ///< SNPM, reset value: 0x0
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t _RESERVED_727 : 4;
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< SODDFRM, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DOEPCTL2;

  /** 
  * name: DOEPINT2
  * description: device endpoint-2 interrupt register
  * address: 0x50000B48
  * offset: 0x348
  * reset value: 0x00000080
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPINT2_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_728 : 1;
    uint32_t STUP : 1;  ///< STUP, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OTEPDIS, reset value: 0x0
    uint32_t _RESERVED_729 : 1;
    uint32_t B2BSTUP : 1;  ///< B2BSTUP, reset value: 0x0
  } DOEPINT2;

  /** 
  * name: DOEPTSIZ2
  * description: device OUT endpoint-2 transfer size register
  * address: 0x50000B50
  * offset: 0x350
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPTSIZ2_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } DOEPTSIZ2;

  /** 
  * name: DOEPCTL3
  * description: device endpoint-3 control register
  * address: 0x50000B60
  * offset: 0x360
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct OTG_FS_DEVICE_DOEPCTL3_t {
    uint32_t MPSIZ : 11;  ///< MPSIZ, reset value: 0x0
    uint32_t _RESERVED_730 : 4;
    uint32_t USBAEP : 1;  ///< USBAEP, reset value: 0x0
    uint32_t EONUM_DPID : 1;  ///< EONUM/DPID, reset value: 0x0
    uint32_t NAKSTS : 1;  ///< NAKSTS, reset value: 0x0
    uint32_t EPTYP : 2;  ///< EPTYP, reset value: 0x0
    uint32_t SNPM : 1;  ///< SNPM, reset value: 0x0
    uint32_t Stall : 1;  ///< Stall, reset value: 0x0
    uint32_t _RESERVED_731 : 4;
    uint32_t CNAK : 1;  ///< CNAK, reset value: 0x0
    uint32_t SNAK : 1;  ///< SNAK, reset value: 0x0
    uint32_t SD0PID_SEVNFRM : 1;  ///< SD0PID/SEVNFRM, reset value: 0x0
    uint32_t SODDFRM : 1;  ///< SODDFRM, reset value: 0x0
    uint32_t EPDIS : 1;  ///< EPDIS, reset value: 0x0
    uint32_t EPENA : 1;  ///< EPENA, reset value: 0x0
  } DOEPCTL3;

  /** 
  * name: DOEPINT3
  * description: device endpoint-3 interrupt register
  * address: 0x50000B68
  * offset: 0x368
  * reset value: 0x00000080
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPINT3_t {
    uint32_t XFRC : 1;  ///< XFRC, reset value: 0x0
    uint32_t EPDISD : 1;  ///< EPDISD, reset value: 0x0
    uint32_t _RESERVED_732 : 1;
    uint32_t STUP : 1;  ///< STUP, reset value: 0x0
    uint32_t OTEPDIS : 1;  ///< OTEPDIS, reset value: 0x0
    uint32_t _RESERVED_733 : 1;
    uint32_t B2BSTUP : 1;  ///< B2BSTUP, reset value: 0x0
  } DOEPINT3;

  /** 
  * name: DOEPTSIZ3
  * description: device OUT endpoint-3 transfer size register
  * address: 0x50000B70
  * offset: 0x370
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_DEVICE_DOEPTSIZ3_t {
    uint32_t XFRSIZ : 19;  ///< Transfer size, reset value: 0x0
    uint32_t PKTCNT : 10;  ///< Packet count, reset value: 0x0
    uint32_t RXDPID_STUPCNT : 2;  ///< Received data PID/SETUP packet count, reset value: 0x0
  } DOEPTSIZ3;

} OTG_FS_DEVICE_t;


/** 
*  name: OTG_FS_PWRCLK
*  description: USB on the go full speed
*  group: USB_OTG_FS
*  address: 0x50000E00
*/
typedef struct{
  /** 
  * name: FS_PCGCCTL
  * description: OTG_FS power and clock gating control register
  * address: 0x50000E00
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct OTG_FS_PWRCLK_FS_PCGCCTL_t {
    uint32_t STPPCLK : 1;  ///< Stop PHY clock, reset value: 0x0
    uint32_t GATEHCLK : 1;  ///< Gate HCLK, reset value: 0x0
    uint32_t _RESERVED_734 : 2;
    uint32_t PHYSUSP : 1;  ///< PHY Suspended, reset value: 0x0
  } FS_PCGCCTL;

} OTG_FS_PWRCLK_t;


/** 
*  name: DCMI
*  description: Digital camera interface
*  group: DCMI
*  address: 0x50050000
*/
typedef struct{
  /** 
  * name: CR
  * description: control register 1
  * address: 0x50050000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_CR_t {
    uint32_t CAPTURE : 1;  ///< Capture enable, reset value: 0x0
    uint32_t CM : 1;  ///< Capture mode, reset value: 0x0
    uint32_t CROP : 1;  ///< Crop feature, reset value: 0x0
    uint32_t JPEG : 1;  ///< JPEG format, reset value: 0x0
    uint32_t ESS : 1;  ///< Embedded synchronization select, reset value: 0x0
    uint32_t PCKPOL : 1;  ///< Pixel clock polarity, reset value: 0x0
    uint32_t HSPOL : 1;  ///< Horizontal synchronization polarity, reset value: 0x0
    uint32_t VSPOL : 1;  ///< Vertical synchronization polarity, reset value: 0x0
    uint32_t FCRC : 2;  ///< Frame capture rate control, reset value: 0x0
    uint32_t EDM : 2;  ///< Extended data mode, reset value: 0x0
    uint32_t _RESERVED_735 : 2;
    uint32_t ENABLE : 1;  ///< DCMI enable, reset value: 0x0
  } CR;

  /** 
  * name: SR
  * description: status register
  * address: 0x50050004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DCMI_SR_t {
    uint32_t HSYNC : 1;  ///< HSYNC, reset value: 0x0
    uint32_t VSYNC : 1;  ///< VSYNC, reset value: 0x0
    uint32_t FNE : 1;  ///< FIFO not empty, reset value: 0x0
  } SR;

  /** 
  * name: RIS
  * description: raw interrupt status register
  * address: 0x50050008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DCMI_RIS_t {
    uint32_t FRAME_RIS : 1;  ///< Capture complete raw interrupt status, reset value: 0x0
    uint32_t OVR_RIS : 1;  ///< Overrun raw interrupt status, reset value: 0x0
    uint32_t ERR_RIS : 1;  ///< Synchronization error raw interrupt status, reset value: 0x0
    uint32_t VSYNC_RIS : 1;  ///< VSYNC raw interrupt status, reset value: 0x0
    uint32_t LINE_RIS : 1;  ///< Line raw interrupt status, reset value: 0x0
  } RIS;

  /** 
  * name: IER
  * description: interrupt enable register
  * address: 0x5005000C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_IER_t {
    uint32_t FRAME_IE : 1;  ///< Capture complete interrupt enable, reset value: 0x0
    uint32_t OVR_IE : 1;  ///< Overrun interrupt enable, reset value: 0x0
    uint32_t ERR_IE : 1;  ///< Synchronization error interrupt enable, reset value: 0x0
    uint32_t VSYNC_IE : 1;  ///< VSYNC interrupt enable, reset value: 0x0
    uint32_t LINE_IE : 1;  ///< Line interrupt enable, reset value: 0x0
  } IER;

  /** 
  * name: MIS
  * description: masked interrupt status register
  * address: 0x50050010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DCMI_MIS_t {
    uint32_t FRAME_MIS : 1;  ///< Capture complete masked interrupt status, reset value: 0x0
    uint32_t OVR_MIS : 1;  ///< Overrun masked interrupt status, reset value: 0x0
    uint32_t ERR_MIS : 1;  ///< Synchronization error masked interrupt status, reset value: 0x0
    uint32_t VSYNC_MIS : 1;  ///< VSYNC masked interrupt status, reset value: 0x0
    uint32_t LINE_MIS : 1;  ///< Line masked interrupt status, reset value: 0x0
  } MIS;

  /** 
  * name: ICR
  * description: interrupt clear register
  * address: 0x50050014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct DCMI_ICR_t {
    uint32_t FRAME_ISC : 1;  ///< Capture complete interrupt status clear, reset value: 0x0
    uint32_t OVR_ISC : 1;  ///< Overrun interrupt status clear, reset value: 0x0
    uint32_t ERR_ISC : 1;  ///< Synchronization error interrupt status clear, reset value: 0x0
    uint32_t VSYNC_ISC : 1;  ///< Vertical synch interrupt status clear, reset value: 0x0
    uint32_t LINE_ISC : 1;  ///< line interrupt status clear, reset value: 0x0
  } ICR;

  /** 
  * name: ESCR
  * description: embedded synchronization code register
  * address: 0x50050018
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_ESCR_t {
    uint32_t FSC : 8;  ///< Frame start delimiter code, reset value: 0x0
    uint32_t LSC : 8;  ///< Line start delimiter code, reset value: 0x0
    uint32_t LEC : 8;  ///< Line end delimiter code, reset value: 0x0
    uint32_t FEC : 8;  ///< Frame end delimiter code, reset value: 0x0
  } ESCR;

  /** 
  * name: ESUR
  * description: embedded synchronization unmask register
  * address: 0x5005001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_ESUR_t {
    uint32_t FSU : 8;  ///< Frame start delimiter unmask, reset value: 0x0
    uint32_t LSU : 8;  ///< Line start delimiter unmask, reset value: 0x0
    uint32_t LEU : 8;  ///< Line end delimiter unmask, reset value: 0x0
    uint32_t FEU : 8;  ///< Frame end delimiter unmask, reset value: 0x0
  } ESUR;

  /** 
  * name: CWSTRT
  * description: crop window start
  * address: 0x50050020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_CWSTRT_t {
    uint32_t HOFFCNT : 14;  ///< Horizontal offset count, reset value: 0x0
    uint32_t _RESERVED_736 : 2;
    uint32_t VST : 13;  ///< Vertical start line count, reset value: 0x0
  } CWSTRT;

  /** 
  * name: CWSIZE
  * description: crop window size
  * address: 0x50050024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DCMI_CWSIZE_t {
    uint32_t CAPCNT : 14;  ///< Capture count, reset value: 0x0
    uint32_t _RESERVED_737 : 2;
    uint32_t VLINE : 14;  ///< Vertical line count, reset value: 0x0
  } CWSIZE;

  /** 
  * name: DR
  * description: data register
  * address: 0x50050028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct DCMI_DR_t {
    uint32_t Byte0 : 8;  ///< Data byte 0, reset value: 0x0
    uint32_t Byte1 : 8;  ///< Data byte 1, reset value: 0x0
    uint32_t Byte2 : 8;  ///< Data byte 2, reset value: 0x0
    uint32_t Byte3 : 8;  ///< Data byte 3, reset value: 0x0
  } DR;

} DCMI_t;


/** 
*  name: CRYP
*  description: Cryptographic processor
*  group: CRYP
*  address: 0x50060000
*/
typedef struct{
  /** 
  * name: CR
  * description: control register
  * address: 0x50060000
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct CRYP_CR_t {
    uint32_t _RESERVED_738 : 2;
    uint32_t ALGODIR : 1;  ///< Algorithm direction, reset value: 0x0
    uint32_t ALGOMODE0 : 3;  ///< Algorithm mode, reset value: 0x0
    uint32_t DATATYPE : 2;  ///< Data type selection, reset value: 0x0
    uint32_t KEYSIZE : 2;  ///< Key size selection (AES mode only), reset value: 0x0
    uint32_t _RESERVED_739 : 4;
    uint32_t FFLUSH : 1;  ///< FIFO flush, reset value: 0x0
    uint32_t CRYPEN : 1;  ///< Cryptographic processor enable, reset value: 0x0
    uint32_t GCM_CCMPH : 2;  ///< GCM_CCMPH, reset value: 0x0
    uint32_t _RESERVED_740 : 1;
    uint32_t ALGOMODE3 : 1;  ///< ALGOMODE, reset value: 0x0
  } CR;

  /** 
  * name: SR
  * description: status register
  * address: 0x50060004
  * offset: 0x4
  * reset value: 0x00000003
  * size: 0x20
  * access: read-only
  */
  const struct CRYP_SR_t {
    uint32_t IFEM : 1;  ///< Input FIFO empty, reset value: 0x1
    uint32_t IFNF : 1;  ///< Input FIFO not full, reset value: 0x1
    uint32_t OFNE : 1;  ///< Output FIFO not empty, reset value: 0x0
    uint32_t OFFU : 1;  ///< Output FIFO full, reset value: 0x0
    uint32_t BUSY : 1;  ///< Busy bit, reset value: 0x0
  } SR;

  /** 
  * name: DIN
  * description: data input register
  * address: 0x50060008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_DIN_t {
    uint32_t DATAIN : 32;  ///< Data input, reset value: 0x0
  } DIN;

  /** 
  * name: DOUT
  * description: data output register
  * address: 0x5006000C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CRYP_DOUT_t {
    uint32_t DATAOUT : 32;  ///< Data output, reset value: 0x0
  } DOUT;

  /** 
  * name: DMACR
  * description: DMA control register
  * address: 0x50060010
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_DMACR_t {
    uint32_t DIEN : 1;  ///< DMA input enable, reset value: 0x0
    uint32_t DOEN : 1;  ///< DMA output enable, reset value: 0x0
  } DMACR;

  /** 
  * name: IMSCR
  * description: interrupt mask set/clear register
  * address: 0x50060014
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_IMSCR_t {
    uint32_t INIM : 1;  ///< Input FIFO service interrupt mask, reset value: 0x0
    uint32_t OUTIM : 1;  ///< Output FIFO service interrupt mask, reset value: 0x0
  } IMSCR;

  /** 
  * name: RISR
  * description: raw interrupt status register
  * address: 0x50060018
  * offset: 0x18
  * reset value: 0x00000001
  * size: 0x20
  * access: read-only
  */
  const struct CRYP_RISR_t {
    uint32_t INRIS : 1;  ///< Input FIFO service raw interrupt status, reset value: 0x1
    uint32_t OUTRIS : 1;  ///< Output FIFO service raw interrupt status, reset value: 0x0
  } RISR;

  /** 
  * name: MISR
  * description: masked interrupt status register
  * address: 0x5006001C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct CRYP_MISR_t {
    uint32_t INMIS : 1;  ///< Input FIFO service masked interrupt status, reset value: 0x0
    uint32_t OUTMIS : 1;  ///< Output FIFO service masked interrupt status, reset value: 0x0
  } MISR;

  /** 
  * name: K0LR
  * description: key registers
  * address: 0x50060020
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K0LR_t {
    uint32_t b224 : 1;  ///< b224, reset value: 0x0
    uint32_t b225 : 1;  ///< b225, reset value: 0x0
    uint32_t b226 : 1;  ///< b226, reset value: 0x0
    uint32_t b227 : 1;  ///< b227, reset value: 0x0
    uint32_t b228 : 1;  ///< b228, reset value: 0x0
    uint32_t b229 : 1;  ///< b229, reset value: 0x0
    uint32_t b230 : 1;  ///< b230, reset value: 0x0
    uint32_t b231 : 1;  ///< b231, reset value: 0x0
    uint32_t b232 : 1;  ///< b232, reset value: 0x0
    uint32_t b233 : 1;  ///< b233, reset value: 0x0
    uint32_t b234 : 1;  ///< b234, reset value: 0x0
    uint32_t b235 : 1;  ///< b235, reset value: 0x0
    uint32_t b236 : 1;  ///< b236, reset value: 0x0
    uint32_t b237 : 1;  ///< b237, reset value: 0x0
    uint32_t b238 : 1;  ///< b238, reset value: 0x0
    uint32_t b239 : 1;  ///< b239, reset value: 0x0
    uint32_t b240 : 1;  ///< b240, reset value: 0x0
    uint32_t b241 : 1;  ///< b241, reset value: 0x0
    uint32_t b242 : 1;  ///< b242, reset value: 0x0
    uint32_t b243 : 1;  ///< b243, reset value: 0x0
    uint32_t b244 : 1;  ///< b244, reset value: 0x0
    uint32_t b245 : 1;  ///< b245, reset value: 0x0
    uint32_t b246 : 1;  ///< b246, reset value: 0x0
    uint32_t b247 : 1;  ///< b247, reset value: 0x0
    uint32_t b248 : 1;  ///< b248, reset value: 0x0
    uint32_t b249 : 1;  ///< b249, reset value: 0x0
    uint32_t b250 : 1;  ///< b250, reset value: 0x0
    uint32_t b251 : 1;  ///< b251, reset value: 0x0
    uint32_t b252 : 1;  ///< b252, reset value: 0x0
    uint32_t b253 : 1;  ///< b253, reset value: 0x0
    uint32_t b254 : 1;  ///< b254, reset value: 0x0
    uint32_t b255 : 1;  ///< b255, reset value: 0x0
  } K0LR;

  /** 
  * name: K0RR
  * description: key registers
  * address: 0x50060024
  * offset: 0x24
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K0RR_t {
    uint32_t b192 : 1;  ///< b192, reset value: 0x0
    uint32_t b193 : 1;  ///< b193, reset value: 0x0
    uint32_t b194 : 1;  ///< b194, reset value: 0x0
    uint32_t b195 : 1;  ///< b195, reset value: 0x0
    uint32_t b196 : 1;  ///< b196, reset value: 0x0
    uint32_t b197 : 1;  ///< b197, reset value: 0x0
    uint32_t b198 : 1;  ///< b198, reset value: 0x0
    uint32_t b199 : 1;  ///< b199, reset value: 0x0
    uint32_t b200 : 1;  ///< b200, reset value: 0x0
    uint32_t b201 : 1;  ///< b201, reset value: 0x0
    uint32_t b202 : 1;  ///< b202, reset value: 0x0
    uint32_t b203 : 1;  ///< b203, reset value: 0x0
    uint32_t b204 : 1;  ///< b204, reset value: 0x0
    uint32_t b205 : 1;  ///< b205, reset value: 0x0
    uint32_t b206 : 1;  ///< b206, reset value: 0x0
    uint32_t b207 : 1;  ///< b207, reset value: 0x0
    uint32_t b208 : 1;  ///< b208, reset value: 0x0
    uint32_t b209 : 1;  ///< b209, reset value: 0x0
    uint32_t b210 : 1;  ///< b210, reset value: 0x0
    uint32_t b211 : 1;  ///< b211, reset value: 0x0
    uint32_t b212 : 1;  ///< b212, reset value: 0x0
    uint32_t b213 : 1;  ///< b213, reset value: 0x0
    uint32_t b214 : 1;  ///< b214, reset value: 0x0
    uint32_t b215 : 1;  ///< b215, reset value: 0x0
    uint32_t b216 : 1;  ///< b216, reset value: 0x0
    uint32_t b217 : 1;  ///< b217, reset value: 0x0
    uint32_t b218 : 1;  ///< b218, reset value: 0x0
    uint32_t b219 : 1;  ///< b219, reset value: 0x0
    uint32_t b220 : 1;  ///< b220, reset value: 0x0
    uint32_t b221 : 1;  ///< b221, reset value: 0x0
    uint32_t b222 : 1;  ///< b222, reset value: 0x0
    uint32_t b223 : 1;  ///< b223, reset value: 0x0
  } K0RR;

  /** 
  * name: K1LR
  * description: key registers
  * address: 0x50060028
  * offset: 0x28
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K1LR_t {
    uint32_t b160 : 1;  ///< b160, reset value: 0x0
    uint32_t b161 : 1;  ///< b161, reset value: 0x0
    uint32_t b162 : 1;  ///< b162, reset value: 0x0
    uint32_t b163 : 1;  ///< b163, reset value: 0x0
    uint32_t b164 : 1;  ///< b164, reset value: 0x0
    uint32_t b165 : 1;  ///< b165, reset value: 0x0
    uint32_t b166 : 1;  ///< b166, reset value: 0x0
    uint32_t b167 : 1;  ///< b167, reset value: 0x0
    uint32_t b168 : 1;  ///< b168, reset value: 0x0
    uint32_t b169 : 1;  ///< b169, reset value: 0x0
    uint32_t b170 : 1;  ///< b170, reset value: 0x0
    uint32_t b171 : 1;  ///< b171, reset value: 0x0
    uint32_t b172 : 1;  ///< b172, reset value: 0x0
    uint32_t b173 : 1;  ///< b173, reset value: 0x0
    uint32_t b174 : 1;  ///< b174, reset value: 0x0
    uint32_t b175 : 1;  ///< b175, reset value: 0x0
    uint32_t b176 : 1;  ///< b176, reset value: 0x0
    uint32_t b177 : 1;  ///< b177, reset value: 0x0
    uint32_t b178 : 1;  ///< b178, reset value: 0x0
    uint32_t b179 : 1;  ///< b179, reset value: 0x0
    uint32_t b180 : 1;  ///< b180, reset value: 0x0
    uint32_t b181 : 1;  ///< b181, reset value: 0x0
    uint32_t b182 : 1;  ///< b182, reset value: 0x0
    uint32_t b183 : 1;  ///< b183, reset value: 0x0
    uint32_t b184 : 1;  ///< b184, reset value: 0x0
    uint32_t b185 : 1;  ///< b185, reset value: 0x0
    uint32_t b186 : 1;  ///< b186, reset value: 0x0
    uint32_t b187 : 1;  ///< b187, reset value: 0x0
    uint32_t b188 : 1;  ///< b188, reset value: 0x0
    uint32_t b189 : 1;  ///< b189, reset value: 0x0
    uint32_t b190 : 1;  ///< b190, reset value: 0x0
    uint32_t b191 : 1;  ///< b191, reset value: 0x0
  } K1LR;

  /** 
  * name: K1RR
  * description: key registers
  * address: 0x5006002C
  * offset: 0x2C
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K1RR_t {
    uint32_t b128 : 1;  ///< b128, reset value: 0x0
    uint32_t b129 : 1;  ///< b129, reset value: 0x0
    uint32_t b130 : 1;  ///< b130, reset value: 0x0
    uint32_t b131 : 1;  ///< b131, reset value: 0x0
    uint32_t b132 : 1;  ///< b132, reset value: 0x0
    uint32_t b133 : 1;  ///< b133, reset value: 0x0
    uint32_t b134 : 1;  ///< b134, reset value: 0x0
    uint32_t b135 : 1;  ///< b135, reset value: 0x0
    uint32_t b136 : 1;  ///< b136, reset value: 0x0
    uint32_t b137 : 1;  ///< b137, reset value: 0x0
    uint32_t b138 : 1;  ///< b138, reset value: 0x0
    uint32_t b139 : 1;  ///< b139, reset value: 0x0
    uint32_t b140 : 1;  ///< b140, reset value: 0x0
    uint32_t b141 : 1;  ///< b141, reset value: 0x0
    uint32_t b142 : 1;  ///< b142, reset value: 0x0
    uint32_t b143 : 1;  ///< b143, reset value: 0x0
    uint32_t b144 : 1;  ///< b144, reset value: 0x0
    uint32_t b145 : 1;  ///< b145, reset value: 0x0
    uint32_t b146 : 1;  ///< b146, reset value: 0x0
    uint32_t b147 : 1;  ///< b147, reset value: 0x0
    uint32_t b148 : 1;  ///< b148, reset value: 0x0
    uint32_t b149 : 1;  ///< b149, reset value: 0x0
    uint32_t b150 : 1;  ///< b150, reset value: 0x0
    uint32_t b151 : 1;  ///< b151, reset value: 0x0
    uint32_t b152 : 1;  ///< b152, reset value: 0x0
    uint32_t b153 : 1;  ///< b153, reset value: 0x0
    uint32_t b154 : 1;  ///< b154, reset value: 0x0
    uint32_t b155 : 1;  ///< b155, reset value: 0x0
    uint32_t b156 : 1;  ///< b156, reset value: 0x0
    uint32_t b157 : 1;  ///< b157, reset value: 0x0
    uint32_t b158 : 1;  ///< b158, reset value: 0x0
    uint32_t b159 : 1;  ///< b159, reset value: 0x0
  } K1RR;

  /** 
  * name: K2LR
  * description: key registers
  * address: 0x50060030
  * offset: 0x30
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K2LR_t {
    uint32_t b96 : 1;  ///< b96, reset value: 0x0
    uint32_t b97 : 1;  ///< b97, reset value: 0x0
    uint32_t b98 : 1;  ///< b98, reset value: 0x0
    uint32_t b99 : 1;  ///< b99, reset value: 0x0
    uint32_t b100 : 1;  ///< b100, reset value: 0x0
    uint32_t b101 : 1;  ///< b101, reset value: 0x0
    uint32_t b102 : 1;  ///< b102, reset value: 0x0
    uint32_t b103 : 1;  ///< b103, reset value: 0x0
    uint32_t b104 : 1;  ///< b104, reset value: 0x0
    uint32_t b105 : 1;  ///< b105, reset value: 0x0
    uint32_t b106 : 1;  ///< b106, reset value: 0x0
    uint32_t b107 : 1;  ///< b107, reset value: 0x0
    uint32_t b108 : 1;  ///< b108, reset value: 0x0
    uint32_t b109 : 1;  ///< b109, reset value: 0x0
    uint32_t b110 : 1;  ///< b110, reset value: 0x0
    uint32_t b111 : 1;  ///< b111, reset value: 0x0
    uint32_t b112 : 1;  ///< b112, reset value: 0x0
    uint32_t b113 : 1;  ///< b113, reset value: 0x0
    uint32_t b114 : 1;  ///< b114, reset value: 0x0
    uint32_t b115 : 1;  ///< b115, reset value: 0x0
    uint32_t b116 : 1;  ///< b116, reset value: 0x0
    uint32_t b117 : 1;  ///< b117, reset value: 0x0
    uint32_t b118 : 1;  ///< b118, reset value: 0x0
    uint32_t b119 : 1;  ///< b119, reset value: 0x0
    uint32_t b120 : 1;  ///< b120, reset value: 0x0
    uint32_t b121 : 1;  ///< b121, reset value: 0x0
    uint32_t b122 : 1;  ///< b122, reset value: 0x0
    uint32_t b123 : 1;  ///< b123, reset value: 0x0
    uint32_t b124 : 1;  ///< b124, reset value: 0x0
    uint32_t b125 : 1;  ///< b125, reset value: 0x0
    uint32_t b126 : 1;  ///< b126, reset value: 0x0
    uint32_t b127 : 1;  ///< b127, reset value: 0x0
  } K2LR;

  /** 
  * name: K2RR
  * description: key registers
  * address: 0x50060034
  * offset: 0x34
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K2RR_t {
    uint32_t b64 : 1;  ///< b64, reset value: 0x0
    uint32_t b65 : 1;  ///< b65, reset value: 0x0
    uint32_t b66 : 1;  ///< b66, reset value: 0x0
    uint32_t b67 : 1;  ///< b67, reset value: 0x0
    uint32_t b68 : 1;  ///< b68, reset value: 0x0
    uint32_t b69 : 1;  ///< b69, reset value: 0x0
    uint32_t b70 : 1;  ///< b70, reset value: 0x0
    uint32_t b71 : 1;  ///< b71, reset value: 0x0
    uint32_t b72 : 1;  ///< b72, reset value: 0x0
    uint32_t b73 : 1;  ///< b73, reset value: 0x0
    uint32_t b74 : 1;  ///< b74, reset value: 0x0
    uint32_t b75 : 1;  ///< b75, reset value: 0x0
    uint32_t b76 : 1;  ///< b76, reset value: 0x0
    uint32_t b77 : 1;  ///< b77, reset value: 0x0
    uint32_t b78 : 1;  ///< b78, reset value: 0x0
    uint32_t b79 : 1;  ///< b79, reset value: 0x0
    uint32_t b80 : 1;  ///< b80, reset value: 0x0
    uint32_t b81 : 1;  ///< b81, reset value: 0x0
    uint32_t b82 : 1;  ///< b82, reset value: 0x0
    uint32_t b83 : 1;  ///< b83, reset value: 0x0
    uint32_t b84 : 1;  ///< b84, reset value: 0x0
    uint32_t b85 : 1;  ///< b85, reset value: 0x0
    uint32_t b86 : 1;  ///< b86, reset value: 0x0
    uint32_t b87 : 1;  ///< b87, reset value: 0x0
    uint32_t b88 : 1;  ///< b88, reset value: 0x0
    uint32_t b89 : 1;  ///< b89, reset value: 0x0
    uint32_t b90 : 1;  ///< b90, reset value: 0x0
    uint32_t b91 : 1;  ///< b91, reset value: 0x0
    uint32_t b92 : 1;  ///< b92, reset value: 0x0
    uint32_t b93 : 1;  ///< b93, reset value: 0x0
    uint32_t b94 : 1;  ///< b94, reset value: 0x0
    uint32_t b95 : 1;  ///< b95, reset value: 0x0
  } K2RR;

  /** 
  * name: K3LR
  * description: key registers
  * address: 0x50060038
  * offset: 0x38
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K3LR_t {
    uint32_t b32 : 1;  ///< b32, reset value: 0x0
    uint32_t b33 : 1;  ///< b33, reset value: 0x0
    uint32_t b34 : 1;  ///< b34, reset value: 0x0
    uint32_t b35 : 1;  ///< b35, reset value: 0x0
    uint32_t b36 : 1;  ///< b36, reset value: 0x0
    uint32_t b37 : 1;  ///< b37, reset value: 0x0
    uint32_t b38 : 1;  ///< b38, reset value: 0x0
    uint32_t b39 : 1;  ///< b39, reset value: 0x0
    uint32_t b40 : 1;  ///< b40, reset value: 0x0
    uint32_t b41 : 1;  ///< b41, reset value: 0x0
    uint32_t b42 : 1;  ///< b42, reset value: 0x0
    uint32_t b43 : 1;  ///< b43, reset value: 0x0
    uint32_t b44 : 1;  ///< b44, reset value: 0x0
    uint32_t b45 : 1;  ///< b45, reset value: 0x0
    uint32_t b46 : 1;  ///< b46, reset value: 0x0
    uint32_t b47 : 1;  ///< b47, reset value: 0x0
    uint32_t b48 : 1;  ///< b48, reset value: 0x0
    uint32_t b49 : 1;  ///< b49, reset value: 0x0
    uint32_t b50 : 1;  ///< b50, reset value: 0x0
    uint32_t b51 : 1;  ///< b51, reset value: 0x0
    uint32_t b52 : 1;  ///< b52, reset value: 0x0
    uint32_t b53 : 1;  ///< b53, reset value: 0x0
    uint32_t b54 : 1;  ///< b54, reset value: 0x0
    uint32_t b55 : 1;  ///< b55, reset value: 0x0
    uint32_t b56 : 1;  ///< b56, reset value: 0x0
    uint32_t b57 : 1;  ///< b57, reset value: 0x0
    uint32_t b58 : 1;  ///< b58, reset value: 0x0
    uint32_t b59 : 1;  ///< b59, reset value: 0x0
    uint32_t b60 : 1;  ///< b60, reset value: 0x0
    uint32_t b61 : 1;  ///< b61, reset value: 0x0
    uint32_t b62 : 1;  ///< b62, reset value: 0x0
    uint32_t b63 : 1;  ///< b63, reset value: 0x0
  } K3LR;

  /** 
  * name: K3RR
  * description: key registers
  * address: 0x5006003C
  * offset: 0x3C
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct CRYP_K3RR_t {
    uint32_t b0 : 1;  ///< b0, reset value: 0x0
    uint32_t b1 : 1;  ///< b1, reset value: 0x0
    uint32_t b2 : 1;  ///< b2, reset value: 0x0
    uint32_t b3 : 1;  ///< b3, reset value: 0x0
    uint32_t b4 : 1;  ///< b4, reset value: 0x0
    uint32_t b5 : 1;  ///< b5, reset value: 0x0
    uint32_t b6 : 1;  ///< b6, reset value: 0x0
    uint32_t b7 : 1;  ///< b7, reset value: 0x0
    uint32_t b8 : 1;  ///< b8, reset value: 0x0
    uint32_t b9 : 1;  ///< b9, reset value: 0x0
    uint32_t b10 : 1;  ///< b10, reset value: 0x0
    uint32_t b11 : 1;  ///< b11, reset value: 0x0
    uint32_t b12 : 1;  ///< b12, reset value: 0x0
    uint32_t b13 : 1;  ///< b13, reset value: 0x0
    uint32_t b14 : 1;  ///< b14, reset value: 0x0
    uint32_t b15 : 1;  ///< b15, reset value: 0x0
    uint32_t b16 : 1;  ///< b16, reset value: 0x0
    uint32_t b17 : 1;  ///< b17, reset value: 0x0
    uint32_t b18 : 1;  ///< b18, reset value: 0x0
    uint32_t b19 : 1;  ///< b19, reset value: 0x0
    uint32_t b20 : 1;  ///< b20, reset value: 0x0
    uint32_t b21 : 1;  ///< b21, reset value: 0x0
    uint32_t b22 : 1;  ///< b22, reset value: 0x0
    uint32_t b23 : 1;  ///< b23, reset value: 0x0
    uint32_t b24 : 1;  ///< b24, reset value: 0x0
    uint32_t b25 : 1;  ///< b25, reset value: 0x0
    uint32_t b26 : 1;  ///< b26, reset value: 0x0
    uint32_t b27 : 1;  ///< b27, reset value: 0x0
    uint32_t b28 : 1;  ///< b28, reset value: 0x0
    uint32_t b29 : 1;  ///< b29, reset value: 0x0
    uint32_t b30 : 1;  ///< b30, reset value: 0x0
    uint32_t b31 : 1;  ///< b31, reset value: 0x0
  } K3RR;

  /** 
  * name: IV0LR
  * description: initialization vector registers
  * address: 0x50060040
  * offset: 0x40
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_IV0LR_t {
    uint32_t IV31 : 1;  ///< IV31, reset value: 0x0
    uint32_t IV30 : 1;  ///< IV30, reset value: 0x0
    uint32_t IV29 : 1;  ///< IV29, reset value: 0x0
    uint32_t IV28 : 1;  ///< IV28, reset value: 0x0
    uint32_t IV27 : 1;  ///< IV27, reset value: 0x0
    uint32_t IV26 : 1;  ///< IV26, reset value: 0x0
    uint32_t IV25 : 1;  ///< IV25, reset value: 0x0
    uint32_t IV24 : 1;  ///< IV24, reset value: 0x0
    uint32_t IV23 : 1;  ///< IV23, reset value: 0x0
    uint32_t IV22 : 1;  ///< IV22, reset value: 0x0
    uint32_t IV21 : 1;  ///< IV21, reset value: 0x0
    uint32_t IV20 : 1;  ///< IV20, reset value: 0x0
    uint32_t IV19 : 1;  ///< IV19, reset value: 0x0
    uint32_t IV18 : 1;  ///< IV18, reset value: 0x0
    uint32_t IV17 : 1;  ///< IV17, reset value: 0x0
    uint32_t IV16 : 1;  ///< IV16, reset value: 0x0
    uint32_t IV15 : 1;  ///< IV15, reset value: 0x0
    uint32_t IV14 : 1;  ///< IV14, reset value: 0x0
    uint32_t IV13 : 1;  ///< IV13, reset value: 0x0
    uint32_t IV12 : 1;  ///< IV12, reset value: 0x0
    uint32_t IV11 : 1;  ///< IV11, reset value: 0x0
    uint32_t IV10 : 1;  ///< IV10, reset value: 0x0
    uint32_t IV9 : 1;  ///< IV9, reset value: 0x0
    uint32_t IV8 : 1;  ///< IV8, reset value: 0x0
    uint32_t IV7 : 1;  ///< IV7, reset value: 0x0
    uint32_t IV6 : 1;  ///< IV6, reset value: 0x0
    uint32_t IV5 : 1;  ///< IV5, reset value: 0x0
    uint32_t IV4 : 1;  ///< IV4, reset value: 0x0
    uint32_t IV3 : 1;  ///< IV3, reset value: 0x0
    uint32_t IV2 : 1;  ///< IV2, reset value: 0x0
    uint32_t IV1 : 1;  ///< IV1, reset value: 0x0
    uint32_t IV0 : 1;  ///< IV0, reset value: 0x0
  } IV0LR;

  /** 
  * name: IV0RR
  * description: initialization vector registers
  * address: 0x50060044
  * offset: 0x44
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_IV0RR_t {
    uint32_t IV63 : 1;  ///< IV63, reset value: 0x0
    uint32_t IV62 : 1;  ///< IV62, reset value: 0x0
    uint32_t IV61 : 1;  ///< IV61, reset value: 0x0
    uint32_t IV60 : 1;  ///< IV60, reset value: 0x0
    uint32_t IV59 : 1;  ///< IV59, reset value: 0x0
    uint32_t IV58 : 1;  ///< IV58, reset value: 0x0
    uint32_t IV57 : 1;  ///< IV57, reset value: 0x0
    uint32_t IV56 : 1;  ///< IV56, reset value: 0x0
    uint32_t IV55 : 1;  ///< IV55, reset value: 0x0
    uint32_t IV54 : 1;  ///< IV54, reset value: 0x0
    uint32_t IV53 : 1;  ///< IV53, reset value: 0x0
    uint32_t IV52 : 1;  ///< IV52, reset value: 0x0
    uint32_t IV51 : 1;  ///< IV51, reset value: 0x0
    uint32_t IV50 : 1;  ///< IV50, reset value: 0x0
    uint32_t IV49 : 1;  ///< IV49, reset value: 0x0
    uint32_t IV48 : 1;  ///< IV48, reset value: 0x0
    uint32_t IV47 : 1;  ///< IV47, reset value: 0x0
    uint32_t IV46 : 1;  ///< IV46, reset value: 0x0
    uint32_t IV45 : 1;  ///< IV45, reset value: 0x0
    uint32_t IV44 : 1;  ///< IV44, reset value: 0x0
    uint32_t IV43 : 1;  ///< IV43, reset value: 0x0
    uint32_t IV42 : 1;  ///< IV42, reset value: 0x0
    uint32_t IV41 : 1;  ///< IV41, reset value: 0x0
    uint32_t IV40 : 1;  ///< IV40, reset value: 0x0
    uint32_t IV39 : 1;  ///< IV39, reset value: 0x0
    uint32_t IV38 : 1;  ///< IV38, reset value: 0x0
    uint32_t IV37 : 1;  ///< IV37, reset value: 0x0
    uint32_t IV36 : 1;  ///< IV36, reset value: 0x0
    uint32_t IV35 : 1;  ///< IV35, reset value: 0x0
    uint32_t IV34 : 1;  ///< IV34, reset value: 0x0
    uint32_t IV33 : 1;  ///< IV33, reset value: 0x0
    uint32_t IV32 : 1;  ///< IV32, reset value: 0x0
  } IV0RR;

  /** 
  * name: IV1LR
  * description: initialization vector registers
  * address: 0x50060048
  * offset: 0x48
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_IV1LR_t {
    uint32_t IV95 : 1;  ///< IV95, reset value: 0x0
    uint32_t IV94 : 1;  ///< IV94, reset value: 0x0
    uint32_t IV93 : 1;  ///< IV93, reset value: 0x0
    uint32_t IV92 : 1;  ///< IV92, reset value: 0x0
    uint32_t IV91 : 1;  ///< IV91, reset value: 0x0
    uint32_t IV90 : 1;  ///< IV90, reset value: 0x0
    uint32_t IV89 : 1;  ///< IV89, reset value: 0x0
    uint32_t IV88 : 1;  ///< IV88, reset value: 0x0
    uint32_t IV87 : 1;  ///< IV87, reset value: 0x0
    uint32_t IV86 : 1;  ///< IV86, reset value: 0x0
    uint32_t IV85 : 1;  ///< IV85, reset value: 0x0
    uint32_t IV84 : 1;  ///< IV84, reset value: 0x0
    uint32_t IV83 : 1;  ///< IV83, reset value: 0x0
    uint32_t IV82 : 1;  ///< IV82, reset value: 0x0
    uint32_t IV81 : 1;  ///< IV81, reset value: 0x0
    uint32_t IV80 : 1;  ///< IV80, reset value: 0x0
    uint32_t IV79 : 1;  ///< IV79, reset value: 0x0
    uint32_t IV78 : 1;  ///< IV78, reset value: 0x0
    uint32_t IV77 : 1;  ///< IV77, reset value: 0x0
    uint32_t IV76 : 1;  ///< IV76, reset value: 0x0
    uint32_t IV75 : 1;  ///< IV75, reset value: 0x0
    uint32_t IV74 : 1;  ///< IV74, reset value: 0x0
    uint32_t IV73 : 1;  ///< IV73, reset value: 0x0
    uint32_t IV72 : 1;  ///< IV72, reset value: 0x0
    uint32_t IV71 : 1;  ///< IV71, reset value: 0x0
    uint32_t IV70 : 1;  ///< IV70, reset value: 0x0
    uint32_t IV69 : 1;  ///< IV69, reset value: 0x0
    uint32_t IV68 : 1;  ///< IV68, reset value: 0x0
    uint32_t IV67 : 1;  ///< IV67, reset value: 0x0
    uint32_t IV66 : 1;  ///< IV66, reset value: 0x0
    uint32_t IV65 : 1;  ///< IV65, reset value: 0x0
    uint32_t IV64 : 1;  ///< IV64, reset value: 0x0
  } IV1LR;

  /** 
  * name: IV1RR
  * description: initialization vector registers
  * address: 0x5006004C
  * offset: 0x4C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_IV1RR_t {
    uint32_t IV127 : 1;  ///< IV127, reset value: 0x0
    uint32_t IV126 : 1;  ///< IV126, reset value: 0x0
    uint32_t IV125 : 1;  ///< IV125, reset value: 0x0
    uint32_t IV124 : 1;  ///< IV124, reset value: 0x0
    uint32_t IV123 : 1;  ///< IV123, reset value: 0x0
    uint32_t IV122 : 1;  ///< IV122, reset value: 0x0
    uint32_t IV121 : 1;  ///< IV121, reset value: 0x0
    uint32_t IV120 : 1;  ///< IV120, reset value: 0x0
    uint32_t IV119 : 1;  ///< IV119, reset value: 0x0
    uint32_t IV118 : 1;  ///< IV118, reset value: 0x0
    uint32_t IV117 : 1;  ///< IV117, reset value: 0x0
    uint32_t IV116 : 1;  ///< IV116, reset value: 0x0
    uint32_t IV115 : 1;  ///< IV115, reset value: 0x0
    uint32_t IV114 : 1;  ///< IV114, reset value: 0x0
    uint32_t IV113 : 1;  ///< IV113, reset value: 0x0
    uint32_t IV112 : 1;  ///< IV112, reset value: 0x0
    uint32_t IV111 : 1;  ///< IV111, reset value: 0x0
    uint32_t IV110 : 1;  ///< IV110, reset value: 0x0
    uint32_t IV109 : 1;  ///< IV109, reset value: 0x0
    uint32_t IV108 : 1;  ///< IV108, reset value: 0x0
    uint32_t IV107 : 1;  ///< IV107, reset value: 0x0
    uint32_t IV106 : 1;  ///< IV106, reset value: 0x0
    uint32_t IV105 : 1;  ///< IV105, reset value: 0x0
    uint32_t IV104 : 1;  ///< IV104, reset value: 0x0
    uint32_t IV103 : 1;  ///< IV103, reset value: 0x0
    uint32_t IV102 : 1;  ///< IV102, reset value: 0x0
    uint32_t IV101 : 1;  ///< IV101, reset value: 0x0
    uint32_t IV100 : 1;  ///< IV100, reset value: 0x0
    uint32_t IV99 : 1;  ///< IV99, reset value: 0x0
    uint32_t IV98 : 1;  ///< IV98, reset value: 0x0
    uint32_t IV97 : 1;  ///< IV97, reset value: 0x0
    uint32_t IV96 : 1;  ///< IV96, reset value: 0x0
  } IV1RR;

  /** 
  * name: CSGCMCCM0R
  * description: context swap register
  * address: 0x50060050
  * offset: 0x50
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM0R_t {
    uint32_t CSGCMCCM0R : 32;  ///< CSGCMCCM0R, reset value: 0x0
  } CSGCMCCM0R;

  /** 
  * name: CSGCMCCM1R
  * description: context swap register
  * address: 0x50060054
  * offset: 0x54
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM1R_t {
    uint32_t CSGCMCCM1R : 32;  ///< CSGCMCCM1R, reset value: 0x0
  } CSGCMCCM1R;

  /** 
  * name: CSGCMCCM2R
  * description: context swap register
  * address: 0x50060058
  * offset: 0x58
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM2R_t {
    uint32_t CSGCMCCM2R : 32;  ///< CSGCMCCM2R, reset value: 0x0
  } CSGCMCCM2R;

  /** 
  * name: CSGCMCCM3R
  * description: context swap register
  * address: 0x5006005C
  * offset: 0x5C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM3R_t {
    uint32_t CSGCMCCM3R : 32;  ///< CSGCMCCM3R, reset value: 0x0
  } CSGCMCCM3R;

  /** 
  * name: CSGCMCCM4R
  * description: context swap register
  * address: 0x50060060
  * offset: 0x60
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM4R_t {
    uint32_t CSGCMCCM4R : 32;  ///< CSGCMCCM4R, reset value: 0x0
  } CSGCMCCM4R;

  /** 
  * name: CSGCMCCM5R
  * description: context swap register
  * address: 0x50060064
  * offset: 0x64
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM5R_t {
    uint32_t CSGCMCCM5R : 32;  ///< CSGCMCCM5R, reset value: 0x0
  } CSGCMCCM5R;

  /** 
  * name: CSGCMCCM6R
  * description: context swap register
  * address: 0x50060068
  * offset: 0x68
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM6R_t {
    uint32_t CSGCMCCM6R : 32;  ///< CSGCMCCM6R, reset value: 0x0
  } CSGCMCCM6R;

  /** 
  * name: CSGCMCCM7R
  * description: context swap register
  * address: 0x5006006C
  * offset: 0x6C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCMCCM7R_t {
    uint32_t CSGCMCCM7R : 32;  ///< CSGCMCCM7R, reset value: 0x0
  } CSGCMCCM7R;

  /** 
  * name: CSGCM0R
  * description: context swap register
  * address: 0x50060070
  * offset: 0x70
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM0R_t {
    uint32_t CSGCM0R : 32;  ///< CSGCM0R, reset value: 0x0
  } CSGCM0R;

  /** 
  * name: CSGCM1R
  * description: context swap register
  * address: 0x50060074
  * offset: 0x74
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM1R_t {
    uint32_t CSGCM1R : 32;  ///< CSGCM1R, reset value: 0x0
  } CSGCM1R;

  /** 
  * name: CSGCM2R
  * description: context swap register
  * address: 0x50060078
  * offset: 0x78
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM2R_t {
    uint32_t CSGCM2R : 32;  ///< CSGCM2R, reset value: 0x0
  } CSGCM2R;

  /** 
  * name: CSGCM3R
  * description: context swap register
  * address: 0x5006007C
  * offset: 0x7C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM3R_t {
    uint32_t CSGCM3R : 32;  ///< CSGCM3R, reset value: 0x0
  } CSGCM3R;

  /** 
  * name: CSGCM4R
  * description: context swap register
  * address: 0x50060080
  * offset: 0x80
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM4R_t {
    uint32_t CSGCM4R : 32;  ///< CSGCM4R, reset value: 0x0
  } CSGCM4R;

  /** 
  * name: CSGCM5R
  * description: context swap register
  * address: 0x50060084
  * offset: 0x84
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM5R_t {
    uint32_t CSGCM5R : 32;  ///< CSGCM5R, reset value: 0x0
  } CSGCM5R;

  /** 
  * name: CSGCM6R
  * description: context swap register
  * address: 0x50060088
  * offset: 0x88
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM6R_t {
    uint32_t CSGCM6R : 32;  ///< CSGCM6R, reset value: 0x0
  } CSGCM6R;

  /** 
  * name: CSGCM7R
  * description: context swap register
  * address: 0x5006008C
  * offset: 0x8C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct CRYP_CSGCM7R_t {
    uint32_t CSGCM7R : 32;  ///< CSGCM7R, reset value: 0x0
  } CSGCM7R;

} CRYP_t;


/** 
*  name: HASH
*  description: Hash processor
*  group: HASH
*  address: 0x50060400
*/
typedef struct{
  /** 
  * name: CR
  * description: control register
  * address: 0x50060400
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct HASH_CR_t {
    uint32_t _RESERVED_741 : 2;
    uint32_t INIT : 1;  ///< Initialize message digest calculation, reset value: 0x0
    uint32_t DMAE : 1;  ///< DMA enable, reset value: 0x0
    uint32_t DATATYPE : 2;  ///< Data type selection, reset value: 0x0
    uint32_t MODE : 1;  ///< Mode selection, reset value: 0x0
    uint32_t ALGO0 : 1;  ///< Algorithm selection, reset value: 0x0
    uint32_t NBW : 4;  ///< Number of words already pushed, reset value: 0x0
    uint32_t DINNE : 1;  ///< DIN not empty, reset value: 0x0
    uint32_t MDMAT : 1;  ///< Multiple DMA Transfers, reset value: 0x0
    uint32_t _RESERVED_742 : 2;
    uint32_t LKEY : 1;  ///< Long key selection, reset value: 0x0
    uint32_t _RESERVED_743 : 1;
    uint32_t ALGO1 : 1;  ///< ALGO, reset value: 0x0
  } CR;

  /** 
  * name: DIN
  * description: data input register
  * address: 0x50060404
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_DIN_t {
    uint32_t DATAIN : 32;  ///< Data input, reset value: 0x0
  } DIN;

  /** 
  * name: STR
  * description: start register
  * address: 0x50060408
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct HASH_STR_t {
    uint32_t NBLW : 5;  ///< Number of valid bits in the last word of the message, reset value: 0x0
    uint32_t _RESERVED_744 : 3;
    uint32_t DCAL : 1;  ///< Digest calculation, reset value: 0x0
  } STR;

  /** 
  * name: HR0
  * description: digest registers
  * address: 0x5006040C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HR0_t {
    uint32_t H0 : 32;  ///< H0, reset value: 0x0
  } HR0;

  /** 
  * name: HR1
  * description: digest registers
  * address: 0x50060410
  * offset: 0x10
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HR1_t {
    uint32_t H1 : 32;  ///< H1, reset value: 0x0
  } HR1;

  /** 
  * name: HR2
  * description: digest registers
  * address: 0x50060414
  * offset: 0x14
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HR2_t {
    uint32_t H2 : 32;  ///< H2, reset value: 0x0
  } HR2;

  /** 
  * name: HR3
  * description: digest registers
  * address: 0x50060418
  * offset: 0x18
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HR3_t {
    uint32_t H3 : 32;  ///< H3, reset value: 0x0
  } HR3;

  /** 
  * name: HR4
  * description: digest registers
  * address: 0x5006041C
  * offset: 0x1C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HR4_t {
    uint32_t H4 : 32;  ///< H4, reset value: 0x0
  } HR4;

  /** 
  * name: IMR
  * description: interrupt enable register
  * address: 0x50060420
  * offset: 0x20
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_IMR_t {
    uint32_t DINIE : 1;  ///< Data input interrupt enable, reset value: 0x0
    uint32_t DCIE : 1;  ///< Digest calculation completion interrupt enable, reset value: 0x0
  } IMR;

  /** 
  * name: SR
  * description: status register
  * address: 0x50060424
  * offset: 0x24
  * reset value: 0x00000001
  * size: 0x20
  * access: 
  */
  struct HASH_SR_t {
    uint32_t DINIS : 1;  ///< Data input interrupt status, reset value: 0x1
    uint32_t DCIS : 1;  ///< Digest calculation completion interrupt status, reset value: 0x0
    uint32_t DMAS : 1;  ///< DMA Status, reset value: 0x0
    uint32_t BUSY : 1;  ///< Busy bit, reset value: 0x0
  } SR;

  const uint8_t _RESERVED_745[180];

  /** 
  * name: CSR0
  * description: context swap registers
  * address: 0x500604F8
  * offset: 0xF8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR0_t {
    uint32_t CSR0 : 32;  ///< CSR0, reset value: 0x0
  } CSR0;

  /** 
  * name: CSR1
  * description: context swap registers
  * address: 0x500604FC
  * offset: 0xFC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR1_t {
    uint32_t CSR1 : 32;  ///< CSR1, reset value: 0x0
  } CSR1;

  /** 
  * name: CSR2
  * description: context swap registers
  * address: 0x50060500
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR2_t {
    uint32_t CSR2 : 32;  ///< CSR2, reset value: 0x0
  } CSR2;

  /** 
  * name: CSR3
  * description: context swap registers
  * address: 0x50060504
  * offset: 0x104
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR3_t {
    uint32_t CSR3 : 32;  ///< CSR3, reset value: 0x0
  } CSR3;

  /** 
  * name: CSR4
  * description: context swap registers
  * address: 0x50060508
  * offset: 0x108
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR4_t {
    uint32_t CSR4 : 32;  ///< CSR4, reset value: 0x0
  } CSR4;

  /** 
  * name: CSR5
  * description: context swap registers
  * address: 0x5006050C
  * offset: 0x10C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR5_t {
    uint32_t CSR5 : 32;  ///< CSR5, reset value: 0x0
  } CSR5;

  /** 
  * name: CSR6
  * description: context swap registers
  * address: 0x50060510
  * offset: 0x110
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR6_t {
    uint32_t CSR6 : 32;  ///< CSR6, reset value: 0x0
  } CSR6;

  /** 
  * name: CSR7
  * description: context swap registers
  * address: 0x50060514
  * offset: 0x114
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR7_t {
    uint32_t CSR7 : 32;  ///< CSR7, reset value: 0x0
  } CSR7;

  /** 
  * name: CSR8
  * description: context swap registers
  * address: 0x50060518
  * offset: 0x118
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR8_t {
    uint32_t CSR8 : 32;  ///< CSR8, reset value: 0x0
  } CSR8;

  /** 
  * name: CSR9
  * description: context swap registers
  * address: 0x5006051C
  * offset: 0x11C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR9_t {
    uint32_t CSR9 : 32;  ///< CSR9, reset value: 0x0
  } CSR9;

  /** 
  * name: CSR10
  * description: context swap registers
  * address: 0x50060520
  * offset: 0x120
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR10_t {
    uint32_t CSR10 : 32;  ///< CSR10, reset value: 0x0
  } CSR10;

  /** 
  * name: CSR11
  * description: context swap registers
  * address: 0x50060524
  * offset: 0x124
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR11_t {
    uint32_t CSR11 : 32;  ///< CSR11, reset value: 0x0
  } CSR11;

  /** 
  * name: CSR12
  * description: context swap registers
  * address: 0x50060528
  * offset: 0x128
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR12_t {
    uint32_t CSR12 : 32;  ///< CSR12, reset value: 0x0
  } CSR12;

  /** 
  * name: CSR13
  * description: context swap registers
  * address: 0x5006052C
  * offset: 0x12C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR13_t {
    uint32_t CSR13 : 32;  ///< CSR13, reset value: 0x0
  } CSR13;

  /** 
  * name: CSR14
  * description: context swap registers
  * address: 0x50060530
  * offset: 0x130
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR14_t {
    uint32_t CSR14 : 32;  ///< CSR14, reset value: 0x0
  } CSR14;

  /** 
  * name: CSR15
  * description: context swap registers
  * address: 0x50060534
  * offset: 0x134
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR15_t {
    uint32_t CSR15 : 32;  ///< CSR15, reset value: 0x0
  } CSR15;

  /** 
  * name: CSR16
  * description: context swap registers
  * address: 0x50060538
  * offset: 0x138
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR16_t {
    uint32_t CSR16 : 32;  ///< CSR16, reset value: 0x0
  } CSR16;

  /** 
  * name: CSR17
  * description: context swap registers
  * address: 0x5006053C
  * offset: 0x13C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR17_t {
    uint32_t CSR17 : 32;  ///< CSR17, reset value: 0x0
  } CSR17;

  /** 
  * name: CSR18
  * description: context swap registers
  * address: 0x50060540
  * offset: 0x140
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR18_t {
    uint32_t CSR18 : 32;  ///< CSR18, reset value: 0x0
  } CSR18;

  /** 
  * name: CSR19
  * description: context swap registers
  * address: 0x50060544
  * offset: 0x144
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR19_t {
    uint32_t CSR19 : 32;  ///< CSR19, reset value: 0x0
  } CSR19;

  /** 
  * name: CSR20
  * description: context swap registers
  * address: 0x50060548
  * offset: 0x148
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR20_t {
    uint32_t CSR20 : 32;  ///< CSR20, reset value: 0x0
  } CSR20;

  /** 
  * name: CSR21
  * description: context swap registers
  * address: 0x5006054C
  * offset: 0x14C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR21_t {
    uint32_t CSR21 : 32;  ///< CSR21, reset value: 0x0
  } CSR21;

  /** 
  * name: CSR22
  * description: context swap registers
  * address: 0x50060550
  * offset: 0x150
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR22_t {
    uint32_t CSR22 : 32;  ///< CSR22, reset value: 0x0
  } CSR22;

  /** 
  * name: CSR23
  * description: context swap registers
  * address: 0x50060554
  * offset: 0x154
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR23_t {
    uint32_t CSR23 : 32;  ///< CSR23, reset value: 0x0
  } CSR23;

  /** 
  * name: CSR24
  * description: context swap registers
  * address: 0x50060558
  * offset: 0x158
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR24_t {
    uint32_t CSR24 : 32;  ///< CSR24, reset value: 0x0
  } CSR24;

  /** 
  * name: CSR25
  * description: context swap registers
  * address: 0x5006055C
  * offset: 0x15C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR25_t {
    uint32_t CSR25 : 32;  ///< CSR25, reset value: 0x0
  } CSR25;

  /** 
  * name: CSR26
  * description: context swap registers
  * address: 0x50060560
  * offset: 0x160
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR26_t {
    uint32_t CSR26 : 32;  ///< CSR26, reset value: 0x0
  } CSR26;

  /** 
  * name: CSR27
  * description: context swap registers
  * address: 0x50060564
  * offset: 0x164
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR27_t {
    uint32_t CSR27 : 32;  ///< CSR27, reset value: 0x0
  } CSR27;

  /** 
  * name: CSR28
  * description: context swap registers
  * address: 0x50060568
  * offset: 0x168
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR28_t {
    uint32_t CSR28 : 32;  ///< CSR28, reset value: 0x0
  } CSR28;

  /** 
  * name: CSR29
  * description: context swap registers
  * address: 0x5006056C
  * offset: 0x16C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR29_t {
    uint32_t CSR29 : 32;  ///< CSR29, reset value: 0x0
  } CSR29;

  /** 
  * name: CSR30
  * description: context swap registers
  * address: 0x50060570
  * offset: 0x170
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR30_t {
    uint32_t CSR30 : 32;  ///< CSR30, reset value: 0x0
  } CSR30;

  /** 
  * name: CSR31
  * description: context swap registers
  * address: 0x50060574
  * offset: 0x174
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR31_t {
    uint32_t CSR31 : 32;  ///< CSR31, reset value: 0x0
  } CSR31;

  /** 
  * name: CSR32
  * description: context swap registers
  * address: 0x50060578
  * offset: 0x178
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR32_t {
    uint32_t CSR32 : 32;  ///< CSR32, reset value: 0x0
  } CSR32;

  /** 
  * name: CSR33
  * description: context swap registers
  * address: 0x5006057C
  * offset: 0x17C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR33_t {
    uint32_t CSR33 : 32;  ///< CSR33, reset value: 0x0
  } CSR33;

  /** 
  * name: CSR34
  * description: context swap registers
  * address: 0x50060580
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR34_t {
    uint32_t CSR34 : 32;  ///< CSR34, reset value: 0x0
  } CSR34;

  /** 
  * name: CSR35
  * description: context swap registers
  * address: 0x50060584
  * offset: 0x184
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR35_t {
    uint32_t CSR35 : 32;  ///< CSR35, reset value: 0x0
  } CSR35;

  /** 
  * name: CSR36
  * description: context swap registers
  * address: 0x50060588
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR36_t {
    uint32_t CSR36 : 32;  ///< CSR36, reset value: 0x0
  } CSR36;

  /** 
  * name: CSR37
  * description: context swap registers
  * address: 0x5006058C
  * offset: 0x18C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR37_t {
    uint32_t CSR37 : 32;  ///< CSR37, reset value: 0x0
  } CSR37;

  /** 
  * name: CSR38
  * description: context swap registers
  * address: 0x50060590
  * offset: 0x190
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR38_t {
    uint32_t CSR38 : 32;  ///< CSR38, reset value: 0x0
  } CSR38;

  /** 
  * name: CSR39
  * description: context swap registers
  * address: 0x50060594
  * offset: 0x194
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR39_t {
    uint32_t CSR39 : 32;  ///< CSR39, reset value: 0x0
  } CSR39;

  /** 
  * name: CSR40
  * description: context swap registers
  * address: 0x50060598
  * offset: 0x198
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR40_t {
    uint32_t CSR40 : 32;  ///< CSR40, reset value: 0x0
  } CSR40;

  /** 
  * name: CSR41
  * description: context swap registers
  * address: 0x5006059C
  * offset: 0x19C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR41_t {
    uint32_t CSR41 : 32;  ///< CSR41, reset value: 0x0
  } CSR41;

  /** 
  * name: CSR42
  * description: context swap registers
  * address: 0x500605A0
  * offset: 0x1A0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR42_t {
    uint32_t CSR42 : 32;  ///< CSR42, reset value: 0x0
  } CSR42;

  /** 
  * name: CSR43
  * description: context swap registers
  * address: 0x500605A4
  * offset: 0x1A4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR43_t {
    uint32_t CSR43 : 32;  ///< CSR43, reset value: 0x0
  } CSR43;

  /** 
  * name: CSR44
  * description: context swap registers
  * address: 0x500605A8
  * offset: 0x1A8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR44_t {
    uint32_t CSR44 : 32;  ///< CSR44, reset value: 0x0
  } CSR44;

  /** 
  * name: CSR45
  * description: context swap registers
  * address: 0x500605AC
  * offset: 0x1AC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR45_t {
    uint32_t CSR45 : 32;  ///< CSR45, reset value: 0x0
  } CSR45;

  /** 
  * name: CSR46
  * description: context swap registers
  * address: 0x500605B0
  * offset: 0x1B0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR46_t {
    uint32_t CSR46 : 32;  ///< CSR46, reset value: 0x0
  } CSR46;

  /** 
  * name: CSR47
  * description: context swap registers
  * address: 0x500605B4
  * offset: 0x1B4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR47_t {
    uint32_t CSR47 : 32;  ///< CSR47, reset value: 0x0
  } CSR47;

  /** 
  * name: CSR48
  * description: context swap registers
  * address: 0x500605B8
  * offset: 0x1B8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR48_t {
    uint32_t CSR48 : 32;  ///< CSR48, reset value: 0x0
  } CSR48;

  /** 
  * name: CSR49
  * description: context swap registers
  * address: 0x500605BC
  * offset: 0x1BC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR49_t {
    uint32_t CSR49 : 32;  ///< CSR49, reset value: 0x0
  } CSR49;

  /** 
  * name: CSR50
  * description: context swap registers
  * address: 0x500605C0
  * offset: 0x1C0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR50_t {
    uint32_t CSR50 : 32;  ///< CSR50, reset value: 0x0
  } CSR50;

  /** 
  * name: CSR51
  * description: context swap registers
  * address: 0x500605C4
  * offset: 0x1C4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR51_t {
    uint32_t CSR51 : 32;  ///< CSR51, reset value: 0x0
  } CSR51;

  /** 
  * name: CSR52
  * description: context swap registers
  * address: 0x500605C8
  * offset: 0x1C8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR52_t {
    uint32_t CSR52 : 32;  ///< CSR52, reset value: 0x0
  } CSR52;

  /** 
  * name: CSR53
  * description: context swap registers
  * address: 0x500605CC
  * offset: 0x1CC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct HASH_CSR53_t {
    uint32_t CSR53 : 32;  ///< CSR53, reset value: 0x0
  } CSR53;

  const uint8_t _RESERVED_746[292];

  /** 
  * name: HASH_HR0
  * description: HASH digest register
  * address: 0x50060710
  * offset: 0x310
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR0_t {
    uint32_t H0 : 32;  ///< H0, reset value: 0x0
  } HASH_HR0;

  /** 
  * name: HASH_HR1
  * description: read-only
  * address: 0x50060714
  * offset: 0x314
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR1_t {
    uint32_t H1 : 32;  ///< H1, reset value: 0x0
  } HASH_HR1;

  /** 
  * name: HASH_HR2
  * description: read-only
  * address: 0x50060718
  * offset: 0x318
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR2_t {
    uint32_t H2 : 32;  ///< H2, reset value: 0x0
  } HASH_HR2;

  /** 
  * name: HASH_HR3
  * description: read-only
  * address: 0x5006071C
  * offset: 0x31C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR3_t {
    uint32_t H3 : 32;  ///< H3, reset value: 0x0
  } HASH_HR3;

  /** 
  * name: HASH_HR4
  * description: read-only
  * address: 0x50060720
  * offset: 0x320
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR4_t {
    uint32_t H4 : 32;  ///< H4, reset value: 0x0
  } HASH_HR4;

  /** 
  * name: HASH_HR5
  * description: read-only
  * address: 0x50060724
  * offset: 0x324
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR5_t {
    uint32_t H5 : 32;  ///< H5, reset value: 0x0
  } HASH_HR5;

  /** 
  * name: HASH_HR6
  * description: read-only
  * address: 0x50060728
  * offset: 0x328
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR6_t {
    uint32_t H6 : 32;  ///< H6, reset value: 0x0
  } HASH_HR6;

  /** 
  * name: HASH_HR7
  * description: read-only
  * address: 0x5006072C
  * offset: 0x32C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct HASH_HASH_HR7_t {
    uint32_t H7 : 32;  ///< H7, reset value: 0x0
  } HASH_HR7;

} HASH_t;


/** 
*  name: RNG
*  description: Random number generator
*  group: RNG
*  address: 0x50060800
*/
typedef struct{
  /** 
  * name: CR
  * description: control register
  * address: 0x50060800
  * offset: 0x0
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct RNG_CR_t {
    uint32_t _RESERVED_747 : 2;
    uint32_t RNGEN : 1;  ///< Random number generator enable, reset value: 0x0
    uint32_t IE : 1;  ///< Interrupt enable, reset value: 0x0
  } CR;

  /** 
  * name: SR
  * description: status register
  * address: 0x50060804
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: 
  */
  struct RNG_SR_t {
    uint32_t DRDY : 1;  ///< Data ready, reset value: 0x0
    uint32_t CECS : 1;  ///< Clock error current status, reset value: 0x0
    uint32_t SECS : 1;  ///< Seed error current status, reset value: 0x0
    uint32_t _RESERVED_748 : 2;
    uint32_t CEIS : 1;  ///< Clock error interrupt status, reset value: 0x0
    uint32_t SEIS : 1;  ///< Seed error interrupt status, reset value: 0x0
  } SR;

  /** 
  * name: DR
  * description: data register
  * address: 0x50060808
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct RNG_DR_t {
    uint32_t RNDATA : 32;  ///< Random data, reset value: 0x0
  } DR;

} RNG_t;


/** 
*  name: FSMC
*  description: Flexible static memory controller
*  group: FSMC
*  address: 0xA0000000
*/
typedef struct{
  /** 
  * name: BCR1
  * description: SRAM/NOR-Flash chip-select control register 1
  * address: 0xA0000000
  * offset: 0x0
  * reset value: 0x000030D0
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BCR1_t {
    uint32_t MBKEN : 1;  ///< MBKEN, reset value: 0x0
    uint32_t MUXEN : 1;  ///< MUXEN, reset value: 0x0
    uint32_t MTYP : 2;  ///< MTYP, reset value: 0x0
    uint32_t MWID : 2;  ///< MWID, reset value: 0x1
    uint32_t FACCEN : 1;  ///< FACCEN, reset value: 0x1
    uint32_t _RESERVED_749 : 1;
    uint32_t BURSTEN : 1;  ///< BURSTEN, reset value: 0x0
    uint32_t WAITPOL : 1;  ///< WAITPOL, reset value: 0x0
    uint32_t _RESERVED_750 : 1;
    uint32_t WAITCFG : 1;  ///< WAITCFG, reset value: 0x0
    uint32_t WREN : 1;  ///< WREN, reset value: 0x1
    uint32_t WAITEN : 1;  ///< WAITEN, reset value: 0x1
    uint32_t EXTMOD : 1;  ///< EXTMOD, reset value: 0x0
    uint32_t ASYNCWAIT : 1;  ///< ASYNCWAIT, reset value: 0x0
    uint32_t _RESERVED_751 : 3;
    uint32_t CBURSTRW : 1;  ///< CBURSTRW, reset value: 0x0
  } BCR1;

  /** 
  * name: BTR1
  * description: SRAM/NOR-Flash chip-select timing register 1
  * address: 0xA0000004
  * offset: 0x4
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BTR1_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t BUSTURN : 4;  ///< BUSTURN, reset value: 0xF
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x3
  } BTR1;

  /** 
  * name: BCR2
  * description: SRAM/NOR-Flash chip-select control register 2
  * address: 0xA0000008
  * offset: 0x8
  * reset value: 0x000030D0
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BCR2_t {
    uint32_t MBKEN : 1;  ///< MBKEN, reset value: 0x0
    uint32_t MUXEN : 1;  ///< MUXEN, reset value: 0x0
    uint32_t MTYP : 2;  ///< MTYP, reset value: 0x0
    uint32_t MWID : 2;  ///< MWID, reset value: 0x1
    uint32_t FACCEN : 1;  ///< FACCEN, reset value: 0x1
    uint32_t _RESERVED_752 : 1;
    uint32_t BURSTEN : 1;  ///< BURSTEN, reset value: 0x0
    uint32_t WAITPOL : 1;  ///< WAITPOL, reset value: 0x0
    uint32_t WRAPMOD : 1;  ///< WRAPMOD, reset value: 0x0
    uint32_t WAITCFG : 1;  ///< WAITCFG, reset value: 0x0
    uint32_t WREN : 1;  ///< WREN, reset value: 0x1
    uint32_t WAITEN : 1;  ///< WAITEN, reset value: 0x1
    uint32_t EXTMOD : 1;  ///< EXTMOD, reset value: 0x0
    uint32_t ASYNCWAIT : 1;  ///< ASYNCWAIT, reset value: 0x0
    uint32_t _RESERVED_753 : 3;
    uint32_t CBURSTRW : 1;  ///< CBURSTRW, reset value: 0x0
  } BCR2;

  /** 
  * name: BTR2
  * description: SRAM/NOR-Flash chip-select timing register 2
  * address: 0xA000000C
  * offset: 0xC
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BTR2_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t BUSTURN : 4;  ///< BUSTURN, reset value: 0xF
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x3
  } BTR2;

  /** 
  * name: BCR3
  * description: SRAM/NOR-Flash chip-select control register 3
  * address: 0xA0000010
  * offset: 0x10
  * reset value: 0x000030D0
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BCR3_t {
    uint32_t MBKEN : 1;  ///< MBKEN, reset value: 0x0
    uint32_t MUXEN : 1;  ///< MUXEN, reset value: 0x0
    uint32_t MTYP : 2;  ///< MTYP, reset value: 0x0
    uint32_t MWID : 2;  ///< MWID, reset value: 0x1
    uint32_t FACCEN : 1;  ///< FACCEN, reset value: 0x1
    uint32_t _RESERVED_754 : 1;
    uint32_t BURSTEN : 1;  ///< BURSTEN, reset value: 0x0
    uint32_t WAITPOL : 1;  ///< WAITPOL, reset value: 0x0
    uint32_t WRAPMOD : 1;  ///< WRAPMOD, reset value: 0x0
    uint32_t WAITCFG : 1;  ///< WAITCFG, reset value: 0x0
    uint32_t WREN : 1;  ///< WREN, reset value: 0x1
    uint32_t WAITEN : 1;  ///< WAITEN, reset value: 0x1
    uint32_t EXTMOD : 1;  ///< EXTMOD, reset value: 0x0
    uint32_t ASYNCWAIT : 1;  ///< ASYNCWAIT, reset value: 0x0
    uint32_t _RESERVED_755 : 3;
    uint32_t CBURSTRW : 1;  ///< CBURSTRW, reset value: 0x0
  } BCR3;

  /** 
  * name: BTR3
  * description: SRAM/NOR-Flash chip-select timing register 3
  * address: 0xA0000014
  * offset: 0x14
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BTR3_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t BUSTURN : 4;  ///< BUSTURN, reset value: 0xF
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x3
  } BTR3;

  /** 
  * name: BCR4
  * description: SRAM/NOR-Flash chip-select control register 4
  * address: 0xA0000018
  * offset: 0x18
  * reset value: 0x000030D0
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BCR4_t {
    uint32_t MBKEN : 1;  ///< MBKEN, reset value: 0x0
    uint32_t MUXEN : 1;  ///< MUXEN, reset value: 0x0
    uint32_t MTYP : 2;  ///< MTYP, reset value: 0x0
    uint32_t MWID : 2;  ///< MWID, reset value: 0x1
    uint32_t FACCEN : 1;  ///< FACCEN, reset value: 0x1
    uint32_t _RESERVED_756 : 1;
    uint32_t BURSTEN : 1;  ///< BURSTEN, reset value: 0x0
    uint32_t WAITPOL : 1;  ///< WAITPOL, reset value: 0x0
    uint32_t WRAPMOD : 1;  ///< WRAPMOD, reset value: 0x0
    uint32_t WAITCFG : 1;  ///< WAITCFG, reset value: 0x0
    uint32_t WREN : 1;  ///< WREN, reset value: 0x1
    uint32_t WAITEN : 1;  ///< WAITEN, reset value: 0x1
    uint32_t EXTMOD : 1;  ///< EXTMOD, reset value: 0x0
    uint32_t ASYNCWAIT : 1;  ///< ASYNCWAIT, reset value: 0x0
    uint32_t _RESERVED_757 : 3;
    uint32_t CBURSTRW : 1;  ///< CBURSTRW, reset value: 0x0
  } BCR4;

  /** 
  * name: BTR4
  * description: SRAM/NOR-Flash chip-select timing register 4
  * address: 0xA000001C
  * offset: 0x1C
  * reset value: 0xFFFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BTR4_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t BUSTURN : 4;  ///< BUSTURN, reset value: 0xF
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x3
  } BTR4;

  const uint8_t _RESERVED_758[36];

  /** 
  * name: PCR2
  * description: PC Card/NAND Flash control register 2
  * address: 0xA0000060
  * offset: 0x60
  * reset value: 0x00000018
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PCR2_t {
    uint32_t _RESERVED_759 : 1;
    uint32_t PWAITEN : 1;  ///< PWAITEN, reset value: 0x0
    uint32_t PBKEN : 1;  ///< PBKEN, reset value: 0x0
    uint32_t PTYP : 1;  ///< PTYP, reset value: 0x1
    uint32_t PWID : 2;  ///< PWID, reset value: 0x1
    uint32_t ECCEN : 1;  ///< ECCEN, reset value: 0x0
    uint32_t _RESERVED_760 : 2;
    uint32_t TCLR : 4;  ///< TCLR, reset value: 0x0
    uint32_t TAR : 4;  ///< TAR, reset value: 0x0
    uint32_t ECCPS : 3;  ///< ECCPS, reset value: 0x0
  } PCR2;

  /** 
  * name: SR2
  * description: FIFO status and interrupt register 2
  * address: 0xA0000064
  * offset: 0x64
  * reset value: 0x00000040
  * size: 0x20
  * access: 
  */
  struct FSMC_SR2_t {
    uint32_t IRS : 1;  ///< IRS, reset value: 0x0
    uint32_t ILS : 1;  ///< ILS, reset value: 0x0
    uint32_t IFS : 1;  ///< IFS, reset value: 0x0
    uint32_t IREN : 1;  ///< IREN, reset value: 0x0
    uint32_t ILEN : 1;  ///< ILEN, reset value: 0x0
    uint32_t IFEN : 1;  ///< IFEN, reset value: 0x0
    uint32_t FEMPT : 1;  ///< FEMPT, reset value: 0x1
  } SR2;

  /** 
  * name: PMEM2
  * description: Common memory space timing register 2
  * address: 0xA0000068
  * offset: 0x68
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PMEM2_t {
    uint32_t MEMSETx : 8;  ///< MEMSETx, reset value: 0xFC
    uint32_t MEMWAITx : 8;  ///< MEMWAITx, reset value: 0xFC
    uint32_t MEMHOLDx : 8;  ///< MEMHOLDx, reset value: 0xFC
    uint32_t MEMHIZx : 8;  ///< MEMHIZx, reset value: 0xFC
  } PMEM2;

  /** 
  * name: PATT2
  * description: Attribute memory space timing register 2
  * address: 0xA000006C
  * offset: 0x6C
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PATT2_t {
    uint32_t ATTSETx : 8;  ///< ATTSETx, reset value: 0xFC
    uint32_t ATTWAITx : 8;  ///< ATTWAITx, reset value: 0xFC
    uint32_t ATTHOLDx : 8;  ///< ATTHOLDx, reset value: 0xFC
    uint32_t ATTHIZx : 8;  ///< ATTHIZx, reset value: 0xFC
  } PATT2;

  /** 
  * name: ECCR2
  * description: ECC result register 2
  * address: 0xA0000074
  * offset: 0x74
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct FSMC_ECCR2_t {
    uint32_t ECCx : 32;  ///< ECCx, reset value: 0x0
  } ECCR2;

  /** 
  * name: PCR3
  * description: PC Card/NAND Flash control register 3
  * address: 0xA0000080
  * offset: 0x80
  * reset value: 0x00000018
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PCR3_t {
    uint32_t _RESERVED_761 : 1;
    uint32_t PWAITEN : 1;  ///< PWAITEN, reset value: 0x0
    uint32_t PBKEN : 1;  ///< PBKEN, reset value: 0x0
    uint32_t PTYP : 1;  ///< PTYP, reset value: 0x1
    uint32_t PWID : 2;  ///< PWID, reset value: 0x1
    uint32_t ECCEN : 1;  ///< ECCEN, reset value: 0x0
    uint32_t _RESERVED_762 : 2;
    uint32_t TCLR : 4;  ///< TCLR, reset value: 0x0
    uint32_t TAR : 4;  ///< TAR, reset value: 0x0
    uint32_t ECCPS : 3;  ///< ECCPS, reset value: 0x0
  } PCR3;

  /** 
  * name: SR3
  * description: FIFO status and interrupt register 3
  * address: 0xA0000084
  * offset: 0x84
  * reset value: 0x00000040
  * size: 0x20
  * access: 
  */
  struct FSMC_SR3_t {
    uint32_t IRS : 1;  ///< IRS, reset value: 0x0
    uint32_t ILS : 1;  ///< ILS, reset value: 0x0
    uint32_t IFS : 1;  ///< IFS, reset value: 0x0
    uint32_t IREN : 1;  ///< IREN, reset value: 0x0
    uint32_t ILEN : 1;  ///< ILEN, reset value: 0x0
    uint32_t IFEN : 1;  ///< IFEN, reset value: 0x0
    uint32_t FEMPT : 1;  ///< FEMPT, reset value: 0x1
  } SR3;

  /** 
  * name: PMEM3
  * description: Common memory space timing register 3
  * address: 0xA0000088
  * offset: 0x88
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PMEM3_t {
    uint32_t MEMSETx : 8;  ///< MEMSETx, reset value: 0xFC
    uint32_t MEMWAITx : 8;  ///< MEMWAITx, reset value: 0xFC
    uint32_t MEMHOLDx : 8;  ///< MEMHOLDx, reset value: 0xFC
    uint32_t MEMHIZx : 8;  ///< MEMHIZx, reset value: 0xFC
  } PMEM3;

  /** 
  * name: PATT3
  * description: Attribute memory space timing register 3
  * address: 0xA000008C
  * offset: 0x8C
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PATT3_t {
    uint32_t ATTSETx : 8;  ///< ATTSETx, reset value: 0xFC
    uint32_t ATTWAITx : 8;  ///< ATTWAITx, reset value: 0xFC
    uint32_t ATTHOLDx : 8;  ///< ATTHOLDx, reset value: 0xFC
    uint32_t ATTHIZx : 8;  ///< ATTHIZx, reset value: 0xFC
  } PATT3;

  /** 
  * name: ECCR3
  * description: ECC result register 3
  * address: 0xA0000094
  * offset: 0x94
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct FSMC_ECCR3_t {
    uint32_t ECCx : 32;  ///< ECCx, reset value: 0x0
  } ECCR3;

  /** 
  * name: PCR4
  * description: PC Card/NAND Flash control register 4
  * address: 0xA00000A0
  * offset: 0xA0
  * reset value: 0x00000018
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PCR4_t {
    uint32_t _RESERVED_763 : 1;
    uint32_t PWAITEN : 1;  ///< PWAITEN, reset value: 0x0
    uint32_t PBKEN : 1;  ///< PBKEN, reset value: 0x0
    uint32_t PTYP : 1;  ///< PTYP, reset value: 0x1
    uint32_t PWID : 2;  ///< PWID, reset value: 0x1
    uint32_t ECCEN : 1;  ///< ECCEN, reset value: 0x0
    uint32_t _RESERVED_764 : 2;
    uint32_t TCLR : 4;  ///< TCLR, reset value: 0x0
    uint32_t TAR : 4;  ///< TAR, reset value: 0x0
    uint32_t ECCPS : 3;  ///< ECCPS, reset value: 0x0
  } PCR4;

  /** 
  * name: SR4
  * description: FIFO status and interrupt register 4
  * address: 0xA00000A4
  * offset: 0xA4
  * reset value: 0x00000040
  * size: 0x20
  * access: 
  */
  struct FSMC_SR4_t {
    uint32_t IRS : 1;  ///< IRS, reset value: 0x0
    uint32_t ILS : 1;  ///< ILS, reset value: 0x0
    uint32_t IFS : 1;  ///< IFS, reset value: 0x0
    uint32_t IREN : 1;  ///< IREN, reset value: 0x0
    uint32_t ILEN : 1;  ///< ILEN, reset value: 0x0
    uint32_t IFEN : 1;  ///< IFEN, reset value: 0x0
    uint32_t FEMPT : 1;  ///< FEMPT, reset value: 0x1
  } SR4;

  /** 
  * name: PMEM4
  * description: Common memory space timing register 4
  * address: 0xA00000A8
  * offset: 0xA8
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PMEM4_t {
    uint32_t MEMSETx : 8;  ///< MEMSETx, reset value: 0xFC
    uint32_t MEMWAITx : 8;  ///< MEMWAITx, reset value: 0xFC
    uint32_t MEMHOLDx : 8;  ///< MEMHOLDx, reset value: 0xFC
    uint32_t MEMHIZx : 8;  ///< MEMHIZx, reset value: 0xFC
  } PMEM4;

  /** 
  * name: PATT4
  * description: Attribute memory space timing register 4
  * address: 0xA00000AC
  * offset: 0xAC
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PATT4_t {
    uint32_t ATTSETx : 8;  ///< ATTSETx, reset value: 0xFC
    uint32_t ATTWAITx : 8;  ///< ATTWAITx, reset value: 0xFC
    uint32_t ATTHOLDx : 8;  ///< ATTHOLDx, reset value: 0xFC
    uint32_t ATTHIZx : 8;  ///< ATTHIZx, reset value: 0xFC
  } PATT4;

  /** 
  * name: PIO4
  * description: I/O space timing register 4
  * address: 0xA00000B0
  * offset: 0xB0
  * reset value: 0xFCFCFCFC
  * size: 0x20
  * access: read-write
  */
  struct FSMC_PIO4_t {
    uint32_t IOSETx : 8;  ///< IOSETx, reset value: 0xFC
    uint32_t IOWAITx : 8;  ///< IOWAITx, reset value: 0xFC
    uint32_t IOHOLDx : 8;  ///< IOHOLDx, reset value: 0xFC
    uint32_t IOHIZx : 8;  ///< IOHIZx, reset value: 0xFC
  } PIO4;

  const uint8_t _RESERVED_765[52];

  /** 
  * name: BWTR1
  * description: SRAM/NOR-Flash write timing registers 1
  * address: 0xA0000104
  * offset: 0x104
  * reset value: 0x0FFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BWTR1_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t _RESERVED_766 : 4;
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x0
  } BWTR1;

  /** 
  * name: BWTR2
  * description: SRAM/NOR-Flash write timing registers 2
  * address: 0xA000010C
  * offset: 0x10C
  * reset value: 0x0FFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BWTR2_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t _RESERVED_767 : 4;
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x0
  } BWTR2;

  /** 
  * name: BWTR3
  * description: SRAM/NOR-Flash write timing registers 3
  * address: 0xA0000114
  * offset: 0x114
  * reset value: 0x0FFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BWTR3_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t _RESERVED_768 : 4;
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x0
  } BWTR3;

  /** 
  * name: BWTR4
  * description: SRAM/NOR-Flash write timing registers 4
  * address: 0xA000011C
  * offset: 0x11C
  * reset value: 0x0FFFFFFF
  * size: 0x20
  * access: read-write
  */
  struct FSMC_BWTR4_t {
    uint32_t ADDSET : 4;  ///< ADDSET, reset value: 0xF
    uint32_t ADDHLD : 4;  ///< ADDHLD, reset value: 0xF
    uint32_t DATAST : 8;  ///< DATAST, reset value: 0xFF
    uint32_t _RESERVED_769 : 4;
    uint32_t CLKDIV : 4;  ///< CLKDIV, reset value: 0xF
    uint32_t DATLAT : 4;  ///< DATLAT, reset value: 0xF
    uint32_t ACCMOD : 2;  ///< ACCMOD, reset value: 0x0
  } BWTR4;

} FSMC_t;


/** 
*  name: NVIC
*  description: Nested Vectored Interrupt Controller
*  group: NVIC
*  address: 0xE000E000
*/
typedef struct{
  const uint8_t _RESERVED_770[4];

  /** 
  * name: ICTR
  * description: Interrupt Controller Type Register
  * address: 0xE000E004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct NVIC_ICTR_t {
    uint32_t INTLINESNUM : 4;  ///< Total number of interrupt lines in groups, reset value: 0x0
  } ICTR;

  const uint8_t _RESERVED_771[220];

  /** 
  * name: ISER0
  * description: Interrupt Set-Enable Register
  * address: 0xE000E100
  * offset: 0x100
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISER0_t {
    uint32_t SETENA : 32;  ///< SETENA, reset value: 0x0
  } ISER0;

  /** 
  * name: ISER1
  * description: Interrupt Set-Enable Register
  * address: 0xE000E104
  * offset: 0x104
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISER1_t {
    uint32_t SETENA : 32;  ///< SETENA, reset value: 0x0
  } ISER1;

  /** 
  * name: ISER2
  * description: Interrupt Set-Enable Register
  * address: 0xE000E108
  * offset: 0x108
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISER2_t {
    uint32_t SETENA : 32;  ///< SETENA, reset value: 0x0
  } ISER2;

  const uint8_t _RESERVED_772[88];

  /** 
  * name: ICER0
  * description: Interrupt Clear-Enable Register
  * address: 0xE000E180
  * offset: 0x180
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICER0_t {
    uint32_t CLRENA : 32;  ///< CLRENA, reset value: 0x0
  } ICER0;

  /** 
  * name: ICER1
  * description: Interrupt Clear-Enable Register
  * address: 0xE000E184
  * offset: 0x184
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICER1_t {
    uint32_t CLRENA : 32;  ///< CLRENA, reset value: 0x0
  } ICER1;

  /** 
  * name: ICER2
  * description: Interrupt Clear-Enable Register
  * address: 0xE000E188
  * offset: 0x188
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICER2_t {
    uint32_t CLRENA : 32;  ///< CLRENA, reset value: 0x0
  } ICER2;

  const uint8_t _RESERVED_773[88];

  /** 
  * name: ISPR0
  * description: Interrupt Set-Pending Register
  * address: 0xE000E200
  * offset: 0x200
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISPR0_t {
    uint32_t SETPEND : 32;  ///< SETPEND, reset value: 0x0
  } ISPR0;

  /** 
  * name: ISPR1
  * description: Interrupt Set-Pending Register
  * address: 0xE000E204
  * offset: 0x204
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISPR1_t {
    uint32_t SETPEND : 32;  ///< SETPEND, reset value: 0x0
  } ISPR1;

  /** 
  * name: ISPR2
  * description: Interrupt Set-Pending Register
  * address: 0xE000E208
  * offset: 0x208
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ISPR2_t {
    uint32_t SETPEND : 32;  ///< SETPEND, reset value: 0x0
  } ISPR2;

  const uint8_t _RESERVED_774[88];

  /** 
  * name: ICPR0
  * description: Interrupt Clear-Pending Register
  * address: 0xE000E280
  * offset: 0x280
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICPR0_t {
    uint32_t CLRPEND : 32;  ///< CLRPEND, reset value: 0x0
  } ICPR0;

  /** 
  * name: ICPR1
  * description: Interrupt Clear-Pending Register
  * address: 0xE000E284
  * offset: 0x284
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICPR1_t {
    uint32_t CLRPEND : 32;  ///< CLRPEND, reset value: 0x0
  } ICPR1;

  /** 
  * name: ICPR2
  * description: Interrupt Clear-Pending Register
  * address: 0xE000E288
  * offset: 0x288
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_ICPR2_t {
    uint32_t CLRPEND : 32;  ///< CLRPEND, reset value: 0x0
  } ICPR2;

  const uint8_t _RESERVED_775[88];

  /** 
  * name: IABR0
  * description: Interrupt Active Bit Register
  * address: 0xE000E300
  * offset: 0x300
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct NVIC_IABR0_t {
    uint32_t ACTIVE : 32;  ///< ACTIVE, reset value: 0x0
  } IABR0;

  /** 
  * name: IABR1
  * description: Interrupt Active Bit Register
  * address: 0xE000E304
  * offset: 0x304
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct NVIC_IABR1_t {
    uint32_t ACTIVE : 32;  ///< ACTIVE, reset value: 0x0
  } IABR1;

  /** 
  * name: IABR2
  * description: Interrupt Active Bit Register
  * address: 0xE000E308
  * offset: 0x308
  * reset value: 0x00000000
  * size: 0x20
  * access: read-only
  */
  const struct NVIC_IABR2_t {
    uint32_t ACTIVE : 32;  ///< ACTIVE, reset value: 0x0
  } IABR2;

  const uint8_t _RESERVED_776[216];

  /** 
  * name: IPR0
  * description: Interrupt Priority Register
  * address: 0xE000E400
  * offset: 0x400
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR0_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR0;

  /** 
  * name: IPR1
  * description: Interrupt Priority Register
  * address: 0xE000E404
  * offset: 0x404
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR1_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR1;

  /** 
  * name: IPR2
  * description: Interrupt Priority Register
  * address: 0xE000E408
  * offset: 0x408
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR2_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR2;

  /** 
  * name: IPR3
  * description: Interrupt Priority Register
  * address: 0xE000E40C
  * offset: 0x40C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR3_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR3;

  /** 
  * name: IPR4
  * description: Interrupt Priority Register
  * address: 0xE000E410
  * offset: 0x410
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR4_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR4;

  /** 
  * name: IPR5
  * description: Interrupt Priority Register
  * address: 0xE000E414
  * offset: 0x414
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR5_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR5;

  /** 
  * name: IPR6
  * description: Interrupt Priority Register
  * address: 0xE000E418
  * offset: 0x418
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR6_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR6;

  /** 
  * name: IPR7
  * description: Interrupt Priority Register
  * address: 0xE000E41C
  * offset: 0x41C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR7_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR7;

  /** 
  * name: IPR8
  * description: Interrupt Priority Register
  * address: 0xE000E420
  * offset: 0x420
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR8_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR8;

  /** 
  * name: IPR9
  * description: Interrupt Priority Register
  * address: 0xE000E424
  * offset: 0x424
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR9_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR9;

  /** 
  * name: IPR10
  * description: Interrupt Priority Register
  * address: 0xE000E428
  * offset: 0x428
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR10_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR10;

  /** 
  * name: IPR11
  * description: Interrupt Priority Register
  * address: 0xE000E42C
  * offset: 0x42C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR11_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR11;

  /** 
  * name: IPR12
  * description: Interrupt Priority Register
  * address: 0xE000E430
  * offset: 0x430
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR12_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR12;

  /** 
  * name: IPR13
  * description: Interrupt Priority Register
  * address: 0xE000E434
  * offset: 0x434
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR13_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR13;

  /** 
  * name: IPR14
  * description: Interrupt Priority Register
  * address: 0xE000E438
  * offset: 0x438
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR14_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR14;

  /** 
  * name: IPR15
  * description: Interrupt Priority Register
  * address: 0xE000E43C
  * offset: 0x43C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR15_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR15;

  /** 
  * name: IPR16
  * description: Interrupt Priority Register
  * address: 0xE000E440
  * offset: 0x440
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR16_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR16;

  /** 
  * name: IPR17
  * description: Interrupt Priority Register
  * address: 0xE000E444
  * offset: 0x444
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR17_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR17;

  /** 
  * name: IPR18
  * description: Interrupt Priority Register
  * address: 0xE000E448
  * offset: 0x448
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR18_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR18;

  /** 
  * name: IPR19
  * description: Interrupt Priority Register
  * address: 0xE000E44C
  * offset: 0x44C
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct NVIC_IPR19_t {
    uint32_t IPR_N0 : 8;  ///< IPR_N0, reset value: 0x0
    uint32_t IPR_N1 : 8;  ///< IPR_N1, reset value: 0x0
    uint32_t IPR_N2 : 8;  ///< IPR_N2, reset value: 0x0
    uint32_t IPR_N3 : 8;  ///< IPR_N3, reset value: 0x0
  } IPR19;

  const uint8_t _RESERVED_777[2708];

  /** 
  * name: STIR
  * description: Software Triggered Interrupt Register
  * address: 0xE000EF00
  * offset: 0xF00
  * reset value: 0x00000000
  * size: 0x20
  * access: write-only
  */
  struct NVIC_STIR_t {
    uint32_t INTID : 9;  ///< interrupt to be triggered, reset value: 0x0
  } STIR;

} NVIC_t;


/** 
*  name: DBG
*  description: Debug support
*  group: DBG
*  address: 0xE0042000
*/
typedef struct{
  /** 
  * name: DBGMCU_IDCODE
  * description: IDCODE
  * address: 0xE0042000
  * offset: 0x0
  * reset value: 0x10006411
  * size: 0x20
  * access: read-only
  */
  const struct DBG_DBGMCU_IDCODE_t {
    uint32_t DEV_ID : 12;  ///< DEV_ID, reset value: 0x411
    uint32_t _RESERVED_778 : 4;
    uint32_t REV_ID : 16;  ///< REV_ID, reset value: 0x1000
  } DBGMCU_IDCODE;

  /** 
  * name: DBGMCU_CR
  * description: Control Register
  * address: 0xE0042004
  * offset: 0x4
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DBG_DBGMCU_CR_t {
    uint32_t DBG_SLEEP : 1;  ///< DBG_SLEEP, reset value: 0x0
    uint32_t DBG_STOP : 1;  ///< DBG_STOP, reset value: 0x0
    uint32_t DBG_STANDBY : 1;  ///< DBG_STANDBY, reset value: 0x0
    uint32_t _RESERVED_779 : 2;
    uint32_t TRACE_IOEN : 1;  ///< TRACE_IOEN, reset value: 0x0
    uint32_t TRACE_MODE : 2;  ///< TRACE_MODE, reset value: 0x0
    uint32_t _RESERVED_780 : 8;
    uint32_t DBG_I2C2_SMBUS_TIMEOUT : 1;  ///< DBG_I2C2_SMBUS_TIMEOUT, reset value: 0x0
    uint32_t DBG_TIM8_STOP : 1;  ///< DBG_TIM8_STOP, reset value: 0x0
    uint32_t DBG_TIM5_STOP : 1;  ///< DBG_TIM5_STOP, reset value: 0x0
    uint32_t DBG_TIM6_STOP : 1;  ///< DBG_TIM6_STOP, reset value: 0x0
    uint32_t DBG_TIM7_STOP : 1;  ///< DBG_TIM7_STOP, reset value: 0x0
  } DBGMCU_CR;

  /** 
  * name: DBGMCU_APB1_FZ
  * description: Debug MCU APB1 Freeze registe
  * address: 0xE0042008
  * offset: 0x8
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DBG_DBGMCU_APB1_FZ_t {
    uint32_t DBG_TIM2_STOP : 1;  ///< DBG_TIM2_STOP, reset value: 0x0
    uint32_t DBG_TIM3_STOP : 1;  ///< DBG_TIM3 _STOP, reset value: 0x0
    uint32_t DBG_TIM4_STOP : 1;  ///< DBG_TIM4_STOP, reset value: 0x0
    uint32_t DBG_TIM5_STOP : 1;  ///< DBG_TIM5_STOP, reset value: 0x0
    uint32_t DBG_TIM6_STOP : 1;  ///< DBG_TIM6_STOP, reset value: 0x0
    uint32_t DBG_TIM7_STOP : 1;  ///< DBG_TIM7_STOP, reset value: 0x0
    uint32_t DBG_TIM12_STOP : 1;  ///< DBG_TIM12_STOP, reset value: 0x0
    uint32_t DBG_TIM13_STOP : 1;  ///< DBG_TIM13_STOP, reset value: 0x0
    uint32_t DBG_TIM14_STOP : 1;  ///< DBG_TIM14_STOP, reset value: 0x0
    uint32_t _RESERVED_781 : 2;
    uint32_t DBG_WWDG_STOP : 1;  ///< DBG_WWDG_STOP, reset value: 0x0
    uint32_t DBG_IWDEG_STOP : 1;  ///< DBG_IWDEG_STOP, reset value: 0x0
    uint32_t _RESERVED_782 : 8;
    uint32_t DBG_J2C1_SMBUS_TIMEOUT : 1;  ///< DBG_J2C1_SMBUS_TIMEOUT, reset value: 0x0
    uint32_t DBG_J2C2_SMBUS_TIMEOUT : 1;  ///< DBG_J2C2_SMBUS_TIMEOUT, reset value: 0x0
    uint32_t DBG_J2C3SMBUS_TIMEOUT : 1;  ///< DBG_J2C3SMBUS_TIMEOUT, reset value: 0x0
    uint32_t _RESERVED_783 : 1;
    uint32_t DBG_CAN1_STOP : 1;  ///< DBG_CAN1_STOP, reset value: 0x0
    uint32_t DBG_CAN2_STOP : 1;  ///< DBG_CAN2_STOP, reset value: 0x0
  } DBGMCU_APB1_FZ;

  /** 
  * name: DBGMCU_APB2_FZ
  * description: Debug MCU APB2 Freeze registe
  * address: 0xE004200C
  * offset: 0xC
  * reset value: 0x00000000
  * size: 0x20
  * access: read-write
  */
  struct DBG_DBGMCU_APB2_FZ_t {
    uint32_t DBG_TIM1_STOP : 1;  ///< TIM1 counter stopped when core is halted, reset value: 0x0
    uint32_t DBG_TIM8_STOP : 1;  ///< TIM8 counter stopped when core is halted, reset value: 0x0
    uint32_t _RESERVED_784 : 14;
    uint32_t DBG_TIM9_STOP : 1;  ///< TIM9 counter stopped when core is halted, reset value: 0x0
    uint32_t DBG_TIM10_STOP : 1;  ///< TIM10 counter stopped when core is halted, reset value: 0x0
    uint32_t DBG_TIM11_STOP : 1;  ///< TIM11 counter stopped when core is halted, reset value: 0x0
  } DBGMCU_APB2_FZ;

} DBG_t;


#define TIM2 ((volatile TIM2_t * ) 0x40000000)
#define TIM3 ((volatile TIM3_t * ) 0x40000400)
#define TIM4 ((volatile TIM4_t * ) 0x40000800)
#define TIM5 ((volatile TIM5_t * ) 0x40000C00)
#define TIM6 ((volatile TIM6_t * ) 0x40001000)
#define TIM7 ((volatile TIM7_t * ) 0x40001400)
#define TIM12 ((volatile TIM12_t * ) 0x40001800)
#define TIM13 ((volatile TIM13_t * ) 0x40001C00)
#define TIM14 ((volatile TIM14_t * ) 0x40002000)
#define RTC ((volatile RTC_t * ) 0x40002800)
#define WWDG ((volatile WWDG_t * ) 0x40002C00)
#define IWDG ((volatile IWDG_t * ) 0x40003000)
#define I2S2ext ((volatile I2S2ext_t * ) 0x40003400)
#define SPI2 ((volatile SPI2_t * ) 0x40003800)
#define SPI3 ((volatile SPI3_t * ) 0x40003C00)
#define I2S3ext ((volatile I2S3ext_t * ) 0x40004000)
#define USART2 ((volatile USART2_t * ) 0x40004400)
#define USART3 ((volatile USART3_t * ) 0x40004800)
#define UART4 ((volatile UART4_t * ) 0x40004C00)
#define UART5 ((volatile UART5_t * ) 0x40005000)
#define I2C1 ((volatile I2C1_t * ) 0x40005400)
#define I2C2 ((volatile I2C2_t * ) 0x40005800)
#define I2C3 ((volatile I2C3_t * ) 0x40005C00)
#define CAN1 ((volatile CAN1_t * ) 0x40006400)
#define CAN2 ((volatile CAN2_t * ) 0x40006800)
#define PWR ((volatile PWR_t * ) 0x40007000)
#define DAC ((volatile DAC_t * ) 0x40007400)
#define UART7 ((volatile UART7_t * ) 0x40007800)
#define UART8 ((volatile UART8_t * ) 0x40007C00)
#define TIM1 ((volatile TIM1_t * ) 0x40010000)
#define TIM8 ((volatile TIM8_t * ) 0x40010400)
#define USART1 ((volatile USART1_t * ) 0x40011000)
#define USART6 ((volatile USART6_t * ) 0x40011400)
#define ADC1 ((volatile ADC1_t * ) 0x40012000)
#define ADC2 ((volatile ADC2_t * ) 0x40012100)
#define ADC3 ((volatile ADC3_t * ) 0x40012200)
#define C_ADC ((volatile C_ADC_t * ) 0x40012300)
#define SDIO ((volatile SDIO_t * ) 0x40012C00)
#define SPI1 ((volatile SPI1_t * ) 0x40013000)
#define SPI4 ((volatile SPI4_t * ) 0x40013400)
#define SYSCFG ((volatile SYSCFG_t * ) 0x40013800)
#define EXTI ((volatile EXTI_t * ) 0x40013C00)
#define TIM9 ((volatile TIM9_t * ) 0x40014000)
#define TIM10 ((volatile TIM10_t * ) 0x40014400)
#define TIM11 ((volatile TIM11_t * ) 0x40014800)
#define SPI5 ((volatile SPI5_t * ) 0x40015000)
#define SPI6 ((volatile SPI6_t * ) 0x40015400)
#define SAI1 ((volatile SAI1_t * ) 0x40015800)
#define LTDC ((volatile LTDC_t * ) 0x40016800)
#define GPIOA ((volatile GPIOA_t * ) 0x40020000)
#define GPIOB ((volatile GPIOB_t * ) 0x40020400)
#define GPIOC ((volatile GPIOC_t * ) 0x40020800)
#define GPIOD ((volatile GPIOD_t * ) 0x40020C00)
#define GPIOE ((volatile GPIOE_t * ) 0x40021000)
#define GPIOF ((volatile GPIOF_t * ) 0x40021400)
#define GPIOG ((volatile GPIOG_t * ) 0x40021800)
#define GPIOH ((volatile GPIOH_t * ) 0x40021C00)
#define GPIOI ((volatile GPIOI_t * ) 0x40022000)
#define GPIOJ ((volatile GPIOJ_t * ) 0x40022400)
#define GPIOK ((volatile GPIOK_t * ) 0x40022800)
#define CRC ((volatile CRC_t * ) 0x40023000)
#define RCC ((volatile RCC_t * ) 0x40023800)
#define FLASH ((volatile FLASH_t * ) 0x40023C00)
#define DMA1 ((volatile DMA1_t * ) 0x40026000)
#define DMA2 ((volatile DMA2_t * ) 0x40026400)
#define Ethernet_MAC ((volatile Ethernet_MAC_t * ) 0x40028000)
#define Ethernet_MMC ((volatile Ethernet_MMC_t * ) 0x40028100)
#define Ethernet_PTP ((volatile Ethernet_PTP_t * ) 0x40028700)
#define Ethernet_DMA ((volatile Ethernet_DMA_t * ) 0x40029000)
#define OTG_HS_GLOBAL ((volatile OTG_HS_GLOBAL_t * ) 0x40040000)
#define OTG_HS_HOST ((volatile OTG_HS_HOST_t * ) 0x40040400)
#define OTG_HS_DEVICE ((volatile OTG_HS_DEVICE_t * ) 0x40040800)
#define OTG_HS_PWRCLK ((volatile OTG_HS_PWRCLK_t * ) 0x40040E00)
#define OTG_FS_GLOBAL ((volatile OTG_FS_GLOBAL_t * ) 0x50000000)
#define OTG_FS_HOST ((volatile OTG_FS_HOST_t * ) 0x50000400)
#define OTG_FS_DEVICE ((volatile OTG_FS_DEVICE_t * ) 0x50000800)
#define OTG_FS_PWRCLK ((volatile OTG_FS_PWRCLK_t * ) 0x50000E00)
#define DCMI ((volatile DCMI_t * ) 0x50050000)
#define CRYP ((volatile CRYP_t * ) 0x50060000)
#define HASH ((volatile HASH_t * ) 0x50060400)
#define RNG ((volatile RNG_t * ) 0x50060800)
#define FSMC ((volatile FSMC_t * ) 0xA0000000)
#define NVIC ((volatile NVIC_t * ) 0xE000E000)
#define DBG ((volatile DBG_t * ) 0xE0042000)


typedef enum{
/******  Cortex-M4 Processor Exceptions Numbers ****************************************************************/
  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                          */
  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M4 Memory Management Interrupt                           */
  BusFault_IRQn               = -11,    /*!< 5 Cortex-M4 Bus Fault Interrupt                                   */
  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M4 Usage Fault Interrupt                                 */
  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M4 SV Call Interrupt                                    */
  DebugMonitor_IRQn           = -4,     /*!< 12 Cortex-M4 Debug Monitor Interrupt                              */
  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M4 Pend SV Interrupt                                    */
  SysTick_IRQn                = -1,     /*!< 15 Cortex-M4 System Tick Interrupt                                */
/******  STM32F405 specific Interrupt Numbers *******************************************************************/
  WWDG_IRQn = 0, ///< Window Watchdog interrupt
  PVD_IRQn = 1, ///< PVD through EXTI line detection interrupt
  TAMP_STAMP_IRQn = 2, ///< Tamper and TimeStamp interrupts through the EXTI line
  RTC_WKUP_IRQn = 3, ///< RTC Wakeup interrupt through the EXTI line
  RCC_IRQn = 5, ///< RCC global interrupt
  EXTI0_IRQn = 6, ///< EXTI Line0 interrupt
  EXTI1_IRQn = 7, ///< EXTI Line1 interrupt
  EXTI2_IRQn = 8, ///< EXTI Line2 interrupt
  EXTI3_IRQn = 9, ///< EXTI Line3 interrupt
  EXTI4_IRQn = 10, ///< EXTI Line4 interrupt
  DMA1_Stream0_IRQn = 11, ///< DMA1 Stream0 global interrupt
  DMA1_Stream1_IRQn = 12, ///< DMA1 Stream1 global interrupt
  DMA1_Stream2_IRQn = 13, ///< DMA1 Stream2 global interrupt
  DMA1_Stream3_IRQn = 14, ///< DMA1 Stream3 global interrupt
  DMA1_Stream4_IRQn = 15, ///< DMA1 Stream4 global interrupt
  DMA1_Stream5_IRQn = 16, ///< DMA1 Stream5 global interrupt
  DMA1_Stream6_IRQn = 17, ///< DMA1 Stream6 global interrupt
  ADC_IRQn = 18, ///< ADC1 global interrupt
  CAN1_TX_IRQn = 19, ///< CAN1 TX interrupts
  CAN1_RX0_IRQn = 20, ///< CAN1 RX0 interrupts
  CAN1_RX1_IRQn = 21, ///< CAN1 RX1 interrupts
  CAN1_SCE_IRQn = 22, ///< CAN1 SCE interrupt
  EXTI9_5_IRQn = 23, ///< EXTI Line[9:5] interrupts
  TIM1_BRK_TIM9_IRQn = 24, ///< TIM1 Break interrupt and TIM9 global interrupt
  TIM1_UP_TIM10_IRQn = 25, ///< TIM1 Update interrupt and TIM10 global interrupt
  TIM1_TRG_COM_TIM11_IRQn = 26, ///< TIM1 Trigger and Commutation interrupts and TIM11 global interrupt
  TIM1_CC_IRQn = 27, ///< TIM1 Capture Compare interrupt
  TIM2_IRQn = 28, ///< TIM2 global interrupt
  TIM3_IRQn = 29, ///< TIM3 global interrupt
  TIM4_IRQn = 30, ///< TIM4 global interrupt
  I2C1_EV_IRQn = 31, ///< I2C1 event interrupt
  I2C1_ER_IRQn = 32, ///< I2C1 error interrupt
  I2C2_EV_IRQn = 33, ///< I2C2 event interrupt
  I2C2_ER_IRQn = 34, ///< I2C2 error interrupt
  SPI1_IRQn = 35, ///< SPI1 global interrupt
  SPI2_IRQn = 36, ///< SPI2 global interrupt
  USART1_IRQn = 37, ///< USART1 global interrupt
  USART2_IRQn = 38, ///< USART2 global interrupt
  USART3_IRQn = 39, ///< USART3 global interrupt
  EXTI15_10_IRQn = 40, ///< EXTI Line[15:10] interrupts
  RTC_Alarm_IRQn = 41, ///< RTC Alarms (A and B) through EXTI line interrupt
  OTG_FS_WKUP_IRQn = 42, ///< USB On-The-Go FS Wakeup through EXTI line interrupt
  TIM8_BRK_TIM12_IRQn = 43, ///< TIM8 Break interrupt and TIM12 global interrupt
  TIM8_UP_TIM13_IRQn = 44, ///< TIM8 Update interrupt and TIM13 global interrupt
  TIM8_TRG_COM_TIM14_IRQn = 45, ///< TIM8 Trigger and Commutation interrupts and TIM14 global interrupt
  TIM8_CC_IRQn = 46, ///< TIM8 Capture Compare interrupt
  DMA1_Stream7_IRQn = 47, ///< DMA1 Stream7 global interrupt
  FSMC_IRQn = 48, ///< FSMC global interrupt
  SDIO_IRQn = 49, ///< SDIO global interrupt
  TIM5_IRQn = 50, ///< TIM5 global interrupt
  SPI3_IRQn = 51, ///< SPI3 global interrupt
  UART4_IRQn = 52, ///< UART4 global interrupt
  UART5_IRQn = 53, ///< UART5 global interrupt
  TIM6_DAC_IRQn = 54, ///< TIM6 global interrupt, DAC1 and DAC2 underrun error interrupt
  TIM7_IRQn = 55, ///< TIM7 global interrupt
  DMA2_Stream0_IRQn = 56, ///< DMA2 Stream0 global interrupt
  DMA2_Stream1_IRQn = 57, ///< DMA2 Stream1 global interrupt
  DMA2_Stream2_IRQn = 58, ///< DMA2 Stream2 global interrupt
  DMA2_Stream3_IRQn = 59, ///< DMA2 Stream3 global interrupt
  DMA2_Stream4_IRQn = 60, ///< DMA2 Stream4 global interrupt
  ETH_IRQn = 61, ///< Ethernet global interrupt
  ETH_WKUP_IRQn = 62, ///< Ethernet Wakeup through EXTI line interrupt
  CAN2_TX_IRQn = 63, ///< CAN2 TX interrupts
  CAN2_RX0_IRQn = 64, ///< CAN2 RX0 interrupts
  CAN2_RX1_IRQn = 65, ///< CAN2 RX1 interrupts
  CAN2_SCE_IRQn = 66, ///< CAN2 SCE interrupt
  OTG_FS_IRQn = 67, ///< USB On The Go FS global interrupt
  DMA2_Stream5_IRQn = 68, ///< DMA2 Stream5 global interrupt
  DMA2_Stream6_IRQn = 69, ///< DMA2 Stream6 global interrupt
  DMA2_Stream7_IRQn = 70, ///< DMA2 Stream7 global interrupt
  USART6_IRQn = 71, ///< USART6 global interrupt
  I2C3_EV_IRQn = 72, ///< I2C3 event interrupt
  I2C3_ER_IRQn = 73, ///< I2C3 error interrupt
  OTG_HS_EP1_OUT_IRQn = 74, ///< USB On The Go HS End Point 1 Out global interrupt
  OTG_HS_EP1_IN_IRQn = 75, ///< USB On The Go HS End Point 1 In global interrupt
  OTG_HS_WKUP_IRQn = 76, ///< USB On The Go HS Wakeup through EXTI interrupt
  OTG_HS_IRQn = 77, ///< USB On The Go HS global interrupt
  DCMI_IRQn = 78, ///< DCMI global interrupt
  CRYP_IRQn = 79, ///< CRYP crypto global interrupt
  HASH_RNG_IRQn = 80, ///< Hash and Rng global interrupt
  FPU_IRQn = 81, ///< FPU interrupt
  LCD_TFT_IRQn = 88, ///< LTDC global interrupt
  LCD_TFT_1_IRQn = 89, ///< LTDC global error interrupt
} IRQn_Type;
